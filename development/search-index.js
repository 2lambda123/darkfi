var searchIndex = JSON.parse('{\
"darkfi":{"doc":"","t":[17,2,2,2,2,2,2,14,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,2,2,2,2,2,11,11,0,12,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,0,12,11,12,11,11,0,11,11,11,11,11,12,12,12,12,3,3,3,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,17,17,3,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,17,17,17,17,17,3,3,3,3,3,3,3,3,3,17,17,3,3,3,17,17,17,17,3,3,3,3,3,3,3,3,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,3,3,3,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,12,12,12,12,12,12,12,12,12,12,3,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,11,11,11,11,11,11,11,17,3,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,12,11,12,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,12,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,12,11,11,12,11,11,11,11,11,17,17,3,17,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,3,3,3,3,3,3,3,3,3,3,3,3,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,12,12,11,11,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,0,5,0,5,0,5,5,5,5,5,5,5,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,6,6,11,12,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,12,11,12,17,17,8,10,3,6,17,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,12,0,11,12,12,11,0,5,11,11,12,12,11,11,11,11,11,11,11,11,5,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,6,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,3,6,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,3,3,6,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,11,12,11,11,11,11,12,12,12,11,12,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,17,17,17,3,6,12,11,11,11,11,11,11,5,5,5,11,11,11,12,12,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,17,8,3,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,6,3,6,3,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,13,3,6,4,6,13,13,13,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,12,11,12,11,12,11,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,5,3,17,12,11,11,12,11,11,11,11,12,11,12,11,11,11,12,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,8,6,10,10,3,6,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,2,2,2,17,17,17,17,17,2,8,6,6,10,0,0,0,10,11,11,5,0,10,3,3,12,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,4,13,12,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,3,6,12,12,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,12,12,11,11,5,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,5,12,12,11,11,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,13,13,3,16,16,3,13,3,8,8,4,8,13,3,12,11,11,12,11,11,11,11,11,10,11,11,11,11,11,11,11,10,10,11,12,5,12,0,11,11,0,12,11,11,11,11,12,11,0,11,11,11,10,10,0,11,12,12,12,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,17,3,3,3,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,12,12,12,12,12,0,0,0,0,12,12,0,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,12,12,12,0,0,12,5,12,12,12,12,12,0,12,12,12,12,3,12,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,5,11,11,11,12,11,11,12,11,12,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,5,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,3,3,17,17,17,17,17,17,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,3,13,13,6,13,13,3,3,13,3,13,3,3,3,4,3,3,13,4,6,3,3,3,13,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,12,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,12,11,11,11,11,11,11,12,11,11,11,12,12,11,12,12,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,12,11,17,17,17,5,5,5,5,13,4,13,13,13,13,3,3,3,3,3,4,3,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,8,5,10,5,5,13,13,4,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,0,0,0,0,3,11,11,11,11,12,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,6,5,5,5,5,5,5,8,10,4,13,3,13,17,17,13,13,3,13,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,0,0,0,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,3,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,6,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,14,0,0,0,0,0,0,0,0,5,5,3,11,11,11,11,12,11,11,11,11,11,5,5,5,11,5,5,11,11,11,11,5,11,11,11,11,11,11,11,11,0,17,17,5,5,5,5,5,5,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,13,4,13,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,2,2,0,13,13,13,13,13,4,3,6,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,5,2,0,0,0,0,0,0,0,0,0,0,3,3,8,12,10,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,3,3,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,4,3,3,8,8,13,16,13,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,11,11,11,11,11,10,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,12,12,12,12,12,3,13,13,4,4,8,3,13,8,3,13,8,16,13,3,3,13,3,4,4,3,13,13,8,16,3,13,13,13,13,13,13,13,13,16,3,3,13,3,13,13,3,13,3,13,13,3,13,13,8,3,3,13,11,11,11,12,12,10,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,12,12,10,11,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,12,12,12,11,11,12,12,12,12,12,11,12,11,11,12,11,11,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,10,11,11,10,12,12,11,11,11,10,11,11,12,11,12,12,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,2,3,2,3,12,12,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,11,11,12,12,11,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,4,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,3,11,11,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,4,13,13,3,13,13,13,3,13,3,4,4,13,3,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,17,3,17,11,11,11,12,12,11,11,11,11,12,11,11,11,12,11,11,12,11,11,12,11,11,11,11,11,11,11,12,3,11,11,11,11,12,11,11,11,11,11,5,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,13,13,13,17,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,11,12,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,3,17,17,17,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,4,13,13,13,4,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ANSI_LOGO","ClientFailed","ClientResult","Error","Result","VerifyFailed","VerifyResult","async_daemonize","blockchain","cli_desc","consensus","dht","error","net","raft","rpc","runtime","system","tx","util","wallet","zk","zkas","BlockOrderStore","BlockStore","Blockchain","ContractStateStore","HeaderStore","SlotCheckpointStore","TxStore","WasmStore","add","add_slot_checkpoints","block_store","blocks","borrow","borrow_mut","clone","clone_into","contract_store","contracts","deref","deref_mut","deserialize","drop","from","get_blocks_after","get_blocks_by_hash","get_blocks_by_slot","get_last_proof_hash","get_proof_hash_by_slot","get_slot_checkpoints_after","get_slot_checkpoints_by_slot","has_block","has_slot","has_slot_checkpoint","headers","init","into","is_empty","last","last_slot_checkpoint","len","new","order","pointer_metadata","sled_db","slot_checkpoint_store","slot_checkpoints","to_owned","transactions","try_from","try_into","tx_store","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","wasm_bincode","0","0","0","BlockOrderStore","BlockStore","HeaderStore","SLED_BLOCK_ORDER_TREE","SLED_BLOCK_TREE","SLED_HEADER_TREE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contains","contains","contains","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","get","get","get","get_after","get_all","get_all","get_all","get_last","init","init","init","insert","insert","insert","into","into","into","is_empty","len","new","new","new","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","0","0","ContractStateStore","SLED_BINCODE_TREE","SLED_CONTRACTS_TREE","WasmStore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","get","init","init","init","insert","into","into","lookup","new","new","pointer_metadata","pointer_metadata","remove","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","0","SLED_SLOT_CHECKPOINT_TREE","SlotCheckpointStore","borrow","borrow_mut","clone","clone_into","contains","deref","deref_mut","deserialize","drop","from","get","get_after","get_all","get_last","init","insert","into","is_empty","len","new","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","0","SLED_TX_TREE","TxStore","borrow","borrow_mut","clone","clone_into","contains","deref","deref_mut","deserialize","drop","from","get","get_all","init","insert","into","new","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Block","BlockInfo","BlockProposal","Clock","EncryptedTxRcpt","Float10","Header","LeadCoin","LeadInfo","LeadProof","SlotCheckpoint","TESTNET_BOOTSTRAP_TIMESTAMP","TESTNET_BOOTSTRAP_TIMESTAMP","TESTNET_GENESIS_HASH_BYTES","TESTNET_GENESIS_HASH_BYTES","TESTNET_GENESIS_TIMESTAMP","TESTNET_GENESIS_TIMESTAMP","TESTNET_INITIAL_DISTRIBUTION","TESTNET_INITIAL_DISTRIBUTION","Ticks","TransferStx","Tx","TxRcpt","ValidatorState","ValidatorStatePtr","block","clock","constants","lead_coin","lead_info","proto","rcpt","state","stx","task","tx","types","utils","validator","wallet","Block","BlockInfo","BlockOrder","BlockProposal","BlockResponse","Header","block","block","blockhash","blockhash","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decode","decode","decode","decode","decode","decode","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","epoch","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","genesis_block","genesis_header","hash","header","header","header","headerhash","init","init","init","init","init","init","into","into","into","into","into","into","lead_info","lead_info","magic","magic","name","name","name","name","name","new","new","new","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","previous","root","slot","slot","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","txs","txs","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","version","vzip","vzip","vzip","vzip","vzip","vzip","BB_E","BB_SL","Clock","GENESIS","IDLE","NEWEPOCH","NEWSLOT","OUTOFSYNC","TOCKS","Ticks","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","e","e_len","epoch_abs","fmt","from","from","genesis_time","get_e_len","get_sl_len","init","init","into","into","new","peers","pointer_metadata","pointer_metadata","sl","sl_len","slot_abs","slot_relative","sync","tick_len","tick_time","ticking","ticks","time","time_to_genesis","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","e","e","e","sl","sl","sl","BLOCK_INFO_MAGIC_BYTES","BLOCK_MAGIC_BYTES","BLOCK_VERSION","EPOCH_LENGTH","FINAL_SYNC_DUR","FLOAT10_FIVE","FLOAT10_NEG_ONE","FLOAT10_NEG_TWO","FLOAT10_NINE","FLOAT10_ONE","FLOAT10_TEN","FLOAT10_THREE","FLOAT10_TWO","FLOAT10_ZERO","F_HISTORY_LOG","GENESIS_TOTAL_STAKE","KD","KI","KP","LEADER_HISTORY_LOG","LEADER_PROOF_K","LOTTERY_HEAD_START","LOTTERY_HISTORY_LOG","MAINNET_BOOTSTRAP_TIMESTAMP","MAINNET_GENESIS_HASH_BYTES","MAINNET_GENESIS_TIMESTAMP","MAINNET_INITIAL_DISTRIBUTION","MAX_DER","MAX_F","MIN_DER","MIN_F","P","PID_OUT_STEP","PI_COMMITMENT_ROOT","PI_COMMITMENT_X_INDEX","PI_COMMITMENT_Y_INDEX","PI_MU_RHO_INDEX","PI_MU_Y_INDEX","PI_NULLIFIER_INDEX","PI_SIGMA1_INDEX","PI_SIGMA2_INDEX","PRF_NULLIFIER_PREFIX","RADIX_BITS","REWARD","SLOT_TIME","SYNC_MAX_RETRIES","SYNC_RETRIES_DURATION","TESTNET_BOOTSTRAP_TIMESTAMP","TESTNET_GENESIS_HASH_BYTES","TESTNET_GENESIS_TIMESTAMP","TESTNET_INITIAL_DISTRIBUTION","TXS_CAP","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","__private_field","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","LeadCoin","LeadCoinSecrets","MERKLE_DEPTH","MERKLE_DEPTH_LEAD_COIN","ONE","PREFIX_CM","PREFIX_EVL","PREFIX_PK","PREFIX_SEED","PREFIX_SN","ZERO","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coin1_blind","coin1_commitment","coin1_commitment_merkle_path","coin1_commitment_pos","coin1_commitment_root","coin1_sk","coin1_sk_merkle_path","coin1_sk_pos","coin1_sk_root","commitment","create_lead_proof","create_xfer_proof","deref","deref","deref_mut","deref_mut","derive_coin","derived_commitment","derived_rho","deserialize","deserialize","drop","drop","election_seeds","election_seeds_u64","fmt","from","from","generate","init","init","into","into","is_leader","merkle_paths","merkle_roots","new","nonce","pk","pointer_metadata","pointer_metadata","public_inputs","secret_keys","slot","sn","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","util_derived_rho","util_pk","value","vzip","vzip","LeadInfo","LeadProof","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coin_eta","coin_slot","decode","decode","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","init","init","into","into","leaders","new","pointer_metadata","pointer_metadata","proof","proof","public_inputs","public_key","signature","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","ProtocolProposal","ProtocolSync","ProtocolSyncConsensus","ProtocolTx","block_sub","channel","channel","channel_address","channel_address","consensus_mode","jobsman","jobsman","jobsman","jobsman","p2p","p2p","p2p","proposal_sub","protocol_proposal","protocol_sync","protocol_sync_consensus","protocol_tx","request_sub","request_sub","slot_checkpoin_request_sub","slot_checkpoints_request_sub","slot_checkpoints_sub","state","state","state","state","tx_sub","ProtocolProposal","borrow","borrow_mut","channel_address","deref","deref_mut","deserialize","drop","from","handle_receive_proposal","init","init","into","jobsman","name","p2p","pointer_metadata","proposal_sub","start","state","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","BATCH","ProtocolSync","block_sub","borrow","borrow_mut","channel","consensus_mode","deref","deref_mut","deserialize","drop","from","handle_receive_block","handle_receive_request","handle_receive_slot_checkpoint","handle_receive_slot_checkpoint_request","init","init","into","jobsman","name","p2p","pointer_metadata","request_sub","slot_checkpoin_request_sub","slot_checkpoints_sub","start","state","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolSyncConsensus","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","from","handle_receive_request","handle_receive_slot_checkpoints_request","init","init","into","jobsman","name","pointer_metadata","request_sub","slot_checkpoints_request_sub","start","state","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolTx","borrow","borrow_mut","channel_address","deref","deref_mut","deserialize","drop","from","handle_receive_tx","init","init","into","jobsman","name","p2p","pointer_metadata","start","state","try_from","try_into","tx_sub","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AEAD_TAG_SIZE","CIPHER_SIZE","EncryptedTxRcpt","PLAINTEXT_SIZE","TxRcpt","borrow","borrow","borrow_mut","borrow_mut","ciphertext","clone","clone","clone_into","clone_into","decode","decode","decrypt","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode","encrypt","ephem_public","eq","eq","equivalent","equivalent","fmt","fmt","from","from","init","init","into","into","opening","pointer_metadata","pointer_metadata","rho","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","ConsensusRequest","ConsensusResponse","ConsensusSlotCheckpointsRequest","ConsensusSlotCheckpointsResponse","ConsensusState","Fork","ForkInfo","SlotCheckpoint","SlotCheckpointRequest","SlotCheckpointResponse","StateCheckpoint","StateCheckpointInfo","add","blockchain","bootstrap_slot","bootstrap_slot","bootstrap_slot","bootstrap_ts","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_sigmas","check_chain","check_state_checkpoint","checked_finalization","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coins","coins","coins_tree","coins_tree","create_coins","current_epoch","current_slot","decode","decode","decode","decode","decode","decode","decode","decode","decode","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","discrete_pid","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","epoch","epoch_changed","epoch_eta","err_history","eta","extend_leaders_history","f_err","f_history","find_extended_chain_index","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forks","forks","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","generate_slot_checkpoint","genesis_block","genesis_block","genesis_block","genesis_slot_checkpoint","genesis_ts","get_eta","get_slot_checkpoint","init","init","init","init","init","init","init","init","init","init","init","init","init_coins","initial_distribution","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_slot_leader","last_slot","leaders_history","leaders_history","longest_chain_index","longest_chain_length","name","name","name","name","name","name","name","new","new","new","new","next_n_epoch_start","next_n_slot_start","nullifiers","nullifiers","nullifiers","nullifiers","participating","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proposal","proposal","proposal_exists","proposing","relative_slot","reset","reward","sequence","sequence","set_leader_history","set_participating","sigma1","sigma2","sigmas","single_node","slot","slot","slot_checkpoints","slot_checkpoints","slot_checkpoints","slot_checkpoints_is_empty","slot_epoch","slot_rewards","slots_to_next_n_epoch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stake","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unconfirmed_txs","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","update_forks_checkpoints","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","win_inv_prob_with_full_stake","TransferStx","borrow","borrow_mut","change_coin_commitment","clone","clone_into","coin_commitment","coin_pk","coin_root_sk","decode","deref","deref_mut","deserialize","drop","encode","fmt","from","init","into","nullifier","pointer_metadata","proof","public_inputs","root","slot","to_owned","transfered_coin_commitment","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verify","vzip","block_sync","block_sync_task","consensus_sync","consensus_sync_task","proposal","proposal_task","block_sync_task","consensus_sync_task","consensus_loop","finalization_period","proposal_task","propose_period","Tx","borrow","borrow_mut","cipher","clone","clone_into","decode","deref","deref_mut","deserialize","drop","encode","fmt","from","init","into","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","xfer","0","B","Float10","abs","add","add_assign","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","fmt","fmt","from","init","into","ln","mul","partial_cmp","pointer_metadata","powf","repr","sub","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","base2ibig","fbig2base","fbig2ibig","ValidatorState","ValidatorStatePtr","VerifyingKeyMap","append_tx","blockchain","borrow","borrow_mut","chain_finalization","consensus","deref","deref_mut","deserialize","drop","from","init","into","lead_proving_key","lead_verifying_key","new","pointer_metadata","propose","receive_blocks","receive_finalized_block","receive_finalized_slot_checkpoints","receive_proposal","receive_slot_checkpoints","receive_sync_blocks","remove_txs","single_node","subscribers","try_from","try_into","type_id","unconfirmed_txs","unproposed_txs","upcast_any_box","upcast_any_mut","upcast_any_ref","verify_transactions","verifying_keys","vzip","wallet","CONSENSUS_KEYS_COLUMN_IS_DEFAULT","CONSENSUS_KEYS_TABLE","ConsensusWallet","get_default_keypair","Dht","DhtPtr","SEEN_DURATION","borrow","borrow_mut","contains_key","deref","deref_mut","deserialize","drop","from","get","id","init","insert","into","lookup","lookup_insert","lookup_remove","map","messages","new","p2p","p2p_recv_channel","pointer_metadata","protocol","prune_seen_messages","remove","request_key","seen","stop_signal","sync_lookup_map","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","waiting_for_response","KeyRequest","KeyResponse","LookupMapRequest","LookupMapResponse","LookupRequest","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","daemon","daemon","decode","decode","decode","decode","decode","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","id","id","id","id","id","init","init","init","init","init","into","into","into","into","into","key","key","key","lookup","name","name","name","name","name","new","new","new","new","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","req_type","to","to","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","value","vzip","vzip","vzip","vzip","vzip","Protocol","borrow","borrow_mut","channel","deref","deref_mut","deserialize","dht","drop","from","handle_receive_lookup_map_request","handle_receive_lookup_request","handle_receive_request","handle_receive_response","init","init","into","jobsman","lookup_map_sub","lookup_sub","name","notify_queue_sender","p2p","pointer_metadata","req_sub","resp_sub","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AcceptConnectionFailed","AcceptTlsConnectionFailed","AddrParseError","AsyncChannelRecvError","AsyncChannelSendError","BackwardsTime","BadOperationType","BindFailed","BlockNotFound","Bs58DecodeError","BurnProof","ChannelStopped","ChannelTimeout","ClearInputSignature","ClientFailed","ClientFailed","ClientResult","ClockOutOfSync","CoinFromBytes","ConfigInvalid","ConfigNotFound","ConnectFailed","ConnectTimeout","ContractAlreadyInitialized","ContractError","ContractExecError","ContractInitError","ContractNotFound","ContractStateNotFound","Custom","DashuParseError","DecodeError","EncodeError","Error","ExtendedChainIndexNotFound","HeaderNotFound","HexDecodeError","InfallibleError","InputSignature","InternalError","InternalError","InvalidAddress","InvalidAddress","InvalidAmount","InvalidCashierOrFaucetKey","InvalidClock","InvalidMerkle","InvalidPublicInputsError","InvalidSignature","Io","Io","JsonRpcError","KeypairPathNotFound","LackingInputs","LackingOutputs","LeaderProofVerification","MalformedPacket","MintProof","MissingFunds","NetworkNotConnected","NetworkOperationFailed","NetworkServiceStopped","NoSocks5UrlFound","NoUrlFound","NonMinimalVarInt","NotEnoughValue","NoteDecryptionFailed","NullifierExists","ParseFailed","ParseFloatError","ParseIntError","PlonkError","ProofVerifyFailed","ProposalAfterFinalizationError","ProposalDifferentCoinEtaError","ProposalHashesMissmatchError","ProposalHeadersMissmatchError","ProposalIsSpent","ProposalNotForCurrentSlotError","ProposalProposerNotEligible","ProposalPublicValuesMismatched","ProposalTxsExceedCapError","PublicKeyFromBytes","PublicKeyFromStr","RaftError","Result","RustlsError","RustlsInvalidDns","SecretKeyFromBytes","SecretKeyFromStr","SerdeJsonError","SetLoggerError","SledError","SlotCheckpointNotFound","SlotNotFound","SocksError","SqlxError","StateTransitionError","StrUtf8Error","TimeoutError","TokenMismatch","TokenParseError","TomlDeserializeError","TorError","TransactionNotFound","TransferTxVerification","TryFromSliceError","TungsteniteError","TxRcptDecryptionError","UnexpectedJsonRpc","UnknownKey","UnknownNodeError","UnsupportedChain","UnsupportedCoinNetwork","UnsupportedOS","UnsupportedToken","UnsupportedTransport","UnsupportedTransportUpgrade","UrlParse","UrlParseError","Utf8Error","ValueIsNotObject","VerifyError","VerifyFailed","VerifyFailed","VerifyResult","WalletEmptyPassword","WalletInsufficientBalance","WalletTreeExists","WasmBincodeNotFound","WasmerCompileError","WasmerExportError","WasmerInstantiationError","WasmerMemoryError","WasmerOomError","WasmerRuntimeError","ZkasBincodeNotFound","ZkasDecoderError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","into","into","into","pointer_metadata","pointer_metadata","pointer_metadata","provide","provide","provide","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","Acceptor","AcceptorPtr","Channel","ChannelPtr","Connector","Hosts","HostsPtr","Message","MessageSubscription","P2p","P2pPtr","ProtocolBase","ProtocolBasePtr","ProtocolJobsManager","ProtocolJobsManagerPtr","SESSION_ALL","SESSION_INBOUND","SESSION_MANUAL","SESSION_OUTBOUND","SESSION_SEED","Session","SessionBitflag","SessionWeakPtr","Settings","SettingsPtr","acceptor","channel","connector","constants","hosts","message","message_subscriber","p2p","protocol","session","settings","transport","Acceptor","AcceptorPtr","accept","borrow","borrow_mut","channel_subscriber","deref","deref_mut","deserialize","drop","from","handle_stop","init","into","new","pointer_metadata","run_accept_loop","session","start","stop","subscribe","task","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Channel","ChannelInfo","ChannelPtr","address","address","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","get_info","get_info","get_message_subsystem","handle_stop","info","init","init","into","into","is_eof_error","last_msg","last_status","log","main_receive_loop","message_subsystem","new","new","pointer_metadata","pointer_metadata","random_id","reader","receive_task","remote_node_id","remote_node_id","send","send_message","session","session","session_type_id","set_remote_node_id","setup_dispatchers","start","stop","stop_subscriber","stopped","subscribe_msg","subscribe_stop","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","writer","Connector","borrow","borrow_mut","connect","connect_channel","deref","deref_mut","deserialize","drop","from","init","into","new","pointer_metadata","session","settings","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","IP4_PRIV_RANGES","IP6_PRIV_RANGES","LOCALNET","Hosts","HostsPtr","addrs","borrow","borrow_mut","deref","deref_mut","deserialize","drop","filter_invalid","filter_localnet","filter_non_resolving","from","init","into","ipv4_range","ipv6_range","is_empty","is_valid_onion","load_all","localnet","new","pointer_metadata","remove","store","store_ext","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AddrsMessage","ExtAddrsMessage","GetAddrsMessage","MAGIC_BYTES","Message","Packet","PingMessage","PongMessage","VerackMessage","VersionMessage","addrs","app","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","command","decode","decode","decode","decode","decode","decode","decode","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","ext_addrs","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","name","name","name","name","name","name","name","name","node_id","nonce","nonce","payload","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read_packet","send_packet","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","MessageDispatcher","MessageDispatcherInterface","MessageResult","MessageSubscription","MessageSubscriptionId","MessageSubsystem","_trigger_all","add_dispatch","as_any","as_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","collect_garbage","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","dispatchers","drop","drop","drop","from","from","from","id","init","init","init","into","into","into","new","new","notify","parent","pointer_metadata","pointer_metadata","pointer_metadata","random_id","receive","recv_queue","subs","subscribe","subscribe","trigger","trigger","trigger_error","trigger_error","trigger_error","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unsubscribe","unsubscribe","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","ConnectedChannels","Open","P2p","P2pPtr","P2pState","PendingChannels","Run","Start","Started","add_pending","borrow","borrow","borrow_mut","borrow_mut","broadcast","broadcast_with_exclude","channel_subscriber","channels","channels","connections_count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","discovery","drop","drop","exists","fmt","from","from","get_info","hosts","hosts","init","init","into","into","new","outbound_addr_loop","pending","pointer_metadata","pointer_metadata","protocol_registry","protocol_registry","random_channel","remove","remove_pending","run","session_inbound","session_inbound","session_manual","session_manual","session_outbound","session_outbound","settings","settings","start","start_discovery","state","stop","stop_discovery","stop_subscriber","store","subscribe_channel","subscribe_stop","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","wait_for_outbound","ProtocolAddress","ProtocolBase","ProtocolBasePtr","ProtocolJobsManager","ProtocolJobsManagerPtr","ProtocolPing","ProtocolRegistry","ProtocolSeed","ProtocolVersion","protocol_address","protocol_base","protocol_jobs_manager","protocol_ping","protocol_registry","protocol_seed","protocol_version","register_default_protocols","ProtocolAddress","SEND_ADDR_SLEEP_SECONDS","addrs_sub","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","ext_addrs_sub","from","get_addrs_sub","handle_receive_addrs","handle_receive_ext_addrs","handle_receive_get_addrs","hosts","init","init","into","jobsman","name","pointer_metadata","send_my_addrs","settings","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolBase","ProtocolBasePtr","name","start","ProtocolJobsManager","ProtocolJobsManagerPtr","borrow","borrow_mut","channel","close_all_tasks","deref","deref_mut","deserialize","drop","from","handle_stop","init","into","name","new","pointer_metadata","spawn","start","tasks","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolPing","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","from","init","init","into","jobsman","name","ping_sub","pointer_metadata","pong_sub","random_nonce","reply_to_ping","run_ping_pong","settings","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Constructor","ProtocolRegistry","attach","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","from","init","into","new","pointer_metadata","protocol_constructors","register","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolSeed","addr_sub","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","from","hosts","init","init","into","name","pointer_metadata","send_self_address","settings","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolVersion","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","exchange_versions","from","hosts","init","into","new","pointer_metadata","recv_version","run","send_version","settings","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verack_sub","version_sub","vzip","InboundSession","ManualSession","OutboundSession","SESSION_ALL","SESSION_INBOUND","SESSION_MANUAL","SESSION_OUTBOUND","SESSION_SEED","SeedSyncSession","Session","SessionBitflag","SessionWeakPtr","get_info","inbound_session","manual_session","outbound_session","p2p","perform_handshake_protocols","register_channel","remove_sub_on_stop","seedsync_session","type_id","InboundInfo","InboundSession","accept_tasks","acceptors","borrow","borrow","borrow_mut","borrow_mut","channel","channel_sub_loop","connect_infos","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","get_info","get_info","init","init","into","into","manage_channel_for_get_info","new","p2p","p2p","pointer_metadata","pointer_metadata","setup_channel","start","start_accept_session","stop","try_from","try_from","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ManualSession","borrow","borrow_mut","channel_connect_loop","channel_subscriber","connect","connect_slots","deref","deref_mut","deserialize","disable_notify","drop","enable_notify","from","get_info","init","into","new","notify","p2p","p2p","pointer_metadata","stop","subscribe_channel","try_from","try_into","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Connected","Open","OutboundInfo","OutboundSession","OutboundState","Pending","addr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel","channel_connect_loop","channel_subscriber","clone","clone","clone_into","clone_into","connect_slots","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","disable_notify","drop","drop","drop","enable_notify","fmt","from","from","from","get_info","get_info","init","init","init","into","into","into","load_address","new","notify","p2p","p2p","peer_discovery","pointer_metadata","pointer_metadata","pointer_metadata","slot_info","start","state","stop","subscribe_channel","to_owned","to_owned","to_string","try_connect","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","SeedSyncSession","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","get_info","init","into","new","p2p","p2p","pointer_metadata","start","start_seed","try_from","try_into","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Settings","SettingsOpt","SettingsPtr","app_version","app_version","borrow","borrow","borrow_mut","borrow_mut","channel_handshake_seconds","channel_handshake_seconds","channel_heartbeat_seconds","channel_heartbeat_seconds","channel_log","channel_log","clap","clone","clone","clone_into","clone_into","connect_timeout_seconds","connect_timeout_seconds","default","default","default_as_true","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","external_addr","external_addr","fmt","fmt","from","from","from","from_clap","get_outbound_transports","inbound","inbound","init","init","into","into","localnet","localnet","manual_attempt_limit","manual_attempt_limit","merge","node_id","node_id","outbound_connections","outbound_connections","outbound_retry_seconds","outbound_retry_seconds","outbound_transports","outbound_transports","peer_discovery","peer_discovery","peers","peers","pointer_metadata","pointer_metadata","seed_query_timeout_seconds","seed_query_timeout_seconds","seeds","seeds","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Acceptor","Connector","Dial","Listener","Nym","Tcp","TcpTransport","TlsDialer","TlsListener","TlsUpgrade","Tor","TorTransport","Transport","TransportListener","TransportName","TransportStream","Unix","UnixTransport","backlog","borrow","borrow_mut","client_config","clone","clone_into","deref","deref_mut","deserialize","dial","drop","eq","equivalent","fmt","from","init","into","listen_on","next","pointer_metadata","server_config","socket_addr_to_url","socks_url","tcp","to_owned","to_scheme","tor","tor_controller","try_from","try_from","try_from","try_into","ttl","type_id","unix","upcast_any_box","upcast_any_mut","upcast_any_ref","upgrade_dialer","upgrade_listener","upgrade_tls","vzip","0","0","0","TcpTransport","backlog","borrow","borrow_mut","clone","clone_into","create_socket","deref","deref_mut","deserialize","dial","do_dial","do_listen","drop","from","init","into","listen_on","new","pointer_metadata","to_owned","try_from","try_into","ttl","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","upgrade_dialer","upgrade_listener","vzip","TorController","TorTransport","auth","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_ehs","create_ehs","create_socket","deref","deref","deref_mut","deref_mut","deserialize","deserialize","dial","do_dial","do_listen","drop","drop","from","from","get_dialer_env","get_listener_env","init","init","into","into","listen_on","new","new","pointer_metadata","pointer_metadata","socket","socks_url","to_owned","to_owned","tor_controller","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upgrade_dialer","upgrade_listener","vzip","vzip","UnixTransport","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","dial","do_dial","do_listen","drop","from","init","into","listen_on","new","pointer_metadata","to_owned","try_from","try_into","type_id","unix_socket_addr_to_string","upcast_any_box","upcast_any_mut","upcast_any_ref","upgrade_dialer","upgrade_listener","vzip","CIPHER_SUITE","ClientCertificateVerifier","ServerCertificateVerifier","TlsUpgrade","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cipher_suite","client_auth_root_subjects","client_config","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","new","pointer_metadata","pointer_metadata","pointer_metadata","server_config","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upgrade_dialer_tls","upgrade_listener_tls","verify_client_cert","verify_server_cert","vzip","vzip","vzip","DataStore","NetMsg","ProtocolRaft","Raft","RaftSettings","_db","acked_length","channel","commits","commits_channel","consensus","consensus_candidate","consensus_follower","consensus_leader","current_leader","current_term","datastore","datastore","datastore_path","gen_id","heartbeat_timeout","id","id","id","id","id_timeout","jobsman","last_heartbeat","last_term","logs","method","msg_sub","msgs_channel","nodes","notify_queue_sender","p2p","p2p_send_loop","p2p_sender","payload","pending_msgs","primitives","protocol_raft","prun_duration","prune_map","recipient_id","role","seen_msgs","seen_msgs","sent_length","settings","settings","timeout","voted_for","votes_received","Raft","acked_length","acks","append_log","borrow","borrow_mut","broadcast_msg","commit_log","commits_channel","commits_len","current_leader","current_term","datastore","deref","deref_mut","deserialize","drop","from","gen_id","get_log","handle_method","id","id","init","into","last_heartbeat","last_log","last_term","logs","logs_len","msgs_channel","new","nodes","p2p_sender","pending_msgs","pointer_metadata","push_commit","push_log","push_logs","receive_log_request","receive_log_response","receive_vote_request","receive_vote_response","receiver","reset_last_term","role","run","seen_msgs","send","send_heartbeat","send_id_msg","send_loop","send_vote_request","sender","sent_length","set_current_term","set_voted_for","settings","slice_logs_from","slice_logs_to","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","update_logs","voted_for","votes_received","vzip","DataStore","DataTree","SLED_COMMITS_TREE","SLED_CURRENT_TERM_TREE","SLED_ID_TREE","SLED_LOGS_TREE","SLED_VOTED_FOR_TREE","_SLED_COMMITS_LENGTH_TREE","_db","borrow","borrow","borrow_mut","borrow_mut","commits","current_term","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","flush","from","from","get","get_all","get_last","id","init","init","insert","into","into","is_empty","len","logs","new","new","phantom","pointer_metadata","pointer_metadata","tree","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","voted_for","vzip","vzip","wipe_insert_all","0","0","0","0","BroadcastMsgRequest","BroadcastRequest","Candidate","Channel","Follower","Leader","Log","LogRequest","LogRequest","LogResponse","LogResponse","Logs","MapLength","NetMsg","NetMsgMethod","NodeId","NodeIdMsg","NodeIdMsg","Role","Sender","SyncRequest","SyncResponse","VoteRequest","VoteRequest","VoteResponse","VoteResponse","ack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","commit_length","commit_length","current_term","current_term","current_term","current_term","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get_hash","hash","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","last_term","last_term","leader_id","leader_id","len","log_length","logs","logs_len","method","msg","name","node_id","node_id","node_id","ok","ok","payload","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prefix_len","prefix_term","recipient_id","set_ok","slice_from","slice_to","suffix","term","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wipe","ProtocolRaft","borrow","borrow_mut","channel","deref","deref_mut","deserialize","drop","from","handle_receive_msg","id","init","init","into","jobsman","msg_sub","name","notify_queue_sender","p2p","pointer_metadata","seen_msgs","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","RaftSettings","borrow","borrow_mut","clone","clone_into","datastore_path","default","deref","deref_mut","deserialize","drop","fmt","from","heartbeat_timeout","id_timeout","init","into","pointer_metadata","prun_duration","timeout","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","client","clock_sync","jsonrpc","server","websockets","RpcClient","borrow","borrow_mut","close","deref","deref_mut","deserialize","drop","from","init","into","new","oneshot_request","open_channels","pointer_metadata","recv","reqrep_loop","request","send","stop_signal","subscribe","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","url","vzip","EPOCH","NTP_ADDRESS","RETRIES","check_clock","clock_check","ntp_request","peer_request","Error","ErrorCode","InternalError","InvalidId","InvalidParams","InvalidRequest","JsonError","JsonErrorVal","JsonNotification","JsonRequest","JsonResponse","JsonResult","JsonSubscriber","MethodNotFound","Notification","ParseError","Response","ServerError","Subscriber","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","code","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","desc","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","id","id","id","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","jsonrpc","jsonrpc","jsonrpc","jsonrpc","jsonrpc","message","method","method","new","new","new","new","new","params","params","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","result","serialize","serialize","serialize","serialize","serialize","serialize","serialize","subscriber","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","RequestHandler","accept","handle_request","listen_and_serve","run_accept_loop","Tcp","Tls","WsStream","borrow","borrow_mut","connect","deref","deref_mut","deserialize","drop","from","init","into","into_stream","pointer_metadata","poll_close","poll_flush","poll_next","poll_ready","start_send","try_from","try_into","try_poll_next","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","0","0","import","memory","vm_runtime","db","merkle","util","DbHandle","apply_batch","borrow","borrow_mut","contains_key","contract_id","db_contains_key","db_del","db_get","db_init","db_lookup","db_set","deref","deref_mut","deserialize","drop","flush","from","get","init","into","new","pointer_metadata","tree","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","MerkleTree","merkle_add","drk_log","get_object_bytes","get_object_size","put_object_bytes","set_return_data","MemoryManipulation","write_slice","ContractSection","Deploy","Env","Exec","GAS_LIMIT","MEMORY","Metadata","Null","Runtime","Update","apply","blockchain","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","clone","clone_into","contract_bincode","contract_id","contract_return_data","contract_section","copy_to_memory","ctx","db_batches","db_handles","deploy","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","exec","from","from","from","gas_info","init","init","init","instance","into","into","into","logs","memory","memory","memory_view","metadata","name","new","objects","pointer_metadata","pointer_metadata","pointer_metadata","print_logs","serialize_payload","set_memory_page_size","store","take_memory","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","vzip","vzip","ExecutorPtr","StoppableTask","StoppableTaskPtr","Subscriber","SubscriberPtr","Subscription","stoppable_task","subscriber","types","StoppableTask","StoppableTaskPtr","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","new","pointer_metadata","start","stop","stop_recv","stop_send","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Subscriber","SubscriberPtr","Subscription","SubscriptionId","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","get_id","id","init","init","into","into","new","notify","notify_with_exclude","parent","pointer_metadata","pointer_metadata","random_id","receive","recv_queue","subs","subscribe","try_from","try_from","try_into","try_into","type_id","type_id","unsubscribe","unsubscribe","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ExecutorPtr","Transaction","VerifyingKeyMap","borrow","borrow_mut","calls","clone","clone_into","create_sigs","decode","deref","deref_mut","deserialize","drop","encode","encode_without_sigs","eq","equivalent","fmt","from","init","into","name","pointer_metadata","proofs","signatures","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verify_sigs","verify_zkps","vzip","zip","async_util","cli","encoding","file","net_name","parse","path","time","msleep","sleep","Config","borrow","borrow_mut","clone","clone_into","config","default","deref","deref_mut","deserialize","drop","fg_green","fg_red","fg_reset","from","get_log_config","get_log_level","init","into","load","pointer_metadata","spawn_config","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","base32","ENCODE_STD","STD_INV_ALPHABET","decode","encode","load_file","load_json_file","save_file","save_json_file","Bitcoin","DarkFi","Ethereum","NetworkName","Solana","borrow","borrow_mut","clone","clone_into","decode","deref","deref_mut","deserialize","deserialize","drop","encode","eq","equivalent","fmt","fmt","from","from_str","get_hash","hash","init","into","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","char_eq","decode_base10","encode_base10","is_digit","truncate","config_dir","expand_path","get_config_path","home_dir","home_fallback","is_absolute_path","join_config_path","load_keypair_to_str","0","0","Date","DateFormat","DateTime","Default","NanoTimestamp","Nanos","Timestamp","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","current_time","current_time","decode","decode","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","elapsed","encode","encode","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","timestamp_to_date","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unix_timestamp","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","WalletDb","WalletPtr","walletdb","Blob","Integer","Last","OptionBlob","OptionInteger","QueryType","WalletDb","WalletPtr","borrow","borrow","borrow_mut","borrow_mut","conn","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","exec_sql","from","from","from","get_default_keypair","init","init","init_wallet","into","into","new","pointer_metadata","pointer_metadata","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Proof","ProvingKey","VerifyingKey","Witness","ZkCircuit","assign_free_advice","empty_witnesses","gadget","halo2","proof","vm","vm_stack","arithmetic","is_zero","less_than","native_range_check","small_range_check","ArithChip","ArithConfig","ArithInstruction","a","add","add","b","borrow","borrow","borrow_mut","borrow_mut","c","clone","clone_into","config","config","configure","construct","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","init","init","into","into","loaded","mul","mul","pointer_metadata","pointer_metadata","q_add","q_mul","q_sub","sub","sub","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","IsZeroChip","IsZeroConfig","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","config","configure","construct","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","expr","fmt","from","from","init","init","into","into","is_zero_expr","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_inv","vzip","vzip","LessThanChip","LessThanConfig","a","a_offset","b","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","config","configure","construct","copy_less_than","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","k_values_table","less_than","less_than_range_check","loaded","pointer_metadata","pointer_metadata","range_a_config","range_a_offset_config","s_lt","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","witness_less_than","NativeRangeCheckChip","NativeRangeCheckConfig","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","config","configure","construct","copy_range_check","decompose","decompose_value","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","k_values_table","load_k_table","loaded","pointer_metadata","pointer_metadata","s_rc","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","witness_range_check","z","SmallRangeCheckChip","SmallRangeCheckConfig","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config","config","configure","construct","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","loaded","pointer_metadata","pointer_metadata","range_check","selector","small_range_check","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z","Advice","Assigned","AssignedCell","Column","Field","Layouter","Rational","Root","Trivial","Value","Zero","_marker","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","and_then","as_mut","as_ref","assert_if_known","assign_region","assign_table","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell","cell","cell","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cloned","cmp","column_type","column_type","constrain_instance","copied","copied","copy_advice","cube","cube","cube","default","denominator","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","double","double","double","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","error_if_known_and","evaluate","evaluate","evaluate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get_hash","get_hash","get_root","hash","hash","index","init","init","init","init","init","inner","into","into","into","into","into","into_field","invert","invert","invert","is_zero","is_zero_vartime","is_zero_vartime","known","map","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","namespace","neg","neg","neg","numerator","one","partial_cmp","plonk","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pop_namespace","pow_vartime","push_namespace","random","sqrt","square","square","square","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","transpose_array","transpose_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unknown","unzip","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","value","value","value","value","value","value_field","vzip","vzip","vzip","vzip","vzip","zero","zip","0","0","1","0","1","Advice","Advice","Advice","Any","Assigned","Assignment","BatchVerifier","BoundsFailure","Circuit","Column","ColumnNotInPermutation","ColumnType","Config","Constant","Constraint","ConstraintSystem","ConstraintSystemFailure","Constraints","Error","Expression","Fixed","Fixed","Fixed","FloorPlanner","FloorPlanner","Instance","Instance","Instance","InstanceTooLarge","InvalidInstances","Negated","NotEnoughColumnsForConstants","NotEnoughRowsAvailable","Opening","Output","PinnedConstraintSystem","PinnedVerificationKey","Product","ProvingKey","Rational","Scaled","Selector","Selector","SingleVerifier","Sum","Synthesis","TableColumn","Transcript","Trivial","VerificationStrategy","VerifyingKey","VirtualCells","Zero","add","add_proof","advice_column","advice_queries","advice_queries","assign_advice","assign_fixed","base_modulus","blinding_factors","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","column_type","complex_selector","configure","constants","constants","constraints","copy","create_gate","create_proof","cs","cs","cs_degree","default","default","degree","degree","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","domain","domain","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable","enable_constant","enable_equality","enable_selector","enter_region","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","evaluate","exit_region","fill_from_row","finalize","fixed_column","fixed_commitments","fixed_commitments","fixed_cosets","fixed_polys","fixed_queries","fixed_queries","fixed_values","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gates","gates","get_domain","get_hash","get_hash","get_hash","get_hash","get_hash","get_vk","hash","hash","hash","hash","hash","hash_into","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","instance_column","instance_queries","instance_queries","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_simple","items","keygen_pk","keygen_vk","l0","l_blind","l_last","lookup","lookup_table_column","lookups","lookups","meta","minimum_degree","minimum_degree","minimum_rows","msm","mul","mul","name","neg","new","new","num_advice_columns","num_advice_columns","num_advice_queries","num_fixed_columns","num_fixed_columns","num_instance_columns","num_instance_columns","num_selectors","num_selectors","partial_cmp","permutation","permutation","permutation","permutation","permutation","pinned","pinned","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poly","pop_namespace","process","process","provide","push_namespace","queried_cells","queried_selectors","query_advice","query_any","query_fixed","query_instance","query_instance","query_selector","scalar_modulus","selector","selector","selector_map","set_minimum_degree","source","square","sub","synthesize","synthesize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transcript_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify_proof","vk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_selector","without_witnesses","0","0","1","0","0","current_k","0","0","0","0","0","0","1","1","1","column_index","column_index","column_index","query_index","query_index","query_index","rotation","rotation","rotation","0","Proof","ProvingKey","VerifyingKey","as_bits","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build","clone","clone","clone","clone_into","clone_into","clone_into","create","decode","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","encode","encode_hex","encode_hex_upper","eq","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","new","params","params","pk","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_as_bits","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vk","vzip","vzip","vzip","StackVar","VmConfig","Witness","ZkCircuit","_sinsemilla_cfg2","advices","arith_config","arithmetic_chip","boolcheck_config","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","configure","constants","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","ecc_chip","ecc_config","from","from","init","init","into","into","lessthan_config","literals","merkle_cfg1","merkle_cfg2","merkle_chip_1","merkle_chip_2","native_253_range_check_config","native_64_range_check_config","new","opcodes","pointer_metadata","pointer_metadata","poseidon_chip","poseidon_config","primary","sinsemilla_cfg1","synthesize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","without_witnesses","witnesses","Base","Base","EcFixedPoint","EcFixedPoint","EcFixedPointBase","EcFixedPointShort","EcNiPoint","EcNiPoint","EcPoint","EcPoint","Literal","MerklePath","MerklePath","Scalar","Scalar","StackVar","Uint32","Uint32","Uint64","Uint64","Uint64","Witness","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","empty_witnesses","fmt","from","from","from","impl_from","init","init","init","into","into","into","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","Analyzer","Compiler","Lexer","LitType","Opcode","Parser","VarType","ZkBinary","analyzer","ast","compiler","decoder","error","lexer","opcode","parser","types","Analyzer","analyze_semantic","analyze_types","borrow","borrow_mut","constants","deref","deref_mut","deserialize","drop","error","from","init","into","literals","lookup_constant","lookup_stack","lookup_var","lookup_witness","new","pause","pointer_metadata","stack","statements","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witnesses","Arg","Assign","Call","Constant","Constant","Func","Lit","Literal","Noop","Statement","StatementType","Var","Var","Variable","Variable","Witness","Witness","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column","column","column","column","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","lhs","line","line","line","line","line","name","name","name","name","opcode","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","rhs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","BINARY_VERSION","Compiler","MAGIC_BYTES","borrow","borrow_mut","compile","constants","debug_info","deref","deref_mut","deserialize","drop","error","from","init","into","literals","lookup_literal","lookup_stack","namespace","new","pointer_metadata","statements","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witnesses","ZkBinary","borrow","borrow_mut","clone","clone_into","constants","decode","deref","deref_mut","deserialize","drop","find_subslice","fmt","from","init","into","literals","namespace","opcodes","parse_circuit","parse_constants","parse_contract","parse_literals","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witnesses","ErrorEmitter","abort","borrow","borrow_mut","deref","deref_mut","deserialize","drop","emit","file","fmt","from","init","into","lines","namespace","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","warn","Assign","Comma","LeftBrace","LeftParen","Lexer","Number","RightBrace","RightParen","SPECIAL_CHARS","Semicolon","String","Symbol","Token","TokenType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","equivalent","error","fmt","fmt","from","from","from","init","init","init","into","into","into","is_digit","is_letter","lex","line","new","new","pointer_metadata","pointer_metadata","pointer_metadata","source","to_owned","to_owned","token","token_type","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","BaseAdd","BaseMul","BaseSub","BoolCheck","ConstrainEqualBase","ConstrainEqualPoint","ConstrainInstance","DebugPrint","EcAdd","EcGetX","EcGetY","EcMul","EcMulBase","EcMulShort","EcMulVarBase","LessThanLoose","LessThanStrict","MerkleRoot","Noop","Opcode","PoseidonHash","RangeCheck","WitnessBase","arg_types","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","from","from_name","from_repr","init","into","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","KEYWORDS","NOPE_NS","Parser","VALID_ECFIXEDPOINT","VALID_ECFIXEDPOINTBASE","VALID_ECFIXEDPOINTSHORT","borrow","borrow_mut","check_section_structure","deref","deref_mut","deserialize","drop","error","from","init","into","new","parse","parse_ast_circuit","parse_ast_constants","parse_ast_contract","parse_function_call","pointer_metadata","tokens","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Base","BaseArray","Dummy","Dummy","EcFixedPoint","EcFixedPointBase","EcFixedPointShort","EcNiPoint","EcPoint","Lit","LitType","MerklePath","Scalar","ScalarArray","StackType","Uint32","Uint64","Uint64","Var","VarType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_repr","from_repr","from_repr","init","init","init","into","into","into","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","to_vartype","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip"],"q":["darkfi","","","","","","","","","","","","","","","","","","","","","","","darkfi::blockchain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::blockchain::block_store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::blockchain::contract_store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::blockchain::slot_checkpoint_store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::blockchain::tx_store","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::clock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::clock::Ticks","","","","","","darkfi::consensus::constantsdarkfi::consensus::lead_coin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::lead_info","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::proto::protocol_proposal","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::proto::protocol_sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::proto::protocol_sync_consensus","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::proto::protocol_tx","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::rcpt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::statedarkfi::consensus::stx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::task","","","","","","darkfi::consensus::task::block_sync","darkfi::consensus::task::consensus_sync","darkfi::consensus::task::proposal","","","","darkfi::consensus::tx","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::utils","","","darkfi::consensus::validator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::consensus::wallet","","","","darkfi::dht","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::dht::messages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::dht::protocol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::errordarkfi::error::ClientFailed","","","","","","darkfi::error::Error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::error::VerifyFailed","","","","","","","","","darkfi::net","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::acceptor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::connector","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::constants","","","darkfi::net::hosts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::messagedarkfi::net::message_subscriber","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::p2p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::protocol","","","","","","","","","","","","","","","","","darkfi::net::protocol::protocol_address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::protocol::protocol_base","","","","darkfi::net::protocol::protocol_jobs_manager","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::protocol::protocol_ping","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::protocol::protocol_registry","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::protocol::protocol_seed","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::protocol::protocol_version","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::session","","","","","","","","","","","","","","","","","","","","","","darkfi::net::session::inbound_session","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::session::manual_session","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::session::outbound_session","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::session::seedsync_session","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::transport","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::transport::TransportName","","","darkfi::net::transport::tcp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::transport::tor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::transport::unix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::net::transport::upgrade_tls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::raft","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::raft::consensus","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::raft::datastore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::raft::primitivesdarkfi::raft::protocol_raft","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::raft::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::rpc","","","","","darkfi::rpc::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::rpc::clock_sync","","","","","","","darkfi::rpc::jsonrpcdarkfi::rpc::jsonrpc::ErrorCode","darkfi::rpc::jsonrpc::JsonResult","","","","darkfi::rpc::server","","","","","darkfi::rpc::websockets","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::rpc::websockets::WsStream","","darkfi::runtime","","","darkfi::runtime::import","","","darkfi::runtime::import::db","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::runtime::import::merkle","","darkfi::runtime::import::util","","","","","darkfi::runtime::memory","","darkfi::runtime::vm_runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::system","","","","","","","","","darkfi::system::stoppable_task","","","","","","","","","","","","","","","","","","","","","","","","darkfi::system::subscriber","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::system::types","darkfi::tx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::util","","","","","","","","darkfi::util::async_util","","darkfi::util::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::util::encoding","darkfi::util::encoding::base32","","","","darkfi::util::file","","","","darkfi::util::net_name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::util::parse","","","","","darkfi::util::path","","","","","","","","darkfi::util::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::wallet","","","darkfi::wallet::walletdb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk","","","","","","","","","","","","darkfi::zk::gadget","","","","","darkfi::zk::gadget::arithmetic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk::gadget::is_zero","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk::gadget::less_than","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk::gadget::native_range_check","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk::gadget::small_range_check","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk::halodarkfi::zk::halo2::Assigned","","","darkfi::zk::halo2::plonkdarkfi::zk::halo2::plonk::Assigned","","","darkfi::zk::halo2::plonk::Error","","","darkfi::zk::halo2::plonk::Expression","","","","","","","","","","","","","","","","","","darkfi::zk::proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk::vm_stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zk::vm_stack::Literal","darkfi::zk::vm_stack::StackVar","","","","","","","","","","darkfi::zk::vm_stack::Witness","","","","","","","","darkfi::zkas","","","","","","","","","","","","","","","","","darkfi::zkas::analyzer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zkas::astdarkfi::zkas::ast::Arg","","","darkfi::zkas::ast::Var","","","darkfi::zkas::compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zkas::decoder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zkas::error","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zkas::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zkas::opcode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zkas::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi::zkas::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","This macro is used for a standard way of daemonizing …","","","","","","","","","","","","","","","<code>src/zkas</code> is the library holding the zkas toolchain, …","","","Structure holding all sled trees that define the concept …","","","","","","Insert a given slice of <code>BlockInfo</code> into the blockchain …","Insert a given slice of <code>SlotCheckpoint</code> into the blockchain …","","Blocks sled tree","","","","","","Contract states","","","","","Returns the argument unchanged.","Retrieve n blocks after given start slot.","Retrieve <code>BlockInfo</code>s by given hashes. Fails if any of them …","Retrieve <code>BlockInfo</code>s by given slots. Does not fail if any …","Retrieve last finalized block leader proof hash.","","Retrieve n checkpoints after given start slot.","Retrieve <code>SlotCheckpoint</code>s by given slots. Does not fail if …","Check if the given <code>BlockInfo</code> is in the database and all …","Check if block order for the given slot is in the database.","Check if the given <code>SlotCheckpoint</code> is in the database and …","Headers sled tree","","Calls <code>U::from(self)</code>.","","Retrieve the last block slot and hash.","Retrieve the last slot checkpoint.","Retrieve stored blocks count","Instantiate a new <code>Blockchain</code> with the given <code>sled</code> database.","Block order sled tree","","Main pointer to the sled db connection","","Slot checkpoints sled tree","","Transactions sled tree","","","","","","","","","Wasm bincodes","","","","The <code>BlockOrderStore</code> is a <code>sled</code> tree storing the order of the","The <code>BlockStore</code> is a <code>sled</code> tree storing all the blockchain’…","The <code>HeaderStore</code> is a <code>sled</code> tree storing all the blockchain…","","","","","","","","","","","","","","","","Check if the headerstore contains a given headerhash.","Check if the blockstore contains a given blockhash.","Check if the blockorderstore contains a given slot.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Fetch given headerhashes from the headerstore. The …","Fetch given blockhashhashes from the blockstore. The …","Fetch given slots from the blockorderstore. The resulting …","Fetch n hashes after given slot. In the iteration, if a …","Retrieve all headers from the headerstore in the form of a …","Retrieve all blocks from the blockstore in the form of a …","Retrieve all slots from the blockorderstore in the form of …","Fetch the last blockhash in the tree, based on the <code>Ord</code> …","","","","Insert a slice of <code>Header</code> into the blockstore. With sled, …","Insert a slice of <code>Block</code> into the store. With sled, the …","Insert a slice of slots and blockhashes into the store. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Retrieve records count","Opens a new or existing <code>HeaderStore</code> on the given sled …","Opens a new or existing <code>BlockStore</code> on the given sled …","Opens a new or existing <code>BlockOrderStore</code> on the given sled …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>ContractStateStore</code> is a <code>sled</code> tree that stores pointers …","","","The <code>WasmStore</code> is a <code>sled</code> tree that stores the wasm bincode …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Fetches the bincode for a given ContractId Returns an …","","Try to initialize a new contract state. Contracts can …","","Inserts or replaces the bincode for a given ContractId","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Do a lookup of an existing contract state. In order to …","Opens or creates a <code>WasmStore</code>. This tree holds the wasm …","Opens or creates a <code>ContractStateStore</code>. This main tree …","","","Attempt to remove an existing contract state. In order to …","","","","","","","","","","","","","","","","","","","The <code>SlotCheckpointStore</code> is a <code>sled</code> tree storing the …","","","","","Check if the slotcheckpointstore contains a given slot.","","","","","Returns the argument unchanged.","Fetch given slots from the slotcheckpointstore. The …","Fetch n slot checkpoints after given slot. In the …","Retrieve all slot checkpointss from the …","Fetch the last slot checkpoint in the tree, based on the …","","Insert a slice of <code>SlotCheckpoint</code> into the …","Calls <code>U::from(self)</code>.","","Retrieve records count","Opens a new or existing <code>SlotCheckpointStore</code> on the given …","","","","","","","","","","","","The <code>TxStore</code> is a <code>sled</code> tree storing all the blockchain’s …","","","","","Check if the txstore contains a given transaction hash.","","","","","Returns the argument unchanged.","Fetch given tx hashes from the txstore. The resulting …","Retrieve all transactions from the txstore in the form of …","","Insert a slice of <code>Transaction</code> into the txstore. With sled, …","Calls <code>U::from(self)</code>.","Opens a new or existing <code>TxStore</code> on the given sled database.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block definition","Lamport clock","Constants","Consensus participation coin functions and definitions","Consensus block leader information","P2P net protocols","encrypted receipient coin info","Consensus state","transfered tx proof with public inputs.","async tasks to utilize the protocols","transfer transaction","Utility types Type aliases used in the consensus codebase.","Utility functions","Consensus validator state","Wallet functions","This struct represents a tuple of the form (<code>magic</code>, <code>header</code>, …","Structure representing full block data.","Auxiliary structure used for blockchain syncing.","This struct represents a block proposal, used for …","Auxiliary structure used for blockchain syncing","This struct represents a tuple of the form (version, …","Block headerhash of that slot","Block data","Calculate the block hash","Calculate the block hash","Response blocks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Epoch","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Generate the genesis block.","Generate the genesis block.","Block hash","Block header","Block header data","Block header hash","Calculate the header hash","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lead Info","Lead Info,","Block magic bytes","BlockInfo magic bytes","","","","","","","","","","","","","","","","Previous block hash","Root of the transaction hashes merkle tree","Slot UID","Slot UID","Block creation timestamp","","","","","","","","","","","","","","","","","","","Trasaction hashes","Transactions payload","","","","","","","","","","","","","","","","","","","","","","","","","Block version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","returns absolute zero based epoch index.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","returns absolute zero based slot index","returns relative zero based slot index","","","return absolute tick to genesis, and relative tick index …","return true if the clock is at the begining (before 2/3 of …","return the ticks phase with corresponding phase parameters","","returns time since genesis in seconds.","","","","","","","","","","","","","","","","","","","","","Block info magic bytes","Block magic bytes","Block version number","Number of slots in one epoch","Finalization sync period duration (should be &gt;=2/3 of slot …","","","","","","","","","","","","","","","","Leader proofs k for zk proof rows (rows=2^k)","","","Bootstrap timestamp for the mainnet chain","Genesis hash for the mainnet chain","Genesis timestamp for the mainnet chain","Total sum of initial staking coins for the mainnet chain","","","","","","","","","","","","","","","","","Block leader reward","Slot time in seconds","Max resync retries","Max resync retries duration in epochs","Bootstrap timestamp for the testnet chain","Genesis hash for the testnet chain","Genesis timestamp for the testnet chain","Total sum of initial staking coins for the testnet chain","Transactions included in a block capeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codetructure representing the consensus leader coin","This struct holds the secrets for creating LeadCoins …","","","","","","","","","","","","","","","","coin1 commitment blinding factor","Commitment for coin1","Merkle path to the coin1’s commitment","Coin commitment position","Merkle root of coin1 commitment","coin1 sk","Merkle path to the secret key of <code>coin1</code>","coin1 sk position in merkle tree","Merkle root of the <code>coin1</code> secret key","","Try to create a ZK proof of consensus leadership","","","","","","the new coin to be minted after the current coin is spent …","calculated derived coin commitment","calculate derived coin nonce: hash of root coin secret key …","","","","","Derive election seeds from given parameters","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate epoch coins secret keys. First clot coin secret …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new <code>LeadCoin</code> object using given parameters.","Coin nonce","calculate coin public key: hash of root coin secret key …","","","Create a vector of <code>pallas::Base</code> elements from the <code>LeadCoin</code> …","","Coin creation slot.","","","","","","","","","","","","","","","","","Coin’s stake value","","","This struct represents <code>Block</code> leader information used by …","Wrapper over the Proof, for future additions.","","","","","","","","","Leader coin creation eta","Leader coin creation slot","","","Default LeadInfo used in genesis block generation","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Block producer leaders count","","","","Leader NIZK proof","Leadership proof","Block producer slot competing coins public inputs","Block producer public_key","Block producer signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block proposal protocol","Validator + Replicator blockchain sync protocol","Validator consensus sync protocol","Transaction broadcast protocol","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","transfered lead coin is rcpt into two coins, first coin is …","","","","","","","","","","","","","","","","","","","","","","","encrypt received coin, by recipient public key","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","rcpt coin commitment opening","","","rcpt coin nonce","","","","","","","","","","","","","","","rcpt coin value","","","Auxiliary structure used for consensus syncing.","Auxiliary structure used for consensus syncing.","Auxiliary structure used for consensus syncing.","Auxiliary structure used for consensus syncing.","This struct represents the information required by the …","This struct represents a sequence of consensus state …","Auxiliary structure used for forks syncing","Auxiliary structure used to keep track of slot validation …","Auxiliary structure used for slot checkpoints syncing","Auxiliary structure used for slot checkpoints syncing","Auxiliary structure used to keep track of consensus state …","Auxiliary structure used for forked consensus state …","Insertion of a valid state checkpoint.","Canonical (finalized) blockchain","Slot the network was bootstrapped","Slot the network was bootstrapped","Node known bootstrap slot","Network bootstrap timestamp","","","","","","","","","","","","","","","","","","","","","","","","","","A fork chain is considered valid when every state …","A state checkpoint is considered valid when its proposal …","Last slot node check for finalization","","","","","","","","","","","","","","","","","","","","","Canonical competing coins","Node competing coins current state","Canonical coin commitments tree","Coin commitments tree current state","Generate coins for provided sigmas. NOTE: The strategy …","Calculates current epoch.","Calculates current slot, based on elapsed time from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Current epoch","Check if new epoch has started and generate slot …","Current epoch eta","controller proportional error history","Slot eta","Calculate how many leaders existed in previous slot and …","","controller output history","Given a proposal, find the index of the fork chain it …","","","","","","","","","","","","Fork chains containing block proposals","Hot/live data used by the consensus algorithm","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Generate current slot checkpoint","Genesis block hash","","","Generate the genesis slot checkpoint.","Genesis block creation timestamp","Utility function to extract leader selection lottery …","Auxillary function to retrieve slot checkpoint of provided …","","","","","","","","","","","","","","Total sum of initial staking coins","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Node has hot/live slot checkpoints","Check that the participant/stakeholder coins win the slot …","Finds the last slot a proposal or block was generated.","Leaders count history","Leaders count history","Finds the longest forkchain the node holds and returns its …","Finds the length of longest fork chain the node holds.","","","","","","","","","","","","Calculates seconds until next Nth epoch starting time.","Calculates seconds until next Nth slot starting time. …","Canonical seen nullifiers from proposals","Seen nullifiers from proposals","Seen nullifiers from proposals current state","Seen nullifiers from proposals current state","Participating start slot","","","","","","","","","","","","","Block proposal","Block proposal","Search the chains we’re holding for the given proposal.","Node is able to propose proposals","Calculates the relative number of the provided slot.","Auxiliary structure to reset consensus state for a resync","Leadership reward, assuming constant reward TODO (res) …","","","Auxillary function to set nodes leaders count history to …","Set participating slot to next.","Slot sigma1","Slot sigma2","Return 2-term target approximation sigma coefficients.","Flag to enable single-node mode","Slot UID","Slot UID","Hot/live slot checkpoints","Hot/live slot checkpoints","Response blocks.","Auxillary function to check if node has seen current or …","Calculates the epoch of the provided slot. Epoch duration …","Auxillary function to calculate total slot rewards.","Calculate slots until next Nth epoch. Epoch duration is …","","","","","","","","","","","Network total stake, assuming constant reward. Only used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pending transactions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Auxillary function to update all fork state checkpoints to …","","","","","","","","","","","","","the probability inverse of winnig lottery having all the …","","","","coin3_commitment in zk","","","sender’s coin, or coin1_commitment in zk","sender’s coin pk","sender’s coin sk’s root","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","nullifiers coin1_nullifier","","transfer proof","arrange public inputs from Stxfer","root to coin’s commitments","sk coin creation slot","","coin4_commitment in zk","","","","","","","verify the transfer proof.","","","async task used for block syncing.","","async task used for consensus state syncing. Returns flag …","","async task used for participating in the consensus protocol","async task used for block syncing.","async task used for consensus state syncing. Returns flag …","Consensus protocol loop","async function to wait and execute consensus protocol …","async task used for participating in the consensus protocol","async function to wait and execute consensus protocol …","transfer transaction","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","note! only support positive conversion, and zero. used for …","note! nagative values in pallas field won’t wraps, and …","","This struct represents the state of a validator node.","Atomic pointer to validator state.","","The node retrieves a transaction, validates its state …","Canonical (finalized) blockchain","","","Node checks if any of the fork chains can be finalized. …","Hot/Live data used by the consensus algorithm","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Leader proof proving key","Leader proof verifying key","","","Generate a block proposal for the current slot, containing …","Validate and append to canonical state received blocks.","Validate and append to canonical state received finalized …","Validate and append to canonical state received finalized …","Given a proposal, the node verify its sender (slot leader) …","Append to canonical state received finalized slot …","Validate and append to canonical state received finalized …","Remove provided transactions vector from unconfirmed_txs …","Flag to enable single-node mode","A map of various subscribers exporting live info from the …","","","","Pending transactions","Retrieve all unconfirmed transactions not proposed in …","","","","Validate signatures, wasm execution, and zk proofs for …","ZK proof verifying keys for smart contract calls","","Wallet interface","","","","","Struct representing DHT state.","Atomic pointer to DHT state","","","","Verify if provided key exists and return flag if local or …","","","","","Returns the argument unchanged.","Get key from local map, acting as daemon cache","Daemon id","","Store provided key value pair, update lookup map and …","Calls <code>U::from(self)</code>.","Network lookup map, containing nodes that holds each key","Store provided key node pair in lookup map and update …","Remove provided node id from keys set in local lookup map","Daemon hasmap","","","P2P network pointer","Channel to receive responses from P2P","","","","Remove provided key value pair and update lookup map","Generate key request and broadcast it to the network","Daemon seen requests/responses ids and timestamp, to …","Stop signal channel to terminate background processes","Auxilary function to sync lookup map with network","","","","","","","","","This struct represents a DHT key request","This struct represents a DHT key request response","Auxiliary structure used for lookup map syncing.","Auxiliary structure used for consensus syncing.","This struct represents a lookup map request","","","","","","","","","","","","","","","","","","","Daemon id executing the request","Daemon id executing the request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Daemon id requesting the key","Daemon id holding the key","Request id    ","Response id","Request id    ","Request id","Request id","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Key entry","Key entry","Key entry","Daemon lookup map, containing nodes that holds each key","","","","","","","","","","","","","","","","Request type","Daemon id holding the key","Daemon id holding the key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Key value","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Client module errors","","Result type used in the Client module","","","","","","","","","","","","","","","","","General library errors used throughout the codebase.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Main result type used throughout the codebase.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transaction verification errors","","Result type used in transaction verifications","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Acceptor class handles the acceptance of inbound socket …","Async channel that handles the sending of messages across …","Handles the creation of outbound connections. Used to …","Network constants for various validations.","Hosts are a list of network addresses used when …","Defines how to decode generic messages as well as …","Generic publish/subscribe class that can dispatch any kind …","P2P provides all core functionality to interact with the …","Defines the networking protocol used at each stage in a …","Defines the interaction between nodes during a connection. …","Network configuration settings.","Network transport implementations.","Create inbound socket connections.","Atomic pointer to Acceptor class.","Run the accept loop in a new thread and error if a …","","","","","","","","Returns the argument unchanged.","Handles network errors. Panics if error passes silently, …","","Calls <code>U::from(self)</code>.","Create new Acceptor object.","","Run the accept loop.","","Start accepting inbound socket connections. Creates a …","Stop accepting inbound socket connections.","Start receiving network messages.","","","","","","","","","Async channel for communication between nodes.","","Atomic pointer to async channel.","Return the local socket address.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Convenience function that returns the Message Subsystem.","Handle network errors. Panic if error passes silently, …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","End of file error. Triggered when unexpected end of file …","","","","Run the receive loop. Start receiving messages or handle …","","","Sets up a new channel. Creates a reader and writer TCP …","","","","","","","","Sends a message across a channel. Calls function ‘…","Implements send message functionality. Creates a new …","","","","","Perform network handshake for message subsystem …","Starts the channel. Runs a receive loop to start receiving …","Stops the channel. Steps through each component of the …","","","Subscribe to a messages on the message subsystem.","Creates a subscription to a stopped signal. If the channel …","","","","","","","","","","","","","","","","Create outbound socket connections.","","","Establish an outbound connection.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new connector with default network settings.","","","","","","","","","","","Illegal IPv4 addresses","Illegal IPv6 addresses","Localnet addresses","Manages a store of network addresses.","Pointer to hosts class.","","","","","","","","Auxiliary function to filter invalid(unresolvable) hosts.","Auxiliary function to filter localnet hosts.","Filters <code>input_addrs</code> keys to whatever has at least one …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Check if the host list is empty.","Validate a given .onion address. Currently it just checks …","Return the list of hosts.","","Create a new host list.","","Remove an Url from the list","Add a new host to the host list, after filtering.","Add a new hosts external adders to the host list, after …","","","","","","","","Sends address information to inbound connection. Response …","Sends external address information to inbound connection.","Requests address of outbound connection.","","Generic message template.","Packets are the base type read from the network. Converted …","Outbound keep-alive message.","Inbound keep-alive message.","Sends version information to inbound connection. Response …","Requests version information of outbound connection.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Reads and decodes an inbound payload.","Sends an outbound packet by writing data to TCP stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A dispatchers that is unique to every Message. Maintains a …","Generic interface for message dispatcher.","","Handles message subscriptions through a subscription ID …","64bit identifier for message subscription.","Generic publish/subscribe class that maintains a list of …","Private function to transmit a message to all subscriber …","Add a new dispatcher for specified Message.","","Converts to Any trait. Enables the dynamic modification of …","","","","","","","Remove inactive channels.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new message dispatcher.","Create a new message subsystem.","Transmits a payload to a dispatcher. Returns an error if …","","","","","Create a random ID.","Start receiving messages.","","","Subscribe to a channel. Assigns a new ID and adds it to …","Subscribes to a Message. Using the Message name, the …","","Internal function to deserialize data into a message type …","","Interal function that sends a Error message to all …","Transmits an error message across dispatchers.","","","","","","","","","","Unsubscribe from a message subscription. Must be called …","Unsubcribe from a channel. Removes the associated ID from …","","","","","","","","","","","","","List of connected channels.","","Top level peer-to-peer networking interface.","Atomic pointer to p2p interface.","","List of channels that are awaiting connection.","","","","Add a channel to the list of pending channels.","","","","","Broadcasts a message concurrently across all channels.","Broadcasts a message concurrently across all channels. …","","Retrieve channels","","Return the number of connected channels.","","","","","","","Flag to check if on discovery mode","","","Check whether a channel is stored in the list of connected …","","Returns the argument unchanged.","Returns the argument unchanged.","","Return an atomic pointer to the list of hosts.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize a new p2p network.","","","","","","","Retrieves a random connected channel, exluding seeds","Remove a channel from the list of connected channels.","Remove a channel from the list of pending channels.","Runs the network. Starts inbound, outbound and manual …","","","","","","","Return an atomic pointer to the default network settings.","","Invoke startup and seeding sequence. Call from …","Try to start discovery mode. Returns false if already on …","","","Stops discovery mode.","","Add channel address to the list of connected channels.","Subscribe to a channel.","Subscribe to a stop signal.","","","","","","","","","","","","","","","","Wait for outbound connections to be established.","","","","","","","","","","Protocol for address and get-address messages. Implements …","","Manages the tasks for the network protocol. Used by other …","Protocol for ping-pong keep-alive messages. Implements …","","Seed server protocol. Seed server is used when connecting …","Protocol for version information handshake between nodes …","","Defines address and get-address messages.","","","","","","","","","","","Returns the argument unchanged.","","Handles receiving the address message. Loops to …","Handles receiving the external address message. Loops to …","Handles receiving the get-address message. Continually …","","","Create a new address protocol. Makes an address, an …","Calls <code>U::from(self)</code>.","","","","","","Starts the address protocol. Runs receive address and get …","","","","","","","","","","","","Manages the tasks for the network protocol. Used by other …","Pointer to protocol jobs manager.","","","","Closes all open tasks. Takes all the tasks from the …","","","","","Returns the argument unchanged.","Waits for a stop signal, then closes all tasks. Insures …","","Calls <code>U::from(self)</code>.","","Create a new protocol jobs manager.","","Spawns a new task and adds it to the internal queue.","Runs the task on an executor. Prepares to stop all tasks …","","","","","","","","","Defines ping and pong messages.","","","","","","","","Returns the argument unchanged.","","Create a new ping-pong protocol.","Calls <code>U::from(self)</code>.","","","","","","","Waits for ping, then replies with pong. Copies ping’s …","Runs ping-pong protocol. Creates a subscription to pong, …","","Starts ping-pong keep-alive messages exchange. Runs …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Implements the seed protocol.","","","","","","","","","Returns the argument unchanged.","","","Create a new seed protocol.","Calls <code>U::from(self)</code>.","","","Sends own external addresses over a channel. Imports own …","","Starts the seed protocol. Creates a subscription to the …","","","","","","","","Implements the protocol version handshake sent out by …","","","","","","","","Send and recieve version information.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Create a new version protocol. Makes a version and version …","","Recieve version info, check the message is okay and send …","Start version information exchange. Start the timer. Send …","Send version info and wait for version acknowledgement and …","","","","","","","","","","","","","","","","","","","","Session trait. Defines methods that are used across …","","","","Inbound connections session. Manages the creation of …","","Outbound connections session. Manages the creation of …","Returns a pointer to the p2p network interface.","Performs network handshake to initialize channel. Adds the …","Registers a new channel with the session. Performs a …","Removes channel from the list of connected channels when a …","Seed sync session creates a connection to the seed nodes …","","","Defines inbound connections session.","","","","","","","","Wait for all new channels created by the acceptor and call …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new inbound session.","","","","","Registers the channel. First performs a network handshake …","Starts the inbound session. Begins by accepting …","Start accepting connections for inbound session.","Stops the inbound session.","","","","","","","","","","","","","","","","","","","","Subscriber used to signal channels processing","","","","","","Disable channel_subscriber notifications.","","Enable channel_subscriber notifications.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Create a new inbound session.","Flag to toggle channel_subscriber notifications","","","","Stop the outbound session.","Subscribe to a channel.","","","","","","","","","","","","Defines outbound connections session.","","","","","","","","","","","Creates a connector object and tries to connect using it.","Subscriber used to signal channels processing","","","","","","","","","","","","","","","","Disable channel_subscriber notifications.","","","","Enable channel_subscriber notifications.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loops through host addresses to find a outbound address …","Create a new outbound session.","Flag to toggle channel_subscriber notifications","","","Try to find new peers to update available hosts.","","","","","Start the outbound session. Runs the channel connect loop.","","Stop the outbound session.","Subscribe to a channel.","","","","Start making an outbound connection, using provided …","","","","","","","","","","","","","","","","","","","","","","","Defines seed connections session.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Create a new seed sync session instance.","","","","Start the seed sync session. Creates a new task for every …","Connects to a seed socket address.","","","","","","","","","Default settings for the network. Can be manually …","Defines the network settings.","Atomic pointer to network settings.","Application version, used for verification between peers","Application version, used for verification between peers","","","","","Exchange versions (handshake) timeout","Exchange versions (handshake) timeout","Ping-pong exhange execution interval","Ping-pong exhange execution interval","Enable channel logging","Enable channel logging","","","","","","Connection establishment timeout","Connection establishment timeout","","","Auxiliary function to set serde bool value to true.","","","","","","","","","","P2P external addresses node advertises so other peers can …","P2P external addresses node advertises so other peers can …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Auxiliary function to convert outbound transport …","P2P accept addresses node listens to for inbound …","P2P accept addresses node listens to for inbound …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Allow localnet hosts","Allow localnet hosts","Manual connections retry limit, 0 for forever looping","Manual connections retry limit","","Only used for debugging. Compromises privacy when set.","Only used for debugging. Compromises privacy when set.","Outbound connection slots number","Outbound connection slots number","Try to fill an outbound slot interval","Try to fill an outbound slot interval","Prefered transports for outbound connections","Prefered transports for outbound connections","Enable peer discovery","Enable peer discovery","Peer nodes to manually connect to","Peer nodes to manually connect to","","","Seed connection establishment timeout","Seed connection establishment timeout","Seed nodes to connect to for peers retrieval and/or …","Seed nodes to connect to for peers retrieval and/or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implements communication through the tor proxy service.","The <code>Transport</code> trait serves as a base for implementing …","Used as wrapper for listener used by Transport trait","","Used as wrapper for stream used by Transport trait","","","Size of the listen backlog for listen sockets","","","TLS client configuration","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","TLS server configuration","A helper function to convert SocketAddr to Url and add …","","","","","","","","","","","TTL to set for opened sockets, or <code>None</code> for default","","","","","","","","","","","","","","Size of the listen backlog for listen sockets","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","TTL to set for opened sockets, or <code>None</code> for default","","","","","","","","Represents information needed to communicate with the Tor …","Implements communication through the tor proxy service.","","","","","","","","","","Creates an ephemeral hidden service pointing to local …","Creates an ephemeral hidden service pointing to local …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Query the environment for the dialer Tor variables, or …","Query the environment for listener Tor variables, or …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new TorTransport","Creates a new TorTransport","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","TLS client configuration","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","TLS server configuration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Return the raft node id","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Return async receiver channel which can be used to receive …","","","Run raft consensus and wait stop_signal channel to …","","","","","","","Return async sender channel which can be used to broadcast …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","Starts ping-pong keep-alive messages exchange. Runs …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Client-side JSON-RPC implementation JSON-RPC client-side …","Clock sync utility module Clock sync module","JSON-RPC primitives JSON-RPC 2.0 primitives","Server-side JSON-RPC implementation JSON-RPC server-side …","Websockets client","JSON-RPC client implementation using asynchronous channels.","","","Close the channels of an instantiated <code>RpcClient</code>.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Instantiate a new JSON-RPC client that will connect to the …","Oneshot send a given JSON-RPC request over the …","Instantiate channels for a new <code>RpcClient</code>.","","","Internal function that loops on a given stream and …","Send a given JSON-RPC request over the instantiated client.","","","Listen instantiated client for notifications. NOTE: …","","","","","","","","","","TODO: Loop through set of ntps, get their average response …","Clock sync parameters","This is a very simple check to verify that the system time …","","Raw NTP request execution","JSON-RPC request to a network peer (randomly selected), to …","","JSON-RPC error codes. The error codes from and including …","","","","","A JSON-RPC error object.","A JSON-RPC error value (code and message)","A JSON-RPC notification object.","A JSON-RPC request object.","A JSON-RPC response object.","Wrapping enum around the possible JSON-RPC object types.","A JSON-RPC subscriber for notifications","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error code","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","JSON-RPC error (code and message)","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Request ID","Request ID","Request ID","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","JSON-RPC version","JSON-RPC version","JSON-RPC version","JSON-RPC version","JSON-RPC version","Error message","Request method","Notification method","","","","","","Request parameters","Notification parameters","","","","","","","","","Response result","","","","","","","","Notification subscriber","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Asynchronous trait implementing a handler for incoming …","Internal accept function that runs inside a loop for …","","Start a JSON-RPC server bound to the given accept URL and …","Wrapper function around <code>accept()</code> to take the incoming …","","","","","","Connects to a WebSocket address (optionally secured by …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Imported host functions","VM memory access (read/write)","Main wasm vm runtime implementation","Host functions for interacting with db backend","Host functions for merkle tree functions","Host functions for utilities","Internal wasm runtime API for sled trees","","","","","","Everyone can call this. Will check if a given db contains …","Only update() can call this. Remove a key from the …","Everyone can call this. Will read a key from the key-value …","Only deploy() can call this. Creates a new database …","Everyone can call this. Lookups up a database handle from …","Only update() can call this. Set a value within the …","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Host function for logging strings. This is injected into …","","","","","","","","Setup function of a contract","The wasm vm runtime instantiated for every smart contract …","Entrypoint function of a contract","Gas limit for a contract","Name of the wasm linear memory in our guest module","Metadata","Placeholder state before any initialization","","Apply function of a contract","This function runs after successful execution of <code>exec</code> and …","Blockchain access","","","","","","","","","","The compiled wasm bincode being executed,","The contract ID being executed","State update produced by a smart contract function call","The contract section being executed","Copy payload to the start of the memory","","sled tree batches, indexed the same as <code>db_handles</code>.","sled tree handles used with <code>db_*</code>","This function runs when a smart contract is initially …","","","","","","","","","","","","","This funcion runs when someone wants to execute a smart …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Logs produced by the contract","Get memory, that needs to have been set fist","Direct memory access to the VM","Provide safe access to the memory (it must be initialized …","","","Create a new wasm runtime instance that contains the given …","Object store for transferring memory from the host to VM","","","","","Serialize contract payload to the format accepted by the …","Set the memory page size","","Take Memory by value. Needed to modify the Memory object …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Transaction contains an arbitrary number of <code>ContractCall</code> …","","","","Calls executed in this transaction","","","Create Schnorr signatures for the entire transaction.","","","","","","","Encode the object into a byte vector for signing","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Attached ZK proofs","Attached Schnorr signatures","","","","","","","","Verify Schnorr signatures for the entire transaction.","Verify ZK proofs for the entire transaction.","","","async utility functions","Command-line interface utilities","Various encoding formats","Filesystem utilities","Network differentiations (TODO: shouldn’t be here in …","Parsing helpers","Filesystem path utilities","Time utilities","Sleep for any number of milliseconds.","Sleep for any number of seconds.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Base32 encoding and decoding Base32 encoding as specified …","Standard Base32 alphabet.","","Tries to decode a base32 string into a byte vector. …","Encode a byte slice with the given base32 alphabet into a …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns <code>$XDG_CONFIG_HOME</code>, <code>$HOME/.config</code>, or <code>None</code>.","","","Returns the path to the user’s home directory. Use <code>$HOME</code>…","Get the home directory from the passwd entry of the …","","Join a path with <code>config_dir()/darkfi</code>.","","","","","","","","","","Wrapper struct to represent <code>chrono</code> UTC timestamps.","Increment a ‘Timestamp’.","","","","","","","","","","","Generate a <code>Timestamp</code> of the current time.","","","","","","","","","","","","","","","","","","Calculates elapsed time of a <code>Timestamp</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Main wallet primitives, extendable by traits.","Blob gets decoded into <code>Vec&lt;u8&gt;</code>","Integer gets decoded into <code>u64</code>","Last type, increment this when you add new types.","OptionBlob gets decoded into <code>Option&lt;Vec&lt;u8&gt;&gt;</code>","OptionInteger gets decoded into <code>Option&lt;u64&gt;</code>","Types we want to allow to query from the SQL wallet","Structure representing base wallet operations. Additional …","","","","","","","","","","","","","","","This function executes a given SQL query, but isn’t able …","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Helper function to initialize <code>WalletPtr</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","ZK gadget implementations","","Proof creation API","Halo2 zkas virtual machine","VM stack type abstractions","Base field arithmetic gadget","is_zero comparison gadget","Field-native less than comparison gadget with a lookup …","Field-native range check gadget with a lookup table","Small range check, 0..8 bits","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>k_values_table</code> should be reused across different chips …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Checks that an expression is in the small range [0..range),","","","","","","","","","","","","","","","","","","","","An advice column","A value assigned to a cell within a circuit.","An assigned cell.","A column with an index and type","This trait represents an element of a field.","A layout strategy within a circuit. The layouter is …","A value stored as a fraction to enable batch inversion.","Represents the type of the “root” of this layouter, so …","A value that does not require inversion to evaluate.","A value that might exist within a circuit.","The field element zero.","","","","","","","","","","","","","","","","","","","","Returns <code>Value::unknown()</code> if the value is <code>Value::unknown()</code>, …","Converts from <code>&amp;mut Value&lt;V&gt;</code> to <code>Value&lt;&amp;mut V&gt;</code>.","Converts from <code>&amp;Value&lt;V&gt;</code> to <code>Value&lt;&amp;V&gt;</code>.","Enforces an assertion on the contained value, if known.","Assign a region of gates to an absolute row number.","Assign a table region to an absolute row number.","","","","","","","","","","","","Returns the cell.","","","","","","","","","","","","Maps a <code>Value&lt;&amp;V&gt;</code> to a <code>Value&lt;V&gt;</code> by cloning the contents of …","Maps a <code>Value&lt;&amp;mut V&gt;</code> to a <code>Value&lt;V&gt;</code> by cloning the contents …","","Type of this column.","","Constrains a <code>Cell</code> to equal an instance column’s row …","Maps a <code>Value&lt;&amp;V&gt;</code> to a <code>Value&lt;V&gt;</code> by copying the contents of …","Maps a <code>Value&lt;&amp;mut V&gt;</code> to a <code>Value&lt;V&gt;</code> by copying the contents …","Copies the value to a given advice cell and constrains …","Cubes this element.","Cubes this field element.","Cubes this element.","","Returns the denominator, if non-trivial.","","","","","","","","","","","","","","","","Doubles this element.","Doubles this field element.","Doubles this element.","","","","","","","","","","","","Checks the contained value for an error condition, if …","Evaluates this value directly, performing an unbatched …","Evaluates this assigned cell’s value directly, …","Evaluates this assigned value directly, performing an …","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Takes each element in the <code>Iterator</code>: if it is …","","","Gets the “root” of this assignment, bypassing the …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the field element corresponding to this value.","Computes the multiplicative inverse of this element, …","Inverts this assigned value (taking the inverse of zero to …","Inverts this assigned value (taking the inverse of zero to …","Returns true iff this element is zero.","Returns true iff this element is zero.","Returns true iff this element is zero.","Constructs a known value.","Maps a <code>Value&lt;V&gt;</code> to <code>Value&lt;W&gt;</code> by applying a function to the …","","","","","","","","","","","","","","","","","Enters into a namespace.","","","","Returns the numerator.","Returns the one element of the field, the multiplicative …","","This module provides an implementation of a variant of …","","","","","","Exits out of the existing namespace.","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Creates a new (sub)namespace and enters into it.","Returns an element chosen uniformly at random using a …","Returns the square root of the field element, if it is …","Squares this element.","Squares this field element.","Squares this element.","","","","","","","","","","","","","","","","","","","Returns the field element corresponding to this value.","","","","","","Transposes a <code>Value&lt;[V; LEN]&gt;</code> into a <code>[Value&lt;V&gt;; LEN]</code>.","Transposes a <code>Value&lt;impl IntoIterator&lt;Item = V&gt;&gt;</code> into a …","","","","","","","","","","","","","","","","","","","Constructs an unwitnessed value.","Unzips a value containing a tuple of two values.","","","","","","","","","","","","","","","","","","Returns the value of the <code>AssignedCell</code>.","","","Returns the field element value of the <code>AssignedCell</code>.","","","","","","Returns the zero element of the field, the additive …","Zips <code>self</code> with another <code>Value</code>.","","","","","","An advice column","An Advice variant","This is an advice (witness) column queried at a certain …","An enum over the Advice, Fixed, Instance structs","A value assigned to a cell within a circuit.","This trait allows a <code>Circuit</code> to direct some backend to …","A verifier that checks multiple proofs in a batch. <strong>This </strong>…","Out of bounds index passed to a backend","This is a trait that circuits provide implementations for …","A column with an index and type","The instance sets up a copy constraint involving a column …","A column type","This is a configuration object that stores things like …","This is a constant polynomial","An individual polynomial constraint.","This is a description of the circuit environment, such as …","The constraint system is not satisfied.","A set of polynomial constraints with a common selector.","This is an error that could occur during proving or …","Low-degree expression representing an identity that must …","A fixed column","A Fixed variant","This is a fixed column queried at a certain relative …","A floor planning strategy for a circuit.","The floor planner used for this circuit. This is an …","An instance column","An Instance variant","This is an instance (external) column queried at a certain …","Instance provided exceeds number of available rows","The provided instances do not match the circuit parameters.","This is a negated polynomial","Circuit synthesis requires global constants, but circuit …","<code>k</code> is too small for the given circuit.","Opening error","The output type of this verification strategy after …","Represents the minimal parameters that determine a …","Minimal representation of a verification key that can be …","This is the product of two polynomials","This is a proving key which allows for the creation of …","A value stored as a fraction to enable batch inversion.","This is a scaled polynomial","A selector, representing a fixed boolean value per row of …","This is a virtual selector","A verifier that checks a single proof at a time.","This is the sum of two polynomials","This is an error that can occur during synthesis of the …","A fixed column of a lookup table.","Transcript error","A value that does not require inversion to evaluate.","Trait representing a strategy for verifying Halo 2 proofs.","This is a verifying key which allows for the verification …","Exposes the “virtual cells” that can be queried while …","The field element zero.","","Adds a proof to the batch.","Allocate a new advice column","","","Assign an advice column value (witness)","Assign a fixed value","","Compute the number of blinding factors necessary to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocate a new complex selector that can appear anywhere …","The circuit is given an opportunity to describe the exact …","","","","Assign two cells to have the same value","Creates a new gate.","This creates a proof for the provided <code>circuit</code> when given …","","","","","","Compute the degree of this polynomial","Compute the degree of the constraint system (the maximum …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable this selector at the given offset within the given …","Enables this fixed column to be used for global constant …","Enable the ability to enforce equality over cells in this …","Enables a selector at the given row.","Creates a new region and enters into it.","","","","","","","","","","","Evaluate the polynomial using the provided closures to …","Exits the current region.","Fills a fixed <code>column</code> starting from the given <code>row</code> with …","Finalizes the batch and checks its validity.","Allocate a new fixed column","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Get the underlying <code>EvaluationDomain</code>.","","","","","","Get the underlying <code>VerifyingKey</code>.","","","","","","Hashes a verification key into a transcript.","","","","","","","","","","","","","","","","","","","","Allocate a new instance column","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Is this selector “simple”? Simple selectors can only …","","Generate a <code>ProvingKey</code> from a <code>VerifyingKey</code> and an instance …","Generate a <code>VerifyingKey</code> from an instance of <code>Circuit</code>.","","","","Add a lookup argument for some input expressions and table …","Allocates a new fixed column that can be used in a lookup …","","","","","","Returns the minimum necessary rows that need to exist in …","","","","","","Constructs a new batch verifier.","Constructs a new single proof verifier.","","","","","","","","","","","","","","","","Obtain a pinned version of this constraint system; a …","Obtains a pinned representation of this verification key …","","","","","","","","","","","","","","","","","","","Exits out of the existing namespace.","Obtains an MSM from the verifier strategy and yields back …","","","Creates a new (sub)namespace and enters into it.","","","Query an advice column at a relative position","Query an Any column at a relative position","Query a fixed column at a relative position","Queries the cell of an instance column at a particular …","Query an instance column at a relative position","Query a selector at the current position.","","Allocate a new (simple) selector. Simple selectors cannot …","","This is a cached vector that maps virtual selectors to the …","Sets the minimum degree required by the circuit, which can …","","Square this expression.","","Given the provided <code>cs</code>, synthesize the given circuit.","Given the provided <code>cs</code>, synthesize the circuit. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a boolean indicating whether or not the proof is …","","","","","","","","","","","","","","","","","","","Constructs a set of constraints that are controlled by the …","Returns a copy of this circuit with no witness values …","","","","","","The current value of <code>k</code> being used.","","","","","","","","","","Column index","Column index","Column index","Query index","Query index","Query index","Rotation of this query","Rotation of this query","Rotation of this query","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","These represent the witness types inside the circuit","","","","","","These represent the witness types outside of the circuit","","","","","","","","","","","","","","","","","","","","","","","Helper function for verifiers to generate empty witnesses …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Analyzer module","Language AST","Compiler module","Decoder module","Error emitter","Lexer module","Language opcodes","Parser module","Language types","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Version of the binary","","Magic bytes prepended to the binary","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A ZkBinary decoded from compiled zkas code. This is used …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base field element addition","Base field element multiplication","Base field element subtraction","Check if a field element fits in a boolean (Either 0 or 1)","Constrain equality of two Base field elements inside the …","Constrain equality of two EcPoint elements inside the …","Constrain a Base field element to a circuit’s public …","Debug a variable’s value in the ZK circuit table.","Elliptic curve addition","Get the x coordinate of an elliptic curve point","Get the y coordinate of an elliptic curve point","Elliptic curve multiplication","Elliptic curve multiplication with a Base field element","Elliptic curve multiplication with a Base field element of …","Variable Elliptic curve multiplication with a Base field …","Loosely two Base field elements and see if a is less than b","Strictly compare two Base field elements and see if a is …","Calculate Merkle root, given a position, Merkle path, and …","Intermediate opcode for the compiler, should never appear …","Opcodes supported by the zkas VM","Poseidon hash of N Base field elements","Range check a Base field element, given bit-width (up to …","Witness an unsigned integer into a Base field element","Return a tuple of vectors of types that are accepted by a …","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","zkas language builtin keywords. These can not be used …","Forbidden namespaces","","Valid EcFixedPoint constant names supported by the VM.","Valid EcFixedPointBase constant names supported by the VM.","Valid EcFixedPointShort constant names supported by the VM.","","","Routine checks on section structure","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Base field element","Base field element array","Dummy intermediate type","Dummy intermediate type","Elliptic curve fixed point (a constant)","Elliptic curve fixed point in base field","Elliptic curve fixed point short","Elliptic curve nonidentity point","Elliptic curve point","","Literal types supported by the zkas VM","A Merkle tree path","Scalar field element","Scalar field element array","Stack types in bincode &amp; vm","Unsigned 32-bit integer","Unsigned 64-bit integer","Unsigned 64-bit integer","","Varable types supported by the zkas VM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,19,20,21,0,0,0,0,0,0,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,21,19,20,21,21,19,20,21,19,20,21,19,20,21,21,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,24,25,0,0,0,0,24,25,24,25,24,25,24,25,24,25,24,25,24,25,24,25,24,25,24,24,25,25,24,24,25,25,24,25,24,25,25,24,25,24,25,24,25,24,25,24,25,24,25,24,25,24,25,30,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,34,23,9,33,22,23,37,9,33,34,22,23,37,9,33,34,22,23,9,33,34,22,23,9,33,34,22,23,37,9,33,34,22,9,22,23,37,9,33,34,22,23,37,9,33,34,22,23,37,9,33,34,22,23,37,9,33,34,22,23,37,9,33,34,22,22,34,22,22,23,37,9,33,34,34,22,23,23,37,9,9,33,34,23,22,34,23,9,34,22,22,23,37,9,33,34,22,23,37,9,33,34,23,9,23,9,23,37,9,33,34,22,23,9,34,22,23,37,9,33,34,22,22,22,37,22,22,23,9,33,34,34,22,23,37,9,33,34,22,23,37,9,33,34,23,9,22,23,37,9,33,34,22,23,37,9,33,34,22,23,37,9,33,34,22,23,37,9,33,34,22,22,23,37,9,33,34,0,0,0,46,46,46,46,46,46,0,46,44,46,44,46,44,46,44,46,44,46,44,44,44,44,44,46,44,44,44,44,46,44,46,44,44,44,46,44,44,44,44,44,44,44,44,44,44,44,44,46,44,46,44,46,44,46,44,46,44,46,44,46,44,403,404,405,403,404,405,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,0,0,0,0,0,0,0,0,0,0,0,81,73,81,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,81,73,81,73,73,73,73,81,73,81,73,73,73,73,81,73,81,81,73,81,73,73,81,81,73,73,73,81,73,73,81,73,73,73,81,73,81,73,81,73,81,73,81,73,81,73,73,73,73,81,73,0,0,42,82,42,82,42,82,42,82,42,42,42,82,42,82,42,82,42,82,42,82,42,82,42,82,42,82,42,82,42,82,42,82,82,42,82,42,82,42,42,42,82,42,82,42,42,42,42,82,42,82,42,82,42,82,42,82,42,82,42,82,82,42,82,0,0,0,0,96,96,97,87,98,96,87,98,96,97,87,98,96,87,0,0,0,0,96,97,96,97,96,87,98,96,97,98,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,0,0,0,0,78,99,78,99,99,78,99,78,99,78,99,99,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,78,99,78,78,99,78,99,78,99,78,99,78,99,78,99,78,99,78,78,99,0,0,0,0,0,0,0,0,0,0,0,0,101,110,110,104,105,110,110,103,104,111,105,10,106,107,102,108,101,109,110,103,104,111,105,10,106,107,102,108,101,109,110,101,101,110,103,104,105,10,106,107,102,108,101,109,103,104,105,10,106,107,102,108,101,109,110,102,110,102,110,110,110,103,104,111,105,10,106,107,108,109,110,103,104,111,105,10,106,107,102,108,101,109,110,103,104,111,105,10,106,107,102,108,101,109,110,103,104,111,105,10,106,107,102,108,101,109,110,110,103,104,111,105,10,106,107,102,108,101,109,103,104,111,105,10,106,107,108,109,110,110,110,110,10,110,110,110,110,103,104,111,105,10,106,107,102,108,101,109,110,104,110,103,104,111,105,10,106,107,102,102,108,108,101,101,109,109,110,110,101,109,10,110,110,110,110,103,104,111,105,10,106,107,102,108,101,109,110,110,110,103,104,111,105,10,106,107,102,108,101,109,105,110,110,110,104,110,110,103,104,111,105,10,106,107,110,10,102,101,110,110,110,104,102,108,110,110,103,104,111,105,10,106,107,102,108,101,109,102,108,110,110,110,110,110,101,109,110,110,10,10,110,110,10,106,110,104,107,110,110,110,110,103,104,105,10,106,107,102,108,101,109,110,110,103,104,111,105,10,106,107,102,108,101,109,110,103,104,111,105,10,106,107,102,108,101,109,110,103,104,111,105,10,106,107,102,108,101,109,104,110,103,104,111,105,10,106,107,102,108,101,109,110,103,104,111,105,10,106,107,102,108,101,109,110,103,104,111,105,10,106,107,102,108,101,109,110,110,103,104,111,105,10,106,107,102,108,101,109,110,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,0,0,0,0,0,0,0,0,0,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,56,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,0,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,0,0,0,406,0,0,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,120,120,120,120,0,0,120,120,120,120,120,120,120,120,120,120,120,120,0,0,0,0,0,0,126,125,127,129,128,126,125,127,129,128,126,125,127,128,126,125,127,128,127,129,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,127,126,125,126,125,127,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,126,125,127,129,128,125,126,125,127,129,128,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,132,132,132,132,132,132,132,132,132,132,133,132,132,133,0,132,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,132,132,132,132,133,133,134,132,134,134,133,132,133,132,132,132,134,132,132,133,133,132,132,133,133,132,132,132,132,132,132,134,132,133,132,132,132,132,133,132,132,132,132,132,132,132,132,132,132,132,132,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,133,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,134,0,132,0,132,132,132,132,132,132,132,132,132,132,132,132,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,132,133,133,134,134,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,133,133,134,134,134,134,132,133,134,132,133,134,132,133,134,132,133,134,132,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,132,133,134,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,0,0,0,174,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,174,174,174,175,174,175,174,174,175,175,175,174,174,175,174,175,174,175,174,174,174,175,174,174,174,174,174,174,174,174,174,174,174,174,174,175,174,175,174,175,174,175,174,175,174,175,174,175,174,174,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,0,0,0,0,188,188,188,188,188,188,188,0,0,0,188,188,188,188,188,188,0,188,188,188,188,188,188,188,188,188,188,188,188,188,188,0,0,0,0,0,0,0,0,0,0,192,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,189,190,191,192,193,194,195,193,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,179,189,190,191,192,193,194,195,194,189,190,196,196,189,190,191,192,193,194,195,0,0,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,196,189,190,191,192,193,194,195,0,0,0,0,0,0,197,177,481,197,182,197,177,182,197,177,197,177,182,197,177,182,197,177,182,197,177,177,182,197,177,182,197,177,182,182,197,177,182,197,177,197,177,177,182,182,197,177,197,182,182,197,197,177,481,197,481,197,177,182,197,177,182,197,177,182,197,177,182,197,182,197,177,182,197,177,182,197,177,182,197,177,0,202,0,0,0,0,202,202,202,199,202,199,202,199,199,199,199,199,199,199,202,199,202,199,202,199,199,202,199,199,202,202,199,199,199,199,202,199,202,199,199,199,199,202,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,202,202,199,202,199,202,199,202,199,202,199,202,199,202,199,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,0,0,482,482,0,0,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,0,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,0,0,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,0,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,0,0,0,0,0,0,0,0,0,0,0,0,180,0,0,0,180,180,180,0,0,180,0,0,206,206,216,206,216,206,216,206,206,216,206,216,206,216,206,216,206,216,206,216,206,216,206,216,206,206,206,206,206,216,206,206,206,206,206,216,206,216,206,216,206,206,216,206,216,206,216,206,216,206,0,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,218,218,0,0,0,218,219,208,218,219,208,218,219,219,208,208,218,219,218,219,208,219,208,218,219,208,218,219,208,218,219,208,208,218,219,208,218,208,218,219,208,219,208,218,219,208,218,219,208,208,208,208,208,208,208,218,219,208,208,219,208,208,218,219,218,208,208,218,219,208,218,219,208,208,218,219,208,218,219,208,218,219,208,218,219,208,218,219,0,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,0,0,0,204,222,204,222,204,222,204,222,204,222,204,222,222,204,222,204,222,204,222,204,222,0,204,222,204,222,204,222,222,204,222,204,222,204,222,204,204,222,222,0,204,222,204,222,204,222,204,222,204,222,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,204,222,483,483,483,483,184,184,0,483,483,0,184,0,0,0,0,0,184,0,225,184,184,241,184,184,184,184,184,483,184,184,184,184,184,184,184,483,170,184,241,0,231,0,184,184,0,231,184,184,184,184,225,184,0,184,184,184,483,483,0,184,484,485,486,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,0,0,232,231,232,231,232,231,232,231,232,231,232,231,231,232,231,232,231,232,231,231,231,231,232,231,232,231,231,231,232,231,232,231,231,232,231,232,232,231,231,232,231,231,232,231,232,231,232,231,232,231,232,231,232,231,231,231,232,0,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,0,234,234,234,234,234,234,0,0,0,0,246,239,241,246,239,241,0,239,241,241,246,239,241,246,239,241,246,239,241,246,239,241,246,239,241,246,239,241,246,239,241,241,246,239,241,241,246,239,241,246,239,241,246,239,241,246,239,241,246,239,241,246,239,241,241,241,239,246,246,239,241,0,0,0,0,0,265,255,273,265,255,0,0,0,0,255,265,0,255,259,0,259,255,265,273,250,259,273,255,255,265,250,273,255,255,273,273,0,255,250,255,0,0,259,0,250,255,255,273,255,0,255,259,265,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,265,265,266,265,266,265,265,265,266,265,266,265,266,265,266,265,265,266,266,266,266,265,265,266,266,265,266,266,266,265,265,266,266,265,266,266,265,266,265,266,265,266,265,266,265,266,265,266,265,265,266,266,271,256,257,272,0,264,267,0,267,267,0,0,264,0,264,0,0,0,0,0,0,264,0,0,0,0,0,264,0,264,261,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,269,260,262,263,260,261,268,269,262,263,260,261,270,271,258,256,257,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,268,269,262,263,260,261,270,271,258,256,257,250,264,267,256,264,267,256,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,257,272,256,256,268,269,270,250,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,272,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,257,268,262,269,260,257,262,269,268,250,258,250,262,263,261,263,261,250,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,260,260,250,263,257,257,260,258,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,257,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,267,268,269,262,263,260,261,270,271,258,256,257,272,250,264,269,0,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,0,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,0,0,0,0,0,0,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,0,0,0,0,0,0,0,276,0,278,278,278,278,0,0,0,0,0,0,0,278,276,278,276,278,276,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,278,276,276,275,275,279,279,280,280,281,281,282,282,283,283,278,276,275,279,280,281,282,283,282,278,276,275,279,280,281,282,283,278,276,276,276,276,276,275,279,280,281,282,283,275,281,282,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,275,279,280,281,282,283,275,279,275,279,280,281,282,275,279,278,276,275,279,280,281,282,283,281,276,275,279,280,281,282,283,280,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,278,276,275,279,280,281,282,283,487,488,489,490,491,0,0,284,0,0,286,286,0,286,286,0,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,492,493,0,0,0,0,0,0,0,290,290,290,290,290,0,0,0,0,0,0,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,290,0,0,0,0,0,0,0,0,494,0,296,0,296,0,0,296,296,0,296,295,292,292,295,296,292,295,296,295,296,296,292,292,292,292,295,295,292,292,295,292,295,296,292,295,296,292,295,296,292,295,296,295,292,295,296,295,292,295,296,295,292,295,296,292,292,292,292,295,296,295,292,292,295,296,295,295,295,295,295,296,292,295,296,292,295,296,292,295,296,296,296,296,292,295,296,0,0,0,0,0,0,0,0,0,0,0,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,0,0,0,0,173,302,173,302,173,302,173,302,173,302,173,302,173,302,173,173,173,302,173,302,302,302,302,173,173,302,302,173,173,302,302,173,302,173,302,173,302,173,302,173,302,173,302,173,302,173,302,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,304,304,304,304,304,304,304,304,304,304,0,0,0,304,0,0,304,304,304,304,0,304,304,304,304,304,304,304,304,0,0,0,0,0,0,0,0,0,312,312,312,0,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,0,0,0,0,0,0,0,0,0,0,0,0,0,14,316,317,0,317,317,0,317,0,14,317,14,316,317,14,316,14,316,14,316,14,316,14,316,317,14,316,317,14,316,317,14,14,316,316,317,14,316,14,14,316,14,316,14,316,14,14,316,316,317,14,316,317,14,316,317,14,316,14,316,317,14,316,14,316,0,14,316,14,316,317,14,316,317,14,316,317,14,316,0,317,14,316,317,14,316,317,14,316,317,14,316,0,0,0,319,319,319,319,319,0,0,0,319,318,319,318,318,319,318,319,318,319,318,319,318,318,319,319,318,318,319,318,0,319,318,318,319,318,319,318,319,318,319,318,319,318,319,318,319,318,319,318,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,328,495,327,328,327,328,327,328,328,328,328,327,327,327,327,327,328,327,328,327,328,327,328,328,327,328,327,328,327,328,327,495,327,327,328,328,328,328,495,327,328,327,328,327,328,327,328,327,328,327,328,327,328,327,328,0,0,331,331,333,331,333,333,333,331,331,331,331,333,331,333,331,333,331,333,333,333,331,333,331,333,331,333,333,331,333,333,331,333,331,333,331,333,331,333,331,333,331,333,333,331,333,0,0,337,337,337,337,338,337,338,337,338,337,338,338,338,338,338,338,337,338,337,338,337,338,337,338,337,338,337,338,337,338,337,338,337,338,338,338,337,338,337,337,337,337,338,337,338,337,338,337,338,337,338,337,338,337,338,337,338,338,0,0,340,341,340,341,340,341,340,341,341,341,341,341,341,341,341,340,341,340,341,340,341,340,341,340,341,340,341,340,341,340,341,340,341,341,340,341,340,340,341,340,341,340,341,340,341,340,341,340,341,340,341,340,341,341,340,0,0,342,343,342,343,342,343,342,343,343,343,343,343,342,343,342,343,342,343,342,343,342,343,342,343,342,343,342,343,343,342,343,0,342,343,342,343,342,343,342,343,342,343,342,343,342,343,342,343,342,343,342,0,0,0,0,0,0,344,321,344,0,344,326,325,325,325,325,325,325,325,325,325,325,344,344,344,344,344,344,344,344,325,325,325,325,321,321,325,326,344,323,322,325,326,344,323,322,326,326,326,325,326,344,323,322,325,326,344,323,322,325,325,323,323,323,321,325,325,326,320,325,344,325,344,325,326,344,323,322,325,326,344,323,322,325,326,344,323,322,320,325,344,325,326,344,323,322,344,323,322,344,323,322,325,325,326,344,325,326,344,323,322,325,325,325,325,325,326,326,326,344,344,344,344,344,323,323,323,323,322,325,323,322,321,323,322,323,325,326,344,323,322,325,325,326,344,323,322,325,320,325,344,320,320,344,325,325,325,325,325,325,325,325,325,325,325,325,344,344,344,344,344,344,321,325,344,344,344,320,323,0,325,326,344,323,322,321,320,321,320,320,320,325,344,325,325,325,325,325,325,325,325,325,325,344,344,344,344,344,344,344,344,325,325,326,344,323,322,325,325,325,326,344,323,323,323,323,322,325,326,344,323,322,325,326,344,323,322,325,325,325,326,344,323,322,325,326,344,323,322,325,326,344,323,322,325,326,326,326,326,326,325,326,344,323,322,320,325,496,497,497,357,357,0,350,335,0,0,0,0,154,0,0,154,0,498,335,0,0,154,0,0,0,0,350,335,0,498,0,350,335,154,154,335,154,154,154,499,0,0,335,0,344,335,0,335,0,335,154,0,154,344,0,0,0,344,335,356,329,329,363,500,500,366,329,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,329,358,359,351,346,350,357,339,335,329,358,359,350,323,329,498,329,363,362,500,329,0,358,366,358,329,356,335,329,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,358,366,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,357,329,329,500,500,351,346,350,357,339,351,346,350,357,339,335,500,500,356,329,358,366,359,359,329,363,359,351,346,350,357,339,335,361,362,329,363,364,154,154,356,365,358,366,359,351,346,350,350,350,350,357,339,335,361,361,361,362,329,363,364,154,154,356,365,358,366,359,329,363,358,351,346,350,357,339,359,351,346,350,357,339,358,323,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,339,329,329,363,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,362,357,356,0,0,359,359,359,329,329,329,363,364,329,363,329,365,335,335,361,335,356,365,329,363,329,329,363,329,363,329,363,350,329,363,358,366,359,329,358,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,361,500,499,365,154,500,364,364,364,364,364,500,364,364,366,329,362,329,329,154,335,335,501,498,351,346,350,357,339,335,329,358,359,154,358,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,0,359,351,346,350,357,339,335,361,362,329,363,364,154,356,365,358,366,359,362,498,496,497,497,502,503,504,505,506,507,508,509,510,508,509,510,511,512,513,511,512,513,511,512,513,83,0,0,0,83,83,86,77,83,86,77,83,86,77,86,77,83,86,77,83,83,83,83,86,77,83,86,77,83,86,77,83,86,77,83,83,83,83,83,83,86,77,83,86,77,83,86,77,83,86,77,83,83,86,77,77,86,77,83,86,77,83,83,86,77,83,86,77,83,86,77,83,86,77,83,86,77,83,86,77,83,83,86,86,77,83,0,0,0,0,371,371,371,371,371,379,371,379,371,371,371,379,379,379,371,379,371,379,371,379,371,371,371,379,371,379,371,379,371,371,379,371,371,371,371,371,371,379,379,379,371,371,371,371,371,379,371,379,371,379,371,379,371,379,371,379,371,379,371,379,371,379,379,377,348,377,348,348,348,377,348,377,348,0,377,348,377,348,0,377,348,514,377,348,0,514,377,348,514,377,348,377,348,377,348,514,377,348,514,377,348,514,377,348,514,377,348,0,348,514,377,348,0,514,377,348,514,377,348,514,377,348,377,348,514,377,348,514,377,348,514,377,348,514,377,348,514,377,348,514,377,348,514,377,348,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,381,0,390,390,0,384,389,389,0,390,0,0,0,389,0,384,0,384,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,389,390,387,382,385,383,388,389,390,387,382,385,383,388,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,390,390,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,387,382,385,383,388,387,382,385,383,388,387,382,385,383,388,384,389,390,387,387,382,385,383,388,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,382,385,383,388,384,389,390,387,534,535,536,537,538,539,0,0,0,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,391,0,378,378,378,378,378,378,378,378,378,378,0,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,378,0,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,393,394,394,394,394,0,394,394,394,0,394,394,394,0,0,396,394,395,396,394,395,394,395,394,395,395,396,394,395,396,394,395,396,394,395,396,394,395,394,394,396,394,395,396,394,395,396,394,395,396,394,395,0,0,396,395,396,395,396,394,395,396,394,395,395,395,396,394,395,396,394,395,396,394,395,396,394,395,396,394,395,396,394,395,396,394,395,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,0,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,0,0,0,0,0,0,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,398,392,392,392,402,392,392,392,392,392,401,0,392,392,392,0,392,392,402,401,0,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,392,402,392,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402,401,392,402],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[[3,[2]]]]]],[1,4],0,0,[[]],[[]],[1,1],[[]],0,0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[1,8,8],[[4,[[3,[9]]]]]],[1,[[4,[[3,[9]]]]]],[1,[[4,[[3,[9]]]]]],[1,[[4,[2]]]],[[1,8],[[4,[2]]]],[[1,8,8],[[4,[[3,[10]]]]]],[1,[[4,[[3,[[11,[10]]]]]]]],[[1,9],[[4,[12]]]],[[1,8],[[4,[12]]]],[[1,10],[[4,[12]]]],0,[[],5],[[]],[1,12],[1,4],[1,[[4,[10]]]],[1,5],[[13,14,2],[[4,[1]]]],0,[[]],0,0,0,[[]],0,[[],7],[[],7],0,[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[19,19],[20,20],[21,21],[[]],[[]],[[]],[[19,2],[[4,[12]]]],[[20,2],[[4,[12]]]],[[21,8],[[4,[12]]]],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[[]],[[]],[[]],[[19,12],[[4,[[3,[[11,[22]]]]]]]],[[20,12],[[4,[[3,[[11,[23]]]]]]]],[[21,12],[[4,[[3,[[11,[2]]]]]]]],[[21,8,8],[[4,[[3,[2]]]]]],[19,[[4,[3]]]],[20,[[4,[3]]]],[21,[[4,[3]]]],[21,4],[[],5],[[],5],[[],5],[19,[[4,[[3,[2]]]]]],[20,[[4,[[3,[2]]]]]],[21,4],[[]],[[]],[[]],[21,12],[21,5],[[13,14,2],[[4,[19]]]],[[13,14,2],[[4,[20]]]],[[13,14,2],[[4,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[24,24],[25,25],[[]],[[]],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[]],[[]],[[24,26],[[4,[[3,[27]]]]]],[[],5],[[25,13,26,28],[[4,[29]]]],[[],5],[[24,26],4],[[]],[[]],[[25,13,26,28],[[4,[29]]]],[13,[[4,[24]]]],[13,[[4,[25]]]],[[]],[[]],[[25,13,26,28],4],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,0,0,[[]],[[]],[30,30],[[]],[[30,8],[[4,[12]]]],[5],[5],[[],[[7,[6]]]],[5],[[]],[[30,12],[[4,[[3,[[11,[10]]]]]]]],[[30,8,8],[[4,[[3,[10]]]]]],[30,[[4,[[3,[10]]]]]],[30,[[4,[10]]]],[[],5],[30,4],[[]],[30,12],[30,5],[13,[[4,[30]]]],[[]],[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,[[]],[[]],[31,31],[[]],[[31,2],[[4,[12]]]],[5],[5],[[],[[7,[6]]]],[5],[[]],[[31,12],[[4,[[3,[[11,[32]]]]]]]],[31,[[4,[3]]]],[[],5],[31,[[4,[[3,[2]]]]]],[[]],[13,[[4,[31]]]],[[]],[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,2],[9,2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[23,23],[9,9],[33,33],[34,34],[[]],[[]],[[]],[[]],[[]],[35,[[7,[22,36]]]],[35,[[7,[23,36]]]],[35,[[7,[37,36]]]],[35,[[7,[9,36]]]],[35,[[7,[33,36]]]],[35,[[7,[34,36]]]],[[],22],[[],9],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[5],[5],[5],[[22,38],[[7,[5,36]]]],[[23,38],[[7,[5,36]]]],[[37,38],[[7,[5,36]]]],[[9,38],[[7,[5,36]]]],[[33,38],[[7,[5,36]]]],[[34,38],[[7,[5,36]]]],0,[[22,22],12],[[34,34],12],[[],12],[[22,39],40],[[23,39],40],[[37,39],40],[[9,39],40],[[33,39],40],[[34,39],40],[[34,39],40],[[]],[[]],[9,23],[[]],[[]],[34,9],[[]],[[]],[[14,2],23],[[14,2],22],0,0,0,0,[22,2],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],28],[[],28],[[],28],[[],28],[[],28],[[2,8,8,14,41],22],[[2,8,8,[3,[2]],41,42],23],[[22,[3,[32]],42],9],[[22,[3,[32]],42],34],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],43],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],0,0,[44,8],[[44,39],40],[[]],[[]],0,[44,8],[44,8],[[],5],[[],5],[[]],[[]],[[[11,[8]],[11,[8]],[11,[8]],[3,[45]]],44],0,[[]],[[]],0,0,[44,8],[44,8],[44,4],0,[44],[44,12],[44,46],[44,[[4,[14]]]],[44,14],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,2],[5],[5],[48,14],[5],[49,14],[5],[50,8],[5],[51,2],[5],[52,14],[53,14],[5],[54,8],[5],[5],[55,56],[5],[57,56],[5],[58,56],[5],[59,56],[5],[60,56],[61,56],[5],[5],[62,56],[63,56],[5],[64,56],[5],[65,56],[5],[66,56],[5],[67,56],[5],[5],[68,56],[69,56],[5],[70,56],[5],[71,56],[5],[5],[72,56],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[73,73],[[]],0,0,0,0,0,0,0,0,0,[[74,74,74,75],76],[[73,74,74,74,74,77,75]],[[73,77,78,74,78,74,74,74,74,74,75],[[4,[79]]]],[5],[5],[5],[5],[[73,80,75],73],[[73,75],76],[73,74],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[74,74]],[[74,8]],[[73,39],40],[[]],[[]],[[],81],[[],5],[[],5],[[]],[[]],[[73,74,74,74,74],12],0,0,[[8,8,74,41,5,74,80],73],0,[73,74],[[]],[[]],[[73,74,74,74,74,75],[[3,[74]]]],0,0,[73,74],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[41,74],74],[[41,8],74],0,[[]],[[]],0,0,[[]],[[]],[[]],[[]],[42,42],[82,82],[[]],[[]],0,0,[35,[[7,[42,36]]]],[35,[[7,[82,36]]]],[[],42],[[],82],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[42,38],[[7,[5,36]]]],[[82,38],[[7,[5,36]]]],[[42,42],12],[[82,82],12],[[],12],[[],12],[[42,39],40],[[82,39],40],[[]],[83,82],[[]],[[],5],[[],5],[[]],[[]],0,[[84,85,[3,[74]],8,74,82,8],42],[[]],[[]],0,0,0,0,0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[82,86],4],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[[88,[87]]],4],[[89,90,91],[[4,[92]]]],[[],5],[[]],0,[87,28],0,[[]],0,[[[88,[87]],[88,[93]]],[[95,[[17,[94]]]]]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,[[]],[[]],0,0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[[88,[96]]],4],[[[88,[96]]],4],[[[88,[96]]],4],[[[88,[96]]],4],[[],5],[[89,90,91,12],[[4,[92]]]],[[]],0,[96,28],0,[[]],0,0,0,[[[88,[96]],[88,[93]]],[[95,[[17,[94]]]]]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[[88,[97]]],4],[[[88,[97]]],4],[[],5],[[89,90,91],[[4,[92]]]],[[]],0,[97,28],[[]],0,0,[[[88,[97]],[88,[93]]],[[95,[[17,[94]]]]]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[[88,[98]]],4],[[],5],[[89,90,91],[[4,[92]]]],[[]],0,[98,28],0,[[]],[[[88,[98]],[88,[93]]],[[95,[[17,[94]]]]]],0,[[],7],[[],7],0,[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],0,[78,78],[99,99],[[]],[[]],[35,[[7,[78,36]]]],[35,[[7,[99,36]]]],[[99,100],78],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[78,38],[[7,[5,36]]]],[[99,38],[[7,[5,36]]]],[[78,85],99],0,[[78,78],12],[[99,99],12],[[],12],[[],12],[[78,39],40],[[99,39],40],[[]],[[]],[[],5],[[],5],[[]],[[]],0,[[]],[[]],0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[101,102]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[56,56]],[101,12],[[101,102,102],12],0,[103,103],[104,104],[105,105],[10,10],[106,106],[107,107],[102,102],[108,108],[101,101],[109,109],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[110,[[4,[[3,[73]]]]]],[110,8],[110,8],[35,[[7,[103,36]]]],[35,[[7,[104,36]]]],[35,[[7,[111,36]]]],[35,[[7,[105,36]]]],[35,[[7,[10,36]]]],[35,[[7,[106,36]]]],[35,[[7,[107,36]]]],[35,[[7,[108,36]]]],[35,[[7,[109,36]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[110,56],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[103,38],[[7,[5,36]]]],[[104,38],[[7,[5,36]]]],[[111,38],[[7,[5,36]]]],[[105,38],[[7,[5,36]]]],[[10,38],[[7,[5,36]]]],[[106,38],[[7,[5,36]]]],[[107,38],[[7,[5,36]]]],[[108,38],[[7,[5,36]]]],[[109,38],[[7,[5,36]]]],0,[[110,74,74],[[4,[12]]]],0,0,0,[110,56],[110,56],0,[[110,34],[[4,[112]]]],[[103,39],40],[[104,39],40],[[111,39],40],[[105,39],40],[[10,39],40],[[106,39],40],[[107,39],40],[[102,39],40],[[108,39],40],[[101,39],40],[[109,39],40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,102],[[]],[[]],[102,108],[[]],[109,101],[[]],[101,109],[[110,74,74]],0,0,0,[[],10],0,[110,74],[[110,8],[[4,[10]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[110,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[110,74,74]],[110,[[4,[8]]]],0,0,[110,112],[110,5],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[1,14,14,2,8,12],[[4,[110]]]],[[8,74,74,74],10],[[34,[3,[73]],[80,[41]],[3,[74]]],102],[[2,102],101],[[110,8],113],[[110,8],113],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[110,2],12],0,[[110,8],8],[110],[110,8],0,0,[[110,112,8]],[110,4],0,0,[110],0,0,0,0,0,0,[110,12],[[110,8],8],[110,8],[[110,8],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[110,8],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[110],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[110,56],0,[[]],[[]],0,[79,79],[[]],0,0,0,[35,[[7,[79,36]]]],[5],[5],[[],[[7,[6]]]],[5],[[79,38],[[7,[5,36]]]],[[79,39],40],[[]],[[],5],[[]],0,[[]],0,[79,[[3,[74]]]],0,0,[[]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[79,86],4],[[]],0,[[91,90],4],0,[[91,90],[[4,[12]]]],0,[[91,91,90,[88,[93]]]],[[91,90],4],[[91,90],[[4,[12]]]],[[91,91,90,[88,[93]]]],[[91,90,[88,[93]]],12],[[91,91,90,[88,[93]]]],[[91,90],12],0,[[]],[[]],0,[114,114],[[]],[35,[[7,[114,36]]]],[5],[5],[[],[[7,[6]]]],[5],[[114,38],[[7,[5,36]]]],[[114,39],40],[[]],[[],5],[[]],[[]],[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,[56,56],[[56,56],56],[[56,56]],[[]],[[]],[56,56],[[]],[5],[5],[[],[[7,[6]]]],[[56,56],56],[5],[[56,56],12],[[56,39],40],[[56,39],40],[[]],[[],5],[[]],[56,56],[[56,56],56],[[56,56],[[11,[115]]]],[[]],[[56,56],56],[56,116],[[56,56],56],[[]],[[],43],[[],7],[112,[[7,[56]]]],[8,[[7,[56]]]],[28,[[7,[56]]]],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],[74,117],[56,74],[56,117],0,0,0,[[118,32],12],0,[[]],[[]],[118,4],0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[],5],[[]],0,0,[[13,14,14,2,8,119,[3,[85]],12,12],[[4,[90]]]],[[]],[[118,8,112,5,74,74],[[4,[11]]]],[118,4],[[118,9],[[4,[12]]]],[[118,10],[[4,[12]]]],[[118,34,11],[[4,[12]]]],[118,4],[118,4],[[118,3],4],0,0,[[],7],[[],7],[[],15],0,[[118,112],[[3,[32]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[118,12],4],0,[[]],0,0,0,0,[[],[[95,[[17,[94]]]]]],0,0,0,[[]],[[]],[[120,2],[[11,[12]]]],[5],[5],[[],[[7,[6]]]],[5],[[]],[[120,2],[[11,[3]]]],0,[[],5],[[120,2,[3,[27]]],[[4,[[11,[2]]]]]],[[]],0,[[120,2,2],[[4,[[11,[2]]]]]],[[120,2,2],[[4,[[11,[2]]]]]],0,0,[[[11,[[122,[2,[121,[2]]]]]],91,123,[88,[93]]],[[4,[124]]]],0,0,[[]],0,[124],[[120,2],[[4,[[11,[2]]]]]],[[120,2],4],0,0,[120,4],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],[124,[[4,[[11,[125]]]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[126,126],[125,125],[127,127],[128,128],[[]],[[]],[[]],[[]],0,0,[35,[[7,[126,36]]]],[35,[[7,[125,36]]]],[35,[[7,[127,36]]]],[35,[[7,[129,36]]]],[35,[[7,[128,36]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[5],[5],[[126,38],[[7,[5,36]]]],[[125,38],[[7,[5,36]]]],[[127,38],[[7,[5,36]]]],[[129,38],[[7,[5,36]]]],[[128,38],[[7,[5,36]]]],[[126,39],40],[[125,39],40],[[127,39],40],[[129,39],40],[[128,39],40],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],28],[[],28],[[],28],[[],28],[[],28],[[2,2,2],126],[[2,2,2,[3,[27]]],125],[[2,2,27],127],[2,129],[[[122,[2,[121,[2]]]]],128],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],0,[5],[[]],[[[88,[130]]],4],[[[88,[130]]],4],[[[88,[130]]],4],[[[88,[130]]],4],[[],5],[[89,[131,[125]],124,91],[[4,[92]]]],[[]],0,0,0,[130,28],0,0,[[]],0,0,[[[88,[130]],[88,[93]]],[[95,[[17,[94]]]]]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[132,132],[133,133],[134,134],[[]],[[]],[[]],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[[132,39],40],[[132,39],40],[[133,39],40],[[133,39],40],[[134,39],40],[[134,39],40],[135,132],[136,132],[137,132],[138,132],[139,132],[140,132],[141,132],[142,132],[143,132],[144,132],[145,132],[146,132],[147,132],[36,132],[148,132],[[],132],[149,132],[150,132],[134,132],[151,132],[152,132],[153,132],[154,132],[155,132],[156,132],[[]],[157,132],[158,132],[159,132],[160,132],[161,132],[162,132],[163,132],[133,132],[164,132],[165,132],[166,132],[[]],[132,133],[132,134],[133,134],[36,134],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[167],[167],[167],[132,[[11,[168]]]],[[]],[[]],[[]],[[],43],[[],43],[[],43],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[88,[169]],[17,[170]],[88,[93]]]],[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[[88,[169]],4]],[[],5],[[]],[[[172,[[11,[171]]]]],[[88,[169]]]],[[]],[[[88,[169]],[17,[170]]],4],0,[[[88,[169]],45,[88,[93]]],4],[169],[[[88,[169]]],[[173,[[4,[89]]]]]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,[174,45],0,[[]],[[]],[[]],[[]],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[]],[[]],[175,176],[174,176],[174,177],[[[88,[174]],4]],0,[[],5],[[],5],[[]],[[]],[132,12],0,0,0,[[[88,[174]]],4],0,[12,175],[[[17,[178]],45,171],[[88,[174]]]],[[]],[[]],0,0,0,[174,43],0,[[174,179],4],[[174,179],4],[174,[[88,[180]]]],0,[174,181],[[174,43]],[177],[[[88,[174]],[88,[93]]]],[174],0,0,[174,[[4,[[182,[179]]]]]],[174,[[4,[[173,[132]]]]]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,0,[[]],[[]],[[183,45],[[4,[89]]]],[[183,45,184,113],[[4,[[88,[174]]]]]],[5],[5],[[],[[7,[6]]]],[5],[[]],[[],5],[[]],[[185,171],183],[[]],0,0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,[[]],[[]],[5],[5],[[],[[7,[6]]]],[5],[[186,186,[3,[45]]],[[122,[45,[3,[187]]]]]],[[[3,[45]]],[[3,[45]]]],[[45,[122,[45,[3,[187]]]]],[[3,[45]]]],[[]],[[],5],[[]],0,0,[188,12],[28,12],[188,[[3,[45]]]],0,[12,[[88,[188]]]],[[]],[[188,45],12],[[188,[3,[45]]]],[[188,45,[3,[45]]]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[35,[[7,[189,36]]]],[35,[[7,[190,36]]]],[35,[[7,[191,36]]]],[35,[[7,[192,36]]]],[35,[[7,[193,36]]]],[35,[[7,[194,36]]]],[35,[[7,[195,36]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[5],[5],[5],[5],[5],[[189,38],[[7,[5,36]]]],[[190,38],[[7,[5,36]]]],[[191,38],[[7,[5,36]]]],[[192,38],[[7,[5,36]]]],[[193,38],[[7,[5,36]]]],[[194,38],[[7,[5,36]]]],[[195,38],[[7,[5,36]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[196]]]],[196,4],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[197,[179]],[4,[[88,[179]]]]]],[177],[88,[[88,[18]]]],[[[88,[[197,[179]]]]],[[88,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[197,[179]],[3,[198]]]],[[],177],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],0,[5],[5],[5],[[]],[[]],[[]],0,[[],5],[[],5],[[],5],[[]],[[]],[[]],[[],[[197,[179]]]],[[],177],[[177,28,[3,[27]]]],0,[[]],[[]],[[]],[[],198],[[[182,[179]]],[[4,[[88,[179]]]]]],0,0,[[[88,[[197,[179]]]]],[[182,[179]]]],[177,[[4,[[182,[179]]]]]],[[[3,[27]]],[[95,[[17,[94]]]]]],[[[197,[179]],[3,[27]]],[[95,[[17,[94]]]]]],[132,[[95,[[17,[94]]]]]],[[[197,[179]],132],[[95,[[17,[94]]]]]],[[177,132]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[182,[179]]]],[[[197,[179]],198]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[199,45],12],[[]],[[]],[[]],[[]],[[199,[0,[179,200]]],4],[[199,[0,[179,200]]],4],0,[199,201],0,[199,5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],0,[5],[5],[[199,45],[[4,[12]]]],[[202,39],40],[[]],[[]],[199,176],[199,203],0,[[],5],[[],5],[[]],[[]],[204,[[88,[199]]]],[[8,173,3,[173,[[4,[89]]]],[88,[93]]],4],0,[[]],[[]],[199,205],0,[[[88,[199]]],[[11,[[88,[174]]]]]],[[199,89]],[[199,45]],[[[88,[199]],[88,[93]]],4],[199,[[88,[206]]]],0,[199,[[88,[207]]]],0,[199,[[88,[208]]]],0,[199,185],0,[[[88,[199]],[88,[93]]],4],[[[88,[199]]],12],0,[199],[[[88,[199]]]],0,[[199,89]],[199,[[173,[[4,[89]]]]]],[199,173],[[],43],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[[88,[199]],[88,[93]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[91],0,0,0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],0,[[]],0,[[[88,[209]]],4],[[[88,[209]]],4],[[[88,[209]]],4],0,[[],5],[[89,91],92],[[]],0,[209,28],[[]],[[[88,[209]]],4],0,[[[88,[209]],[88,[93]]],[[95,[[17,[94]]]]]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,[[],28],[[88,[88,[93]]],[[95,[[17,[94]]]]]],0,0,[[]],[[]],0,[[[88,[210]]]],[5],[5],[[],[[7,[6]]]],[5],[[]],[[[88,[210]]]],[[],5],[[]],0,[[28,89],[[88,[210]]]],[[]],[[210,211]],[[[88,[210]],211]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[],5],[[89,91],92],[[]],0,[212,28],0,[[]],0,[[],213],[[[88,[212]]],4],[[[88,[212]]],4],0,[[[88,[212]],[88,[93]]],[[95,[[17,[94]]]]]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,[[205,181,89,91],[[3,[92]]]],[[]],[[]],[[],205],[5],[5],[[],[[7,[6]]]],[5],[[]],[[],5],[[]],[[],205],[[]],0,[[205,181]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],[[]],0,[[],5],[[89,91],92],[[]],[214,28],[[]],[214,4],0,[[[88,[214]],[88,[93]]],[[95,[[17,[94]]]]]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],[[[88,[215]],[88,[93]]],4],[[]],0,[[],5],[[]],[[89,185,203],[[88,[215]]]],[[]],[[[88,[215]]],4],[[[88,[215]],[88,[93]]],4],[[[88,[215]]],4],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[],[[95,[[17,[94]]]]]],0,0,0,[[],91],[[[88,[215]],89,[88,[93]]],[[95,[[17,[94]]]]]],[[89,[88,[93]]],[[95,[[17,[94]]]]]],[[91,89]],0,[[],213],0,0,0,0,[[]],[[]],[[]],[[]],0,[[[88,[206]],5,[88,[93]]],4],0,[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[]],[[]],[216,176],[206,[[95,[[17,[94]]]]]],[[],5],[[],5],[[]],[[]],[[206,5,89]],[[[217,[199]]],[[88,[206]]]],[206,[[88,[199]]]],0,[[]],[[]],[[[88,[206]],5,89,[88,[93]]],4],[[[88,[206]],[88,[93]]],4],[[[88,[206]],5,45,[88,[93]]],4],[206],[[],7],[[],7],[[],7],[[],7],[[],15],[206,181],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,[[]],[[]],[[[88,[207]],45,[88,[93]]],4],0,[[[88,[207]],45,[88,[93]]]],0,[5],[5],[[],[[7,[6]]]],[[[88,[207]]]],[5],[[[88,[207]]]],[[]],[207,[[95,[[17,[94]]]]]],[[],5],[[]],[[[217,[199]]],[[88,[207]]]],0,[207,[[88,[199]]]],0,[[]],[207],[207,[[173,[[4,[89]]]]]],[[],7],[[],7],[207,181],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[[88,[208]],213,[88,[93]]],4],0,[218,218],[219,219],[[]],[[]],0,[[],219],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[[88,[208]]]],[5],[5],[5],[[[88,[208]]]],[[218,39],40],[[]],[[]],[[]],[208,[[95,[[17,[94]]]]]],[219,176],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[208,213],[[4,[45]]]],[[[217,[199]]],[[88,[208]]]],0,[208,[[88,[199]]]],0,[[208,213],4],[[]],[[]],[[]],0,[[[88,[208]],[88,[93]]],4],0,[208],[208,[[173,[[4,[89]]]]]],[[]],[[]],[[],43],[[208,213,[88,[93]],183,3],4],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[208,181],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,[[]],[[]],[5],[5],[[],[[7,[6]]]],[5],[[]],[220,[[95,[[17,[94]]]]]],[[],5],[[]],[[[217,[199]]],[[88,[220]]]],[220,[[88,[199]]]],0,[[]],[[[88,[220]],[88,[93]]],4],[[[88,[220]],5,45,[88,[93]]],4],[[],7],[[],7],[220,181],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],221],[204,204],[222,222],[[]],[[]],0,0,[[],204],[[],222],[[],12],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[222]]]],[[],[[7,[6]]]],[5],[5],0,0,[[204,39],40],[[222,39],40],[222,204],[[]],[[]],[223,222],[[[3,[43]]],[[3,[184]]]],0,0,[[],5],[[],5],[[]],[[]],0,0,0,0,[[222,222,223],222],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[184,184],[[]],[5],[5],[[],[[7,[6]]]],[[45,[11,[113]]],4],[5],[[184,184],12],[[],12],[[184,39],40],[[]],[[],5],[[]],[45,4],[[],[[95,[[17,[94]]]]]],[[]],0,[[224,28],[[4,[45]]]],0,0,[[]],[184,43],0,0,[[],7],[45,[[4,[184]]]],[28,[[4,[184]]]],[[],7],0,[[],15],0,[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],4],[[],4],0,[[]],0,0,0,0,0,[[]],[[]],[225,225],[[]],[[225,224],[[227,[226]]]],[5],[5],[[],[[7,[6]]]],[[225,45,[11,[113]]],4],[[225,224,[11,[113]]],[[4,[228]]]],[[225,224],[[4,[229]]]],[5],[[]],[[],5],[[]],[[225,45],4],[[[11,[213]],230],225],[[]],[[]],[[],7],[[],7],0,[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[225,4],[225,4],[[]],0,0,0,[[]],[[]],[[]],[[]],[231,231],[232,232],[[]],[[]],[[231,45],[[4,[45]]]],[[232,45],[[4,[45]]]],[[231,224],[[227,[226]]]],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[231,45,[11,[113]]],4],[[231,45],[[4,[[233,[228]]]]]],[[231,45],[[4,[229]]]],[5],[5],[[]],[[]],[[],[[4,[45]]]],[[],4],[[],5],[[],5],[[]],[[]],[[231,45],4],[[45,11],[[4,[231]]]],[[45,43],[[4,[232]]]],[[]],[[]],0,0,[[]],[[]],0,[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[231,4],[231,4],[[]],[[]],0,[[]],[[]],[234,234],[[]],[[],234],[5],[5],[[],[[7,[6]]]],[[234,45,[11,[113]]],4],[[234,235,[11,[113]]],[[4,[236]]]],[[234,235],[[4,[237]]]],[5],[[]],[[],5],[[]],[[234,45],4],[[],234],[[]],[[]],[[],7],[[],7],[[],15],[235,43],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[234,4],[234,4],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],238],[239,[[11,[240]]]],0,[[],241],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[],241],[[]],[[]],[[]],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[241,[[4,[242]]]],[[241,229],4],[[239,243,244],[[7,[245,157]]]],[[246,243,247,248,244],[[7,[249,157]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,43],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[123,[250]],91],4],0,0,0,0,0,0,[[[88,[[172,[[122,[[0,[200,251,252]],112]]]]]],112]],0,0,0,0,0,0,0,0,0,0,0,0,[[[255,[[0,[253,254,200]]]],[122,[256,112]],8],[[122,[256,112]]]],[[[255,[[0,[253,254,200]]]],8,8,257],4],[[]],[[]],[[[255,[[0,[253,254,200]]]],[11,[8]]],4],[[[255,[[0,[253,254,200]]]]],4],0,[[[255,[[0,[253,254,200]]]]],8],0,[[[255,[[0,[253,254,200]]]]],[[4,[8]]]],0,[5],[5],[[],[[7,[6]]]],[5],[[]],[5,43],[[[255,[[0,[253,254,200]]]],8],[[4,[258]]]],[[[255,[[0,[253,254,200]]]],250],4],[[[255,[[0,[253,254,200]]]]],256],0,[[],5],[[]],0,[[[255,[[0,[253,254,200]]]]],[[4,[[11,[258]]]]]],0,[[[255,[[0,[253,254,200]]]]],[[4,[257]]]],[[[255,[[0,[253,254,200]]]]],8],0,[[259,[88,[[172,[[122,[43,112]]]]]]],[[4,[[255,[[0,[253,254,200]]]]]]]],0,0,0,[[]],[[[255,[[0,[253,254,200]]]]],4],[[[255,[[0,[253,254,200]]]],258],4],[[[255,[[0,[253,254,200]]]],257],4],[[[255,[[0,[253,254,200]]]],260],4],[[[255,[[0,[253,254,200]]]],261],4],[[[255,[[0,[253,254,200]]]],262],4],[[[255,[[0,[253,254,200]]]],263],4],[[[255,[[0,[253,254,200]]]]],[[123,[[0,[253,254,200]]]]]],[[[255,[[0,[253,254,200]]]]],4],0,[[[255,[[0,[253,254,200]]]],91,[123,[250]],[88,[93]],123],4],0,[[[255,[[0,[253,254,200]]]],[11,[256]],264,[11,[8]]],4],[[[255,[[0,[253,254,200]]]]],4],[[[255,[[0,[253,254,200]]]]],4],[[131,113],4],[[[255,[[0,[253,254,200]]]]],4],[[[255,[[0,[253,254,200]]]]],[[131,[[0,[253,254,200]]]]]],0,[[[255,[[0,[253,254,200]]]],8],4],[[[255,[[0,[253,254,200]]]],11],4],0,[[[255,[[0,[253,254,200]]]],8],[[4,[[11,[257]]]]]],[[[255,[[0,[253,254,200]]]],8],[[4,[257]]]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[[255,[[0,[253,254,200]]]],256],4],[[[255,[[0,[253,254,200]]]]],[[4,[[11,[256]]]]]],0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[[265,[[0,[254,253]]]]],4],[[]],[[]],[[[266,[[0,[253,254]]]],8],[[4,[[0,[253,254]]]]]],[[[266,[[0,[253,254]]]]],[[4,[[3,[[0,[253,254]]]]]]]],[[[266,[[0,[253,254]]]]],[[4,[[11,[[0,[253,254]]]]]]]],0,[[],5],[[],5],[[[266,[[0,[253,254]]]]],4],[[]],[[]],[[[266,[[0,[253,254]]]]],12],[[[266,[[0,[253,254]]]]],8],0,[28,[[4,[[265,[[0,[254,253]]]]]]]],[13,[[4,[[266,[[0,[253,254]]]]]]]],0,[[]],[[]],0,[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[[266,[[0,[253,254]]]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[267,267],[268,268],[269,269],[262,262],[263,263],[260,260],[261,261],[270,270],[271,271],[258,258],[256,256],[257,257],[272,272],[250,250],[264,264],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[35,[[7,[268,36]]]],[35,[[7,[269,36]]]],[35,[[7,[262,36]]]],[35,[[7,[263,36]]]],[35,[[7,[260,36]]]],[35,[[7,[261,36]]]],[35,[[7,[270,36]]]],[35,[[7,[271,36]]]],[35,[[7,[258,36]]]],[35,[[7,[256,36]]]],[35,[[7,[257,36]]]],[35,[[7,[250,36]]]],[35,[[7,[264,36]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[268,38],[[7,[5,36]]]],[[269,38],[[7,[5,36]]]],[[262,38],[[7,[5,36]]]],[[263,38],[[7,[5,36]]]],[[260,38],[[7,[5,36]]]],[[261,38],[[7,[5,36]]]],[[270,38],[[7,[5,36]]]],[[271,38],[[7,[5,36]]]],[[258,38],[[7,[5,36]]]],[[256,38],[[7,[5,36]]]],[[257,38],[[7,[5,36]]]],[[250,38],[[7,[5,36]]]],[[264,38],[[7,[5,36]]]],[[267,267],12],[[256,256],12],[[264,264],12],[[],12],[[],12],[[],12],[[267,39],40],[[268,39],40],[[269,39],40],[[262,39],40],[[263,39],40],[[260,39],40],[[261,39],40],[[270,39],40],[[271,39],40],[[258,39],40],[[256,39],40],[[257,39],40],[[272,39],40],[[250,39],40],[[264,39],40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[257,8],[[4,[258]]]],[[272,256],[[4,[8]]]],[[],8],[256],0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[272,256,8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[257,12],0,0,0,0,[257,8],0,0,0,0,0,[[],28],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[263,12]],[[257,8],[[11,[257]]]],[[257,8],257],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[257,[[3,[258]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],[[]],[[[88,[273]]],4],0,[[],5],[[256,89,[131,[250]],91,[88,[[172,[[122,[43,112]]]]]]],92],[[]],0,0,[273,28],0,0,[[]],0,[[[88,[273]],[88,[93]]],[[95,[[17,[94]]]]]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,[[]],[[]],[259,259],[[]],0,[[],259],[5],[5],[[],[[7,[6]]]],[5],[[259,39],40],[[]],0,0,[[],5],[[]],[[]],0,0,[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,[[]],[[]],[274,4],[5],[5],[[],[[7,[6]]]],[5],[[]],[[],5],[[]],[45,[[4,[274]]]],[[274,275],[[4,[176]]]],[45,4],[[]],0,[[178,[131,[276]],123,123],4],[[274,275],[[4,[176]]]],0,0,[[274,275,[277,[276]]],4],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],0,[[]],0,0,0,[[],4],[[],4],[[],[[4,[14]]]],[[],[[4,[[11,[14]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[278,278],[276,276],[275,275],[279,279],[280,280],[281,281],[282,282],[283,283],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[278,112],0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[278,43],[[],[[7,[6]]]],[[],[[7,[276]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[275]]]],[[],[[7,[6]]]],[[],[[7,[279]]]],[[],[[7,[280]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[281]]]],[[],[[7,[282]]]],[[],[[7,[6]]]],[[],[[7,[283]]]],[[],[[7,[6]]]],[5],[5],[5],[5],[5],[5],[5],[5],0,[[278,39],40],[[276,39],40],[[275,39],40],[[279,39],40],[[280,39],40],[[281,39],40],[[282,39],40],[[283,39],40],[[]],[280,276],[279,276],[282,276],[[]],[281,276],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[28,176],275],[[28,176],279],[[[277,[279]]],280],[[176,176],281],[[278,[11,[43]],176],282],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[276,7],[275,7],[279,7],[280,7],[281,7],[282,7],[283,7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[17,[178]],45,[88,[284]]],4],[275,[[95,[[17,[94]]]]]],[[45,[88,[284]],[88,[93]]],4],[[[17,[170]],[88,[284]],[88,[93]]],4],0,0,0,[[]],[[]],[[28,285],4],[5],[5],[[],[[7,[6]]]],[5],[[]],[[],5],[[]],[[]],[[]],[[[95,[286]],287],[[288,[7]]]],[[[95,[286]],287],[[288,[7]]]],[[[95,[286]],287],[[288,[11]]]],[[[95,[286]],287],[[288,[7]]]],[[[95,[286]],289],7],[[],7],[[],7],[[95,287],[[288,[[11,[7]]]]]],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,0,0,0,[[290,291],4],[[]],[[]],[290,[[4,[12]]]],0,[[[293,[292]],[294,[27]],213],230],[[[293,[292]],[294,[27]],213],230],[[[293,[292]],[294,[27]],213],112],[[[293,[292]],[294,[27]],213],230],[[[293,[292]],[294,[27]],213],230],[[[293,[292]],[294,[27]],213],230],[5],[5],[[],[[7,[6]]]],[5],[290,4],[[]],[290,[[4,[[11,[[3,[27]]]]]]]],[[],5],[[]],[[26,29],290],[[]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,[[[293,[292]],[294,[27]],213],230],[[[293,[292]],[294,[27]],213]],[[[293,[292]],[294,[27]],213],112],[[[293,[292]],213],112],[[[293,[292]],[294,[27]],213],112],[[[293,[292]],[294,[27]],213],112],0,[213,4],0,0,0,0,0,0,0,0,0,0,[295,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[295,296],[[4,[[3,[27]]]]]],[296,296],[[]],0,0,0,0,[295,4],0,0,0,[295,4],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[295,[[4,[[3,[27]]]]]],[[]],[[]],[[]],[295,43],[[],5],[[],5],[[],5],0,[[]],[[]],[[]],0,[292,297],0,[292,298],[295,[[4,[[3,[27]]]]]],[296,28],[[1,26],[[4,[295]]]],0,[[]],[[]],[[]],[295],[26,[[3,[27]]]],[[295,213],[[4,[299]]]],0,[295,297],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[[],[[7,[6]]]],[5],[[]],[[],5],[[]],[[],[[88,[300]]]],[[]],[[[88,[300]],[88,[93]]]],[300],0,0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[]],[[]],[[[173,[200]]],301],0,[[],5],[[],5],[[]],[[]],[[],[[88,[[302,[200]]]]]],[[[302,[200]],200]],[[[302,[200]],200]],0,[[]],[[]],[[],301],[[[173,[200]]],200],0,0,[[[88,[[302,[200]]]]],[[173,[200]]]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[173,[200]]]],[[[88,[[302,[200]]]],301]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,0,0,[[]],[[]],0,[32,32],[[]],[32,[[4,[[3,[84]]]]]],[35,[[7,[32,36]]]],[5],[5],[[],[[7,[6]]]],[5],[[32,38],[[7,[5,36]]]],[32,[[4,[[3,[27]]]]]],[[32,32],12],[[],12],[[32,39],40],[[]],[[],5],[[]],[[],28],[[]],0,0,[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[32,[3,[[3,[85]]]]],4],[[32,[88,[[303,[[122,[3]]]]]],[3,[3]]],4],[[]],0,0,0,0,0,0,0,0,0,[8],[8],0,[[]],[[]],[[[304,[200]]],[[304,[200]]]],[[]],0,[[],[[304,[305]]]],[5],[5],[[],[[7,[6]]]],[5],[28,43],[28,43],[[],43],[[]],[[],306],[8,307],[[],5],[[]],[308,[[4,[[0,[309,310]]]]]],[[]],[311,4],[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,[28,[[11,[[3,[27]]]]]],[12,43],[311,[[4,[43]]]],[311,[[4,[310]]]],[[311,28],4],[311,4],0,0,0,0,0,[[]],[[]],[312,312],[[]],[35,[[7,[312,36]]]],[5],[5],[[],[[7,[312]]]],[[],[[7,[6]]]],[5],[[312,38],[[7,[5,36]]]],[[312,312],12],[[],12],[[312,39],40],[[312,39],40],[[]],[28,[[7,[312]]]],[[],8],[312],[[],5],[[]],[[]],[312,7],[[]],[[],43],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],[[313,313],12],[[28,5,12],[[4,[8]]]],[[8,5],43],[313,12],[[8,314,314],[[4,[8]]]],[[],[[11,[308]]]],[28,[[4,[308]]]],[[[11,[43]],28],[[4,[308]]]],[[],[[11,[308]]]],[[],[[11,[315]]]],[315,[[11,[308]]]],[311,[[4,[308]]]],[308,[[4,[43]]]],0,0,0,0,0,0,0,0,0,[[14,112]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[316,316],[[]],[[]],[[],14],[[],316],[35,[[7,[14,36]]]],[35,[[7,[316,36]]]],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[14]]]],[[],[[7,[316]]]],[[],[[7,[6]]]],[5],[5],[5],[14,8],[[14,38],[[7,[5,36]]]],[[316,38],[[7,[5,36]]]],[[14,14],12],[[316,316],12],[[],12],[[],12],[[14,39],40],[[14,39],40],[[316,39],40],[[316,39],40],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[14,14],[[11,[115]]]],[[316,316],[[11,[115]]]],[[]],[[]],[[]],[14,7],[316,7],[[112,317],43],[[]],[[]],[[],43],[[],43],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],[[4,[8]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[318,28],4],[[]],[27,319],[[]],[318,[[95,[[17,[94]]]]]],[[],5],[[],5],[[28,28],[[4,[119]]]],[[]],[[]],[[28,28],[[4,[119]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,0,0,0,0,[[[321,[320]],[323,[322]],[325,[324]]],[[7,[[326,[324,320]],154]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[321,326,326],[[7,[326,154]]]],[[327,[321,[74]],326,326],[[7,[[326,[74,74]],154]]]],0,[[]],[[]],[[]],[[]],0,[328,328],[[]],[327],0,[[329,[323,[322]],[323,[322]],[323,[322]]],328],[328,327],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[328,39],40],[[]],[[]],[[],5],[[],5],[[]],[[]],[327],[[321,326,326],[[7,[326,154]]]],[[327,[321,[74]],326,326],[[7,[[326,[74,74]],154]]]],[[]],[[]],0,0,0,[[321,326,326],[[7,[326,154]]]],[[327,[321,[74]],326,326],[[7,[[326,[74,74]],154]]]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,0,[[[331,[330]],332,5,[325,[330]]],[[7,[154]]]],[[]],[[]],[[]],[[]],[[[333,[200]]],[[333,[200]]]],[[]],0,[[329,334,334,[323,[322]]],[[333,[330]]]],[[[333,[330]]],[[331,[330]]]],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[[333,[330]]],[[335,[330]]]],[[[333,[336]],39],40],[[]],[[]],[[],5],[[],5],[[]],[[]],0,[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[337,337],[338,338],[[]],[[]],[338],0,[[329,[323,[322]],[323,[322]],[323,[322]],[323,[322]],[323,[322]],339],337],[337,338],[[338,[321,[74]],[326,[74,74]],[326,[74,74]],5,12],[[7,[154]]]],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[337,39],40],[[338,39],40],[[]],[[]],[[],5],[[],5],[[]],[[]],0,[[338,[332,[74]],[326,[74,74]],[326,[74,74]],5],[[7,[[326,[74,74]],154]]]],[[338,[321,[74]],[326,[74,74]],[326,[74,74]],12],[[7,[154]]]],[338],[[]],[[]],0,0,0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[338,[321,[74]],[325,[74]],[325,[74]],5,12],[[7,[154]]]],0,0,[[]],[[]],[[]],[[]],[340,340],[341,341],[[]],[[]],[341],0,[[329,[323,[322]],339],340],[340,341],[[341,[321,[74]],[326,[74,74]],12],[[7,[154]]]],[[341,332,[326,[74,74]],5,12],[[7,[154]]]],[74,3],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[340,39],40],[[341,39],40],[[]],[[]],[[],5],[[],5],[[]],[[]],0,[339,[[7,[154]]]],[341],[[]],[[]],0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[341,[321,[74]],[325,[74]],12],[[7,[154]]]],0,0,0,[[]],[[]],[[]],[[]],[342,342],[343,343],[[]],[[]],[343],0,[[329,[323,[322]],27],342],[342,343],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[[342,39],40],[[343,39],40],[[]],[[]],[[],5],[[],5],[[]],[[]],[343],[[]],[[]],[[[335,[330]],27],[[335,[330]]]],0,[[343,[321,[74]],[326,[74,74]]],[[7,[154]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[325,[344]]]],[[[325,[344]],325]],[[[325,[344]]]],[[325,325]],[[325,325]],[[325,325]],[[325,325]],[[325,325]],[[[325,[344]],325]],[[325,325]],[[344,344],344],[344,344],[344,344],[[344,344],344],[[344,344],344],[[344,344],344],[[344,344]],[[344,344]],[325,325],[325,325],[325,325],[325],[[],[[7,[154]]]],[[],[[7,[154]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[326,345],[326,345],0,[325,325],[326,326],[344,344],[323,323],[322,322],[[]],[[]],[[]],[[]],[[]],[325,325],[325,325],[[323,323],115],[323],0,[[345,[323,[346]],5],[[7,[154]]]],[325,325],[325,325],[[326,332,[323,[322]],5],[[7,[326,154]]]],[[]],[325,[[325,[344]]]],[344,344],[[],325],[344,11],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[]],[325,[[325,[344]]]],[344,344],[5],[5],[5],[5],[5],[[344,344],12],[[323,323],12],[[322,322],12],[[],12],[[],12],[[],12],[325,[[7,[154]]]],[[[325,[344]]],325],[[[326,[344]]],326],[344],[[325,39],[[7,[347]]]],[[326,39],[[7,[347]]]],[[344,39],[[7,[347]]]],[[323,39],[[7,[347]]]],[[322,39],[[7,[347]]]],[348,325],[[]],[348,[[325,[213]]]],[348,[[325,[75]]]],[325,[[325,[344]]]],[349,326],[348,[[326,[74,74]]]],[[]],[[]],[344,344],[[],344],[[],344],[[],344],[[]],[[[323,[346]]],[[323,[350]]]],[[[323,[351]]],[[323,[350]]]],[[[323,[322]]],[[323,[350]]]],[[]],[[],325],[[],8],[[],8],[[]],[323],[322],0,[[],5],[[],5],[[],5],[[],5],[[],5],0,[[]],[[]],[[]],[[]],[[]],[325,[[325,[344]]]],[[],352],[325,[[325,[344]]]],[344,344],[[],353],[[],12],[344,12],[[],325],[325,325],[[325,325]],[[[325,[344]]]],[[[325,[344]],325]],[[[325,[344]],325]],[[325,325]],[[325,325]],[[325,325]],[[325,325]],[[[325,[344]]]],[[325,325]],[344,344],[[344,344],344],[[344,344],344],[344,344],[[344,344]],[[344,344]],[[],354],[325],[344],[344],[344],[[]],[[323,323],[[11,[115]]]],0,[[]],[[]],[[]],[[]],[[]],[[[11,[43]]]],[[]],[[]],[355],[[],352],[[]],[325,[[325,[344]]]],[344,344],[[325,325]],[[[325,[344]],325]],[[[325,[344]],325]],[[325,325]],[[325,325]],[[325,325]],[[[325,[344]]]],[[325,325]],[[325,325]],[[[325,[344]]]],[[344,344],344],[344,344],[[344,344],344],[[344,344],344],[[344,344],344],[344,344],[[344,344]],[[344,344]],[325,[[325,[344]]]],[[]],[[]],[[]],[[]],[[]],[325],[[325,5],[[3,[325,16]]]],[[],7],[[],7],[[],7],[[[323,[350]]],[[7,[[323,[351]]]]]],[[],7],[[[323,[350]]],[[7,[[323,[322]]]]]],[[[323,[350]]],[[7,[[323,[346]]]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],15],[[],15],[[],325],[325],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[325,325],[326,325],[326,325],[326,325],0,[326,[[325,[344]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[325,325],325],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[335,335],335],[[356,[3,[[3,[[3,[16]],16]],16]],[3,[27,16]]]],[329,[[323,[322]]]],0,0,[[[323,[322]],5],[[7,[154]]]],[[[323,[351]],5],[[7,[154]]]],0,[329,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[351,351],[346,346],[350,350],[357,357],[339,339],[335,335],[329,329],[358,358],[359,359],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[350,350],115],0,[329,357],[329],0,0,0,[[[323,[350]],5,[323,[350]],5],[[7,[154]]]],[[329,28,334]],[[360,359],[[7,[154]]]],0,0,0,[[],329],[[],356],[335,5],[329,5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],0,0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[357,332,5],[[7,[154]]]],[[329,[323,[351]]]],[329],[[357,5],[[7,[154]]]],[[]],[[351,351],12],[[346,346],12],[[350,350],12],[[357,357],12],[[339,339],12],[[],12],[[],12],[[],12],[[],12],[[],12],[335],[[]],[[[323,[351]],5,[325,[344]]],[[7,[154]]]],[[356,360,358],12],[329,[[323,[351]]]],0,0,0,0,0,0,0,[[351,39],[[7,[347]]]],[[346,39],[[7,[347]]]],[[350,39],[[7,[347]]]],[[357,39],[[7,[347]]]],[[339,39],[[7,[347]]]],[[335,39],[[7,[347]]]],[[361,39],[[7,[347]]]],[[362,39],[[7,[347]]]],[[329,39],[[7,[347]]]],[[363,39],[[7,[347]]]],[[364,39],[[7,[347]]]],[[154,39],[[7,[347]]]],[[154,39],[[7,[347]]]],[[356,39],[[7,[347]]]],[[365,39],[[7,[347]]]],[[358,39],[[7,[347]]]],[[366,39],[[7,[347]]]],[[359,39],[[7,[347]]]],[[]],[[]],[[]],[322,350],[346,350],[351,350],[[]],[[]],[[]],[[],361],[335,361],[[]],[[]],[[]],[[]],[[]],[[]],[36,154],[[]],[[]],[[]],[[]],[[]],0,0,[358,367],[[],8],[[],8],[[],8],[[],8],[[],8],[359,358],[351],[346],[350],[357],[339],[358,[[7,[36]]]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[329,[[323,[346]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[362],[357,12],0,[[360,358],[[7,[359,154]]]],[360,[[7,[358,154]]]],0,0,0,[[329,334],5],[329,339],0,0,0,0,0,[329,5],0,[335,335],[[335,335],335],0,[335],[[],356],[360,365],0,0,0,0,0,0,0,0,0,[[350,350],[[11,[115]]]],0,0,0,0,0,[329,363],[358,366],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[11,[43]]]],[334,[[7,[154]]]],[[365,334],[[7,[154]]]],[167],[[]],0,0,[[364,[323,[322]],368],335],[[364,368],335],[[364,[323,[351]],368],335],[[[323,[346]],5],[[7,[325,154]]]],[[364,[323,[346]],368],335],[[364,357],335],0,[329,357],0,0,[[329,5]],[154,[[11,[168]]]],[335,335],[[335,335],335],[[[3,[[323,[351]],16]]],[[7,[154]]]],[321,[[7,[154]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],43],0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[360,358],[[7,[154]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[335,362],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],369],[83],[[]],[[]],[[]],[[]],[[]],[[]],[213,86],[213,77],[86,86],[77,77],[83,83],[[]],[[]],[[]],[[77,355],[[7,[83,154]]]],[35,[[7,[83,36]]]],[[],83],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[[83,38],[[7,[5,36]]]],[[]],[[]],[[83,83],12],[[],12],[[86,39],40],[[77,39],40],[[83,39],40],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[3,[27]]],83],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],[[7,[369,370]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[83,86],[[7,[154]]]],0,[[]],[[]],[[]],0,0,0,0,0,0,0,[371,327],0,[[]],[[]],[[]],[[]],[371,371],[[]],[329],0,[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[371,[[373,[372]]]],0,[[]],[[]],[[],5],[[],5],[[]],[[]],0,0,0,0,[371,[[376,[374,375,372]]]],[371,[[376,[374,375,372]]]],0,0,[[[3,[377]],378],379],0,[[]],[[]],[371,[[380,[74]]]],0,0,0,[[379,[321,[74]]],[[7,[154]]]],[[]],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[379,379],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[377,377],[348,348],[[]],[[]],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[378,[[3,[377]]]],[[348,39],40],[[]],[[]],[[]],0,[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[381],[381],[[]],[[]],0,[5],[5],[[],[[7,[6]]]],[5],0,[[]],[[],5],[[]],0,[[381,28],[[11,[382]]]],[[381,28],[[11,[383]]]],[[381,28],[[11,[384]]]],[[381,28],[[11,[385]]]],[[28,386,[3,[382]],[3,[385]],[3,[387]]],381],[[]],[[]],0,0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[382,382],[385,385],[383,383],[388,388],[389,389],[390,390],[387,387],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],387],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[5],[5],[5],[5],[5],[[390,390],12],[[],12],[[382,39],40],[[385,39],40],[[383,39],40],[[388,39],40],[[384,39],40],[[389,39],40],[[390,39],40],[[387,39],40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[391,[[3,[27]]]],0,0,[5],[5],[[],[[7,[6]]]],[5],0,[[]],[[],5],[[]],0,[28,[[11,[5]]]],[28,[[11,[5]]]],0,[[28,386,43,[3,[382]],[3,[385]],[3,[387]],[3,[388]],12],391],[[]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,[[]],[[]],[378,378],[[]],0,[[],[[4,[378]]]],[5],[5],[[],[[7,[6]]]],[5],[[],[[11,[5]]]],[[378,39],40],[[]],[[],5],[[]],0,0,0,[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[[3,[392]]]]]],[[],[[4,[3]]]],[[]],[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,[[393,28,5,5]],[[]],[[]],[5],[5],[[],[[7,[6]]]],[5],[[393,28,28]],0,[[393,43,5,5],43],[[]],[[],5],[[]],0,0,[[28,28,[3,[43]]],393],[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],[[393,28,5,5]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[394,394],[395,395],[[]],[[]],0,[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[[394,394],12],[[],12],0,[[394,39],40],[[395,39],40],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[313,12],[313,12],[396,[[3,[395]]]],0,[[28,386],396],[[28,394,5,5],395],[[]],[[]],[[]],0,[[]],[[]],0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[397],[[]],[[]],[397,397],[[]],[5],[5],[[],[[7,[6]]]],[5],[[397,39],40],[[]],[28,[[11,[397]]]],[27,[[11,[397]]]],[[],5],[[]],[[]],[[]],[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,[[]],[[]],[[398,28,[3,[395]]]],[5],[5],[[],[[7,[6]]]],[5],0,[[]],[[],5],[[]],[[28,386,[3,[395]]],398],[398],[[398,[3,[[3,[395]]]]],[[3,[387]]]],[[398,399],[[3,[382]]]],[[398,399],[[3,[385]]]],[[398,395,400],[[3,[389]]]],[[]],0,[[],7],[[],7],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[401,401],[392,392],[402,402],[[]],[[]],[[]],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[5],[5],[5],[[392,392],12],[[402,402],12],[[],12],[[],12],[[401,39],40],[[392,39],40],[[402,39],40],[[]],[[]],[[]],[27,[[11,[401]]]],[27,[[11,[392]]]],[27,[[11,[402]]]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[402,392],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],15],[[],15],[[],15],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[[17,[16]]],[[17,[18,16]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]]],"p":[[3,"Blockchain"],[3,"Hash"],[3,"Vec"],[6,"Result"],[15,"usize"],[3,"With"],[4,"Result"],[15,"u64"],[3,"BlockInfo"],[3,"SlotCheckpoint"],[4,"Option"],[15,"bool"],[3,"Db"],[3,"Timestamp"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"HeaderStore"],[3,"BlockStore"],[3,"BlockOrderStore"],[3,"Header"],[3,"Block"],[3,"WasmStore"],[3,"ContractStateStore"],[3,"ContractId"],[15,"u8"],[15,"str"],[3,"Tree"],[3,"SlotCheckpointStore"],[3,"TxStore"],[3,"Transaction"],[3,"BlockResponse"],[3,"BlockProposal"],[8,"Read"],[3,"Error"],[3,"BlockOrder"],[8,"Write"],[3,"Formatter"],[6,"Result"],[3,"MerkleNode"],[3,"LeadInfo"],[3,"String"],[3,"Clock"],[3,"Url"],[4,"Ticks"],[3,"MAINNET_GENESIS_HASH_BYTES"],[3,"MAINNET_GENESIS_TIMESTAMP"],[3,"MAINNET_BOOTSTRAP_TIMESTAMP"],[3,"MAINNET_INITIAL_DISTRIBUTION"],[3,"TESTNET_GENESIS_HASH_BYTES"],[3,"TESTNET_GENESIS_TIMESTAMP"],[3,"TESTNET_BOOTSTRAP_TIMESTAMP"],[3,"TESTNET_INITIAL_DISTRIBUTION"],[3,"FLOAT10_NEG_TWO"],[3,"Float10"],[3,"FLOAT10_NEG_ONE"],[3,"FLOAT10_ZERO"],[3,"FLOAT10_ONE"],[3,"FLOAT10_TWO"],[3,"FLOAT10_THREE"],[3,"FLOAT10_FIVE"],[3,"FLOAT10_NINE"],[3,"FLOAT10_TEN"],[3,"KP"],[3,"KI"],[3,"KD"],[3,"PID_OUT_STEP"],[3,"MAX_DER"],[3,"MIN_DER"],[3,"MAX_F"],[3,"MIN_F"],[3,"LeadCoin"],[6,"Base"],[6,"Scalar"],[6,"Point"],[3,"ProvingKey"],[3,"TxRcpt"],[3,"TransferStx"],[3,"BridgeTree"],[3,"LeadCoinSecrets"],[3,"LeadProof"],[3,"Proof"],[3,"Signature"],[3,"PublicKey"],[3,"VerifyingKey"],[3,"ProtocolProposal"],[3,"Arc"],[6,"ChannelPtr"],[6,"ValidatorStatePtr"],[6,"P2pPtr"],[6,"ProtocolBasePtr"],[3,"Executor"],[8,"Future"],[3,"Pin"],[3,"ProtocolSync"],[3,"ProtocolSyncConsensus"],[3,"ProtocolTx"],[3,"EncryptedTxRcpt"],[3,"SecretKey"],[3,"Fork"],[3,"StateCheckpoint"],[3,"ConsensusRequest"],[3,"ConsensusResponse"],[3,"ConsensusSlotCheckpointsResponse"],[3,"SlotCheckpointRequest"],[3,"SlotCheckpointResponse"],[3,"StateCheckpointInfo"],[3,"ForkInfo"],[3,"ConsensusState"],[3,"ConsensusSlotCheckpointsRequest"],[15,"i64"],[3,"Duration"],[3,"Tx"],[4,"Ordering"],[3,"Repr"],[3,"IBig"],[3,"ValidatorState"],[6,"WalletPtr"],[3,"Dht"],[3,"HashSet"],[3,"HashMap"],[3,"Receiver"],[6,"DhtPtr"],[3,"KeyResponse"],[3,"KeyRequest"],[3,"LookupRequest"],[3,"LookupMapResponse"],[3,"LookupMapRequest"],[3,"Protocol"],[3,"Sender"],[4,"Error"],[4,"VerifyFailed"],[4,"ClientFailed"],[3,"InvalidDnsNameError"],[4,"Error"],[4,"ParseError"],[3,"Error"],[3,"FromUtf8Error"],[4,"SocksError"],[3,"Utf8Error"],[3,"Error"],[4,"CompileError"],[4,"Error"],[4,"ExportError"],[3,"SystemTimeError"],[3,"RuntimeError"],[3,"AddrParseError"],[4,"Error"],[4,"FromHexError"],[3,"TimeoutError"],[3,"TryFromSliceError"],[3,"SendError"],[4,"Error"],[4,"Infallible"],[4,"ParseError"],[4,"Error"],[3,"RecvError"],[4,"InstantiationError"],[4,"Error"],[4,"MemoryAccessError"],[3,"ParseFloatError"],[4,"MemoryError"],[3,"SetLoggerError"],[4,"ContractError"],[3,"ParseIntError"],[3,"Demand"],[8,"Error"],[3,"Acceptor"],[8,"TransportListener"],[6,"SessionWeakPtr"],[3,"Mutex"],[3,"Subscription"],[3,"Channel"],[3,"ChannelInfo"],[4,"Value"],[3,"MessageSubsystem"],[8,"TransportStream"],[8,"Message"],[8,"Session"],[6,"SessionBitflag"],[3,"MessageSubscription"],[3,"Connector"],[4,"TransportName"],[6,"SettingsPtr"],[3,"IpRange"],[4,"IpAddr"],[3,"Hosts"],[3,"PingMessage"],[3,"PongMessage"],[3,"GetAddrsMessage"],[3,"AddrsMessage"],[3,"ExtAddrsMessage"],[3,"VersionMessage"],[3,"VerackMessage"],[3,"Packet"],[3,"MessageDispatcher"],[6,"MessageSubscriptionId"],[3,"P2p"],[8,"Clone"],[6,"ConnectedChannels"],[4,"P2pState"],[6,"HostsPtr"],[3,"Settings"],[3,"ProtocolRegistry"],[3,"InboundSession"],[3,"ManualSession"],[3,"OutboundSession"],[3,"ProtocolAddress"],[3,"ProtocolJobsManager"],[6,"ExecutorPtr"],[3,"ProtocolPing"],[15,"u32"],[3,"ProtocolSeed"],[3,"ProtocolVersion"],[3,"InboundInfo"],[3,"Weak"],[4,"OutboundState"],[3,"OutboundInfo"],[3,"SeedSyncSession"],[3,"App"],[3,"SettingsOpt"],[3,"ArgMatches"],[4,"SocketAddr"],[3,"TcpTransport"],[3,"Socket"],[6,"Result"],[3,"TcpStream"],[3,"TcpListener"],[15,"i32"],[3,"TorTransport"],[3,"TorController"],[3,"Socks5Stream"],[3,"UnixTransport"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[4,"SupportedCipherSuite"],[3,"ClientCertificateVerifier"],[6,"DistinguishedNames"],[3,"TlsUpgrade"],[4,"TlsStream"],[3,"Certificate"],[3,"SystemTime"],[3,"ClientCertVerified"],[3,"ServerCertificateVerifier"],[4,"ServerName"],[8,"Iterator"],[3,"ServerCertVerified"],[3,"NetMsg"],[8,"Eq"],[8,"Hash"],[8,"Decodable"],[8,"Encodable"],[3,"Raft"],[3,"NodeId"],[3,"Logs"],[3,"Log"],[3,"RaftSettings"],[3,"LogRequest"],[3,"LogResponse"],[3,"VoteRequest"],[3,"VoteResponse"],[4,"NetMsgMethod"],[3,"DataStore"],[3,"DataTree"],[4,"Role"],[3,"SyncRequest"],[3,"SyncResponse"],[3,"NodeIdMsg"],[3,"BroadcastMsgRequest"],[3,"MapLength"],[3,"ProtocolRaft"],[3,"RpcClient"],[3,"JsonRequest"],[4,"JsonResult"],[6,"SubscriberPtr"],[4,"ErrorCode"],[3,"JsonNotification"],[3,"JsonSubscriber"],[3,"JsonResponse"],[3,"JsonError"],[3,"JsonErrorVal"],[8,"RequestHandler"],[3,"TlsConnector"],[4,"WsStream"],[3,"Context"],[4,"Poll"],[4,"Message"],[3,"DbHandle"],[3,"Batch"],[3,"Env"],[3,"FunctionEnvMut"],[3,"WasmPtr"],[3,"Runtime"],[4,"ContractSection"],[3,"Memory"],[3,"MemoryView"],[3,"Pages"],[3,"StoppableTask"],[6,"SubscriptionId"],[3,"Subscriber"],[3,"RwLock"],[3,"Config"],[8,"Default"],[3,"Config"],[4,"LevelFilter"],[3,"PathBuf"],[8,"Serialize"],[8,"DeserializeOwned"],[3,"Path"],[4,"NetworkName"],[15,"char"],[15,"u16"],[3,"OsString"],[3,"NanoTimestamp"],[4,"DateFormat"],[3,"WalletDb"],[4,"QueryType"],[8,"Field"],[8,"Layouter"],[3,"Advice"],[3,"Column"],[8,"Copy"],[3,"Value"],[3,"AssignedCell"],[3,"ArithChip"],[3,"ArithConfig"],[3,"ConstraintSystem"],[8,"FieldExt"],[3,"IsZeroChip"],[3,"Region"],[3,"IsZeroConfig"],[8,"FnOnce"],[4,"Expression"],[8,"Debug"],[3,"LessThanConfig"],[3,"LessThanChip"],[3,"TableColumn"],[3,"NativeRangeCheckConfig"],[3,"NativeRangeCheckChip"],[3,"SmallRangeCheckConfig"],[3,"SmallRangeCheckChip"],[4,"Assigned"],[3,"Cell"],[3,"Instance"],[3,"Error"],[4,"StackVar"],[3,"StateWord"],[4,"Any"],[3,"Fixed"],[3,"CtOption"],[3,"Choice"],[3,"NamespacedLayouter"],[8,"RngCore"],[3,"BatchVerifier"],[3,"Selector"],[3,"VerifyingKey"],[3,"ProvingKey"],[3,"Params"],[3,"Constraint"],[3,"Constraints"],[3,"PinnedConstraintSystem"],[3,"VirtualCells"],[3,"SingleVerifier"],[3,"PinnedVerificationKey"],[3,"EvaluationDomain"],[3,"Rotation"],[3,"BitSlice"],[4,"BitSpanError"],[3,"VmConfig"],[4,"OrchardFixedBases"],[3,"EccChip"],[4,"OrchardHashDomains"],[4,"OrchardCommitDomains"],[3,"MerkleChip"],[4,"Witness"],[3,"ZkBinary"],[3,"ZkCircuit"],[3,"Pow5Chip"],[3,"Analyzer"],[3,"Constant"],[3,"Variable"],[4,"Var"],[3,"Witness"],[3,"Chars"],[3,"Statement"],[3,"Literal"],[4,"Arg"],[4,"StatementType"],[3,"Compiler"],[4,"VarType"],[3,"ErrorEmitter"],[4,"TokenType"],[3,"Token"],[3,"Lexer"],[4,"Opcode"],[3,"Parser"],[3,"IndexMap"],[3,"Peekable"],[4,"StackType"],[4,"LitType"],[13,"GENESIS"],[13,"NEWSLOT"],[13,"NEWEPOCH"],[8,"ConsensusWallet"],[13,"Io"],[13,"NotEnoughValue"],[13,"InvalidAddress"],[13,"InvalidAmount"],[13,"InternalError"],[13,"VerifyError"],[13,"ParseFailed"],[13,"ParseIntError"],[13,"ParseFloatError"],[13,"UrlParseError"],[13,"UrlParse"],[13,"AddrParseError"],[13,"TryFromSliceError"],[13,"DashuParseError"],[13,"DecodeError"],[13,"EncodeError"],[13,"Utf8Error"],[13,"StrUtf8Error"],[13,"SerdeJsonError"],[13,"TomlDeserializeError"],[13,"Bs58DecodeError"],[13,"HexDecodeError"],[13,"UnsupportedTransport"],[13,"UnsupportedTransportUpgrade"],[13,"BindFailed"],[13,"AcceptConnectionFailed"],[13,"AcceptTlsConnectionFailed"],[13,"SocksError"],[13,"TungsteniteError"],[13,"TorError"],[13,"PlonkError"],[13,"NoteDecryptionFailed"],[13,"RustlsError"],[13,"RustlsInvalidDns"],[13,"RaftError"],[13,"JsonRpcError"],[13,"UnexpectedJsonRpc"],[13,"SqlxError"],[13,"SledError"],[13,"TransactionNotFound"],[13,"HeaderNotFound"],[13,"BlockNotFound"],[13,"SlotNotFound"],[13,"SlotCheckpointNotFound"],[13,"ContractNotFound"],[13,"WasmerCompileError"],[13,"WasmerExportError"],[13,"WasmerRuntimeError"],[13,"WasmerInstantiationError"],[13,"WasmerMemoryError"],[13,"WasmerOomError"],[13,"ContractError"],[13,"ContractInitError"],[13,"ContractExecError"],[13,"Io"],[13,"InfallibleError"],[13,"AsyncChannelSendError"],[13,"AsyncChannelRecvError"],[13,"SetLoggerError"],[13,"ZkasDecoderError"],[13,"BackwardsTime"],[13,"VerifyFailed"],[13,"ClientFailed"],[13,"ClockOutOfSync"],[13,"Custom"],[13,"InvalidCashierOrFaucetKey"],[13,"InvalidMerkle"],[13,"NullifierExists"],[13,"InputSignature"],[13,"ClearInputSignature"],[13,"MintProof"],[13,"BurnProof"],[13,"ProofVerifyFailed"],[13,"InternalError"],[8,"MessageDispatcherInterface"],[8,"ProtocolBase"],[8,"Transport"],[13,"Tcp"],[13,"Tor"],[13,"Nym"],[13,"ServerError"],[13,"Response"],[13,"Error"],[13,"Notification"],[13,"Subscriber"],[13,"Tcp"],[13,"Tls"],[8,"MemoryManipulation"],[8,"ArithInstruction"],[13,"Trivial"],[13,"Rational"],[8,"Circuit"],[8,"VerificationStrategy"],[8,"Assignment"],[8,"FloorPlanner"],[13,"Transcript"],[13,"ColumnNotInPermutation"],[13,"NotEnoughRowsAvailable"],[13,"Constant"],[13,"Selector"],[13,"Negated"],[13,"Sum"],[13,"Product"],[13,"Scaled"],[13,"Fixed"],[13,"Advice"],[13,"Instance"],[4,"Literal"],[13,"Uint64"],[13,"EcPoint"],[13,"EcNiPoint"],[13,"EcFixedPoint"],[13,"EcFixedPointShort"],[13,"EcFixedPointBase"],[13,"Base"],[13,"Scalar"],[13,"MerklePath"],[13,"Uint32"],[13,"Uint64"],[13,"EcPoint"],[13,"EcNiPoint"],[13,"EcFixedPoint"],[13,"Base"],[13,"Scalar"],[13,"MerklePath"],[13,"Uint32"],[13,"Uint64"],[13,"Var"],[13,"Lit"],[13,"Func"],[13,"Constant"],[13,"Witness"],[13,"Variable"]]},\
"darkfi_dao_contract":{"doc":"","t":[17,17,17,17,17,17,4,13,13,13,13,11,11,0,0,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,2,2,2,2,2,2,2,2,2,0,2,0,0,0,3,12,12,11,11,12,12,12,11,11,11,11,11,12,11,12,12,11,11,11,12,12,11,11,11,11,11,11,12,12,11,12,12,3,12,12,11,11,12,11,11,11,11,11,11,11,12,11,11,5,11,12,12,12,11,11,11,11,11,11,11,11,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,11,11,11,11,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,17,3,11,11,12,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DAO_CONTRACT_ZKAS_DAO_EXEC_NS","DAO_CONTRACT_ZKAS_DAO_MINT_NS","DAO_CONTRACT_ZKAS_DAO_PROPOSE_BURN_NS","DAO_CONTRACT_ZKAS_DAO_PROPOSE_MAIN_NS","DAO_CONTRACT_ZKAS_DAO_VOTE_BURN_NS","DAO_CONTRACT_ZKAS_DAO_VOTE_MAIN_NS","DaoFunction","Exec","Mint","Propose","Vote","borrow","borrow_mut","dao_client","dao_model","deref","deref_mut","deserialize","drop","eq","fmt","from","init","into","money_client","note","pointer_metadata","try_from","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","wallet_cache","DAO_COINS_COL_COIN_ID","DAO_COINS_COL_DAO_ID","DAO_COINS_TABLE","DAO_DAOS_COL_APPROVAL_RATIO_BASE","DAO_DAOS_COL_APPROVAL_RATIO_QUOT","DAO_DAOS_COL_BULLA_BLIND","DAO_DAOS_COL_CALL_INDEX","DAO_DAOS_COL_DAO_ID","DAO_DAOS_COL_GOV_TOKEN_ID","DAO_DAOS_COL_LEAF_POSITION","DAO_DAOS_COL_NAME","DAO_DAOS_COL_PROPOSER_LIMIT","DAO_DAOS_COL_QUORUM","DAO_DAOS_COL_SECRET","DAO_DAOS_COL_TX_HASH","DAO_DAOS_TABLE","DAO_PROPOSALS_COL_AMOUNT","DAO_PROPOSALS_COL_BULLA_BLIND","DAO_PROPOSALS_COL_CALL_INDEX","DAO_PROPOSALS_COL_DAO_ID","DAO_PROPOSALS_COL_LEAF_POSITION","DAO_PROPOSALS_COL_OUR_VOTE_ID","DAO_PROPOSALS_COL_PROPOSAL_ID","DAO_PROPOSALS_COL_RECV_PUBLIC","DAO_PROPOSALS_COL_SENDCOIN_TOKEN_ID","DAO_PROPOSALS_COL_SERIAL","DAO_PROPOSALS_COL_TX_HASH","DAO_PROPOSALS_TABLE","DAO_TREES_COL_DAOS_TREE","DAO_TREES_COL_PROPOSALS_TREE","DAO_TREES_TABLE","DAO_VOTES_COL_CALL_INDEX","DAO_VOTES_COL_PROPOSAL_ID","DAO_VOTES_COL_TX_HASH","DAO_VOTES_COL_VOTE_ID","DAO_VOTES_COL_VOTE_OPTION","DAO_VOTES_TABLE","DaoExecCall","DaoInfo","DaoProposalInfo","DaoProposeCall","DaoProposeNote","DaoProposeStakeInput","DaoVoteCall","DaoVoteInput","DaoVoteNote","exec","make_mint_call","mint","propose","vote","DaoExecCall","all_vote_blind","all_vote_value","borrow","borrow_mut","dao","dao_coin_blind","dao_serial","deref","deref_mut","deserialize","drop","from","hook_dao_exec","init","input_value","input_value_blind","into","make","pointer_metadata","proposal","signature_secret","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","user_coin_blind","user_serial","vzip","yes_vote_blind","yes_vote_value","DaoInfo","approval_ratio_base","approval_ratio_quot","borrow","borrow_mut","bulla_blind","clone","clone_into","deref","deref_mut","deserialize","drop","from","gov_token_id","init","into","make_mint_call","pointer_metadata","proposer_limit","public_key","quorum","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","DaoProposalInfo","DaoProposeCall","DaoProposeNote","DaoProposeStakeInput","amount","blind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dao","dao_leaf_position","dao_merkle_path","dao_merkle_root","decode","decode","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","dest","drop","drop","drop","drop","encode","encode","from","from","from","from","init","init","init","init","inputs","into","into","into","into","leaf_position","make","merkle_path","note","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proposal","proposal","secret","serial","signature_secret","to_owned","token_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","DaoVoteCall","DaoVoteInput","DaoVoteNote","all_vote_blind","all_vote_value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","dao","decode","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","encode","from","from","from","init","init","init","inputs","into","into","into","leaf_position","make","merkle_path","note","pointer_metadata","pointer_metadata","pointer_metadata","proposal","secret","signature_secret","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vote_keypair","vote_option","vote_option","vzip","vzip","vzip","yes_vote_blind","yes_vote_blind","0","DaoBlindAggregateVote","DaoBulla","DaoExecParams","DaoExecUpdate","DaoMintParams","DaoMintUpdate","DaoProposeParams","DaoProposeParamsInput","DaoProposeUpdate","DaoVoteParams","DaoVoteParamsInput","DaoVoteUpdate","aggregate","all_vote_commit","blind_total_vote","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","ciphertext","clone","clone","clone_into","clone_into","coin_0","coin_1","dao_bulla","dao_bulla","dao_merkle_root","dao_pubkey","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","ephem_public","ephem_public","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","inner","input_value_commit","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","merkle_root","merkle_root","nullifier","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proposal","proposal","proposal_bulla","proposal_bulla","proposal_bulla","proposal_bulla","proposal_votes","signature_public","signature_public","to_owned","to_owned","to_string","token_commit","token_commit","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","value_commit","vote_commit","vote_nullifiers","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","yes_vote_commit","yes_vote_commit","TransferCall","TransferClearInput","TransferInput","TransferOutput","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_inputs","coin_blind","compute_remainder_blind","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","init","init","init","init","inputs","into","into","into","into","leaf_position","make","merkle_path","note","outputs","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","public","secret","serial","signature_secret","signature_secret","spend_hook","token_id","token_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data","user_data_blind","value","value","value_blind","vzip","vzip","vzip","vzip","AEAD_TAG_SIZE","EncryptedNote2","borrow","borrow_mut","ciphertext","clone","clone_into","decode","decrypt","deref","deref_mut","deserialize","drop","encode","encrypt","ephem_public","eq","equivalent","fmt","from","init","into","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","OwnCoin","WalletCache","borrow","borrow","borrow_mut","borrow_mut","cache","coin","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","get_received","init","init","into","into","leaf_position","new","note","pointer_metadata","pointer_metadata","track","tree","try_decrypt_note","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip"],"q":["darkfi_dao_contract","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_dao_contract::dao_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_dao_contract::dao_client::exec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_dao_contract::dao_client::mint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_dao_contract::dao_client::propose","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_dao_contract::dao_client::vote","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_dao_contract::dao_modeldarkfi_dao_contract::money_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_dao_contract::note","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_dao_contract::wallet_cache","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Transaction building API for clients interacting with DAO …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Transaction building API for clients interacting with …","","","","","","","","","","","Decrypt incoming transaction notes to track coins sent to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides core structs for DAO::propose()","Provides core structs for DAO::vote()","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a single or multiple blinded votes. These can …","","","","","","","","","","","","","All value staked in the vote","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Weighted vote commit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get all coins received by this secret key track() must be …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Must be called at the start to begin tracking received …","The entire Merkle tree state","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,4,4,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,19,19,52,24,19,22,52,24,19,22,19,19,24,24,24,24,19,22,52,24,19,22,52,24,19,22,52,24,19,22,19,52,24,19,22,19,22,52,24,19,22,52,24,19,22,24,52,24,19,22,52,24,52,52,52,24,19,22,24,22,52,19,52,19,19,52,24,19,22,52,24,19,22,52,24,19,22,52,24,19,22,52,24,19,22,52,24,19,22,52,24,19,22,0,0,0,25,25,53,26,25,53,26,25,26,25,53,26,25,53,26,25,53,26,25,53,26,25,25,53,26,25,53,26,25,26,53,26,25,53,26,53,53,53,26,25,26,53,53,53,26,25,53,26,25,53,26,25,53,26,25,53,26,25,53,26,25,26,26,25,53,26,25,26,25,28,0,0,0,0,0,0,0,0,0,0,0,0,27,27,37,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,32,34,28,29,28,29,37,37,30,31,32,30,28,30,31,32,29,33,34,35,36,27,37,38,27,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,32,34,28,28,28,28,28,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,28,37,32,34,28,30,31,32,29,33,34,35,36,27,37,38,29,35,35,28,30,31,32,29,33,34,35,36,27,37,38,37,38,32,33,34,36,36,29,35,28,29,28,32,34,28,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,28,30,31,32,29,33,34,35,36,27,37,38,29,35,36,28,30,31,32,29,33,34,35,36,27,37,38,34,27,0,0,0,0,43,54,55,56,43,54,55,56,43,56,43,43,54,55,56,43,54,55,56,43,54,55,56,43,54,55,56,43,54,55,56,43,54,55,56,43,43,54,55,56,55,43,55,55,43,43,54,55,56,56,55,56,54,55,56,54,56,43,54,55,56,43,54,55,56,43,54,55,56,43,54,55,56,43,54,55,56,43,54,55,56,56,55,54,56,55,43,54,55,56,0,0,44,44,44,44,44,44,44,44,44,44,44,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,48,47,48,47,47,48,47,48,47,48,47,48,47,48,47,48,47,47,48,47,48,47,48,47,48,48,47,47,47,47,48,47,48,47,48,47,48,47,48,47,48,47,48,47],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,[1],[1],[[],[[3,[2]]]],[1],[[4,4],5],[[4,6],7],[[]],[[],1],[[]],0,0,[[]],[8,[[3,[4]]]],[[],3],[[],3],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,[1],[1],[[],[[3,[2]]]],[1],[[]],0,[[],1],0,0,[[]],[[13,14,15],16],[[]],0,0,[[],3],[[],3],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],0,0,[[]],0,0,0,0,0,[[]],[[]],0,[17,17],[[]],[1],[1],[[],[[3,[2]]]],[1],[[]],0,[[],1],[[]],[[17,18,14,15],16],[[]],0,0,0,[[]],[[],3],[[],3],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,19],[[]],0,0,0,0,[20,[[3,[19,21]]]],[20,[[3,[22,21]]]],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],0,[1],[1],[1],[1],[[19,23],[[3,[1,21]]]],[[22,23],[[3,[1,21]]]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],[[]],0,[[24,14,15,14,15],16],0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],9],[[],9],[[],9],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[20,[[3,[25,21]]]],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[[25,23],[[3,[1,21]]]],[[]],[[]],[[]],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],0,[[26,14,15,14,15],16],0,0,[[]],[[]],[[]],0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],9],[[],9],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[27,27]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[28,28],[29,29],[[]],[[]],0,0,0,0,0,0,[20,[[3,[28,21]]]],[20,[[3,[30,21]]]],[20,[[3,[31,21]]]],[20,[[3,[32,21]]]],[20,[[3,[29,21]]]],[20,[[3,[33,21]]]],[20,[[3,[34,21]]]],[20,[[3,[35,21]]]],[20,[[3,[36,21]]]],[20,[[3,[27,21]]]],[20,[[3,[37,21]]]],[20,[[3,[38,21]]]],[[],27],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[28,23],[[3,[1,21]]]],[[30,23],[[3,[1,21]]]],[[31,23],[[3,[1,21]]]],[[32,23],[[3,[1,21]]]],[[29,23],[[3,[1,21]]]],[[33,23],[[3,[1,21]]]],[[34,23],[[3,[1,21]]]],[[35,23],[[3,[1,21]]]],[[36,23],[[3,[1,21]]]],[[27,23],[[3,[1,21]]]],[[37,23],[[3,[1,21]]]],[[38,23],[[3,[1,21]]]],0,0,[[28,28],5],[[],5],[[28,6],7],[[28,6],7],[39,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[28,39],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[],40],0,0,[41,[[3,[28]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],42],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],[[]],0,[[43,14,15,14,15],16],0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],9],[[],9],[[],9],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[]],[[]],0,[44,44],[[]],[20,[[3,[44,21]]]],[[44,18],[[16,[45]]]],[1],[1],[[],[[3,[2]]]],[1],[[44,23],[[3,[1,21]]]],[46,[[16,[44]]]],0,[[44,44],5],[[],5],[[44,6],7],[[]],[[],1],[[]],[[]],[[]],[[],3],[[],3],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],[[]],0,0,[[]],[[]],[[]],[[]],0,0,[[],47],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[[]],[[]],[[47,18],[[49,[48]]]],[[],1],[[],1],[[]],[[]],0,[[],47],0,[[]],[[]],[[47,18]],0,[[47,50,51]],[[],3],[[],3],[[],3],[[],3],[[],9],[[],9],[[[11,[10]]],[[11,[12,10]]]],[[[11,[10]]],[[11,[12,10]]]],[[],12],[[],12],[[],12],[[],12],[[]],[[]]],"p":[[15,"usize"],[3,"With"],[4,"Result"],[4,"DaoFunction"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"DaoExecCall"],[3,"ZkBinary"],[3,"ProvingKey"],[6,"Result"],[3,"DaoInfo"],[3,"SecretKey"],[3,"DaoProposalInfo"],[8,"Read"],[3,"Error"],[3,"DaoProposeNote"],[8,"Write"],[3,"DaoProposeCall"],[3,"DaoVoteNote"],[3,"DaoVoteCall"],[3,"DaoBlindAggregateVote"],[3,"DaoBulla"],[3,"DaoProposeParamsInput"],[3,"DaoMintParams"],[3,"DaoMintUpdate"],[3,"DaoProposeParams"],[3,"DaoProposeUpdate"],[3,"DaoVoteParams"],[3,"DaoVoteParamsInput"],[3,"DaoVoteUpdate"],[3,"DaoExecParams"],[3,"DaoExecUpdate"],[6,"Base"],[3,"String"],[15,"str"],[6,"ValueBlind"],[3,"TransferCall"],[3,"EncryptedNote2"],[8,"Decodable"],[3,"PublicKey"],[3,"WalletCache"],[3,"OwnCoin"],[3,"Vec"],[3,"Coin"],[3,"EncryptedNote"],[3,"DaoProposeStakeInput"],[3,"DaoVoteInput"],[3,"TransferClearInput"],[3,"TransferInput"],[3,"TransferOutput"]]},\
"darkfi_derive":{"doc":"","t":[24,24],"n":["SerialDecodable","SerialEncodable"],"q":["darkfi_derive",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"darkfi_derive_internal":{"doc":"Derive (de)serialization for structs, see src/serial/derive","t":[5,5,0,5,5,5],"n":["enum_de","enum_ser","helpers","struct_de","struct_ser","contains_skip"],"q":["darkfi_derive_internal","","","","","darkfi_derive_internal::helpers"],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":[[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],0,[[5,2],[[4,[3]]]],[[5,2],[[4,[3]]]],[[],6]],"p":[[3,"ItemEnum"],[3,"Ident"],[3,"TokenStream"],[6,"Result"],[3,"ItemStruct"],[15,"bool"]]},\
"darkfi_money_contract":{"doc":"","t":[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,4,13,13,13,13,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,17,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11],"n":["MONEY_CONTRACT_COIN_MERKLE_TREE","MONEY_CONTRACT_COIN_ROOTS_TREE","MONEY_CONTRACT_FAUCET_PUBKEYS","MONEY_CONTRACT_FIXED_SUPPLY_TREE","MONEY_CONTRACT_INFO_TREE","MONEY_CONTRACT_LEAD_COIN_MERKLE_TREE","MONEY_CONTRACT_LEAD_COIN_ROOTS_TREE","MONEY_CONTRACT_LEAD_INFO_TREE","MONEY_CONTRACT_LEAD_NULLIFIERS_TREE","MONEY_CONTRACT_NULLIFIERS_TREE","MONEY_CONTRACT_ZKAS_BURN_NS_V1","MONEY_CONTRACT_ZKAS_LEAD_BURN_NS_V1","MONEY_CONTRACT_ZKAS_LEAD_MINT_NS_V1","MONEY_CONTRACT_ZKAS_MINT_NS_V1","MONEY_CONTRACT_ZKAS_TOKEN_MINT_NS_V1","Mint","MoneyFunction","OtcSwap","Stake","Transfer","Unstake","borrow","borrow_mut","client","deref","deref_mut","deserialize","drop","from","init","into","model","pointer_metadata","try_from","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","0","AEAD_TAG_SIZE","Coin","EncryptedNote","MONEY_COINS_COL_COIN","MONEY_COINS_COL_COIN_BLIND","MONEY_COINS_COL_IS_SPENT","MONEY_COINS_COL_LEAF_POSITION","MONEY_COINS_COL_MEMO","MONEY_COINS_COL_NULLIFIER","MONEY_COINS_COL_SECRET","MONEY_COINS_COL_SERIAL","MONEY_COINS_COL_SPEND_HOOK","MONEY_COINS_COL_TOKEN_BLIND","MONEY_COINS_COL_TOKEN_ID","MONEY_COINS_COL_USER_DATA","MONEY_COINS_COL_VALUE","MONEY_COINS_COL_VALUE_BLIND","MONEY_COINS_TABLE","MONEY_INFO_COL_LAST_SCANNED_SLOT","MONEY_INFO_TABLE","MONEY_KEYS_COL_IS_DEFAULT","MONEY_KEYS_COL_KEY_ID","MONEY_KEYS_COL_PUBLIC","MONEY_KEYS_COL_SECRET","MONEY_KEYS_TABLE","MONEY_TREE_COL_TREE","MONEY_TREE_TABLE","Note","OwnCoin","StakeLeadMintRevealed","TransactionBuilderClearInputInfo","TransactionBuilderInputInfo","TransactionBuilderOutputInfo","TransferBurnRevealed","TransferMintRevealed","UnstakeLeadBurnRevealed","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_half_swap_tx","build_stake_tx","build_transfer_tx","build_unstake_tx","ciphertext","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coin","coin","coin_blind","commitment_root","commitment_x","commitment_x","commitment_y","commitment_y","compute","compute","compute","compute","compute_remainder_blind","create_stake_mint_proof","create_transfer_burn_proof","create_transfer_mint_proof","create_unstake_burn_proof","decode","decode","decode","decode","decrypt","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encrypt","ephem_public","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","init","init","init","init","init","init","init","init","init","init","init","inner","into","into","into","into","into","into","into","into","into","into","into","leaf_position","leaf_position","memo","merkle_path","merkle_root","note","note","nullifier","nullifier","nullifier","pk","pk","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","public_key","secret","secret","serial","signature_public","signature_secret","sk_root","spend_hook","spend_hook","to_owned","to_owned","to_owned","to_owned","to_vec","to_vec","to_vec","to_vec","token_blind","token_commit","token_commit","token_id","token_id","token_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data","user_data_enc","value","value","value","value_blind","value_commit","value_commit","value_commit","value_commit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ClearInput","Input","MoneyStakeParams","MoneyStakeUpdate","MoneyTransferParams","MoneyTransferUpdate","MoneyUnstakeParams","Output","StakedInput","StakedOutput","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear_inputs","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coin","coin_commit_hash","coin_commit_hash","coin_commit_root","coin_pk_hash","coin_pk_hash","coins","coins","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","ephem_public","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","merkle_root","nullifier","nullifier","nullifiers","nullifiers","outputs","outputs","outputs","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","signature_public","signature_public","sk_root","spend_hook","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token_blind","token_blind","token_blind","token_commit","token_commit","token_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_data_enc","value","value_blind","value_commit","value_commit","value_commit","value_commit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["darkfi_money_contract","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_money_contract::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_money_contract::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","zkas burn contract namespace","zkas staking coin burn contract namespace","zkas staking coin mint contract namespace","zkas mint contract namespace","zkas token mint contract namespace","","Functions we allow in this contract","","","","","","","Transaction building API for clients interacting with this …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Structures and object definitions","","","","","","","","","","","Byte length of the AEAD tag of the chacha20 cipher used …","The <code>Coin</code> is represented as a base field element.","The <code>EncryptedNote</code> represents a structure holding the …","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Note</code> holds the inner attributes of a <code>Coin</code>","The <code>OwnCoin</code> is a representation of <code>Coin</code> with its …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build half of the money contract OTC swap transaction …","","Build money contract transfer transaction parameters with …","","Ciphertext of the encrypted <code>Note</code>","","","","","","","","","","The coin hash","Blinding factor for the coin bulla","","","","","","","","","","","","","","","","","","","Attempt to decrypt an <code>EncryptedNote</code> given a secret key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encrypt the note to some given <code>PublicKey</code> using an AEAD …","Ephemeral public key created at the time of encrypting the …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create a <code>Coin</code> type from the given 32 bytes. Returns …","","","","","","","","","","","","Reference the raw inner base field element","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Coin’s leaf position in the Merkle tree of coins","Attached memo (arbitrary data)","","","","The attached Note","","","Coin’s nullifier,","","","","","","","","","","","","","","","","Coin’s secret key","Serial number of the coin, used for the nullifier","","","","","Spend hook used for protocol owned liquidity. Specifies …","","","","","","","","","Blinding factor for the token ID pedersen commitment","","","","","Token ID of the coin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","User data used by protocol when spend hook is enabled.","","","","Value of the coin","Blinding factor for the value pedersen commitment","","","","","","","","","","","","","","","","A transaction’s clear input","A transaction’s anonymous input","Inputs and outputs for staking coins","State update produced by a staking","Inputs and outputs for a payment","State update produced by a payment","Inputs and outputs for unstaking coins","A transaction’s anonymous output","Staked anonymous input","Staked anonymous output","","","","","","","","","","","","","","","","","","","","","The encrypted note ciphertext","Clear inputs","","","","","","","","","","","","","","","","","","","","","Minted coin","Minted coin","Minted coin","coin commitment root","coin pk hash","coin pk hash","Minted coins","Minted coins","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The ephemeral public key","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Anonymous inputs","Anonymous staked inputs","Anonymous inputs","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Revealed Merkle root","Revealed nullifier","Revealed nullifier","Revealed nullifiers","Revealed nullifiers","Anonymous outputs for staking","Anonymous outputs","Anonymous outputs","","","","","","","","","","","Public key for the signature","Public key for the signature","sk root of merkle tree","Spend hook used to invoke other contracts. If this value …","","","","","","","","","","","Token blind to reveal token ID","Token blind to reveal token ID","Blinding factor for <code>token_id</code>","Pedersen commitment for the input’s token ID","Pedersen commitment for the output’s token ID","Input’s token ID","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encrypted user data field. An encrypted commitment to …","Input’s value (amount)","Blinding factor for <code>value</code>","Pedersen commitment for the output’s value","Pedersen commitment for the output’s value","Pedersen commitment for the input’s value","Pedersen commitment for the output’s value","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,5,5,5,5,5,0,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,0,0,0,0,23,20,21,22,23,20,21,22,23,30,21,22,34,33,34,33,34,29,30,33,34,0,0,0,0,0,20,21,22,23,23,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,20,21,22,23,22,23,20,21,22,23,20,21,22,23,20,21,22,23,50,51,52,29,30,33,34,20,20,21,22,23,20,50,51,52,29,30,33,34,20,21,22,23,20,50,51,52,29,30,33,34,20,21,22,23,51,21,22,51,29,51,21,29,34,21,33,34,50,51,52,29,30,33,34,20,21,22,23,52,51,21,22,29,50,34,29,22,20,21,22,23,29,30,33,34,22,29,30,50,52,22,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,50,51,52,29,30,33,34,20,21,22,23,22,29,50,52,22,22,29,30,33,34,50,51,52,29,30,33,34,20,21,22,23,0,0,0,0,0,0,0,0,0,0,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,49,44,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,49,42,43,42,42,43,45,46,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,44,40,41,42,43,44,45,46,47,48,49,48,42,48,45,46,40,41,44,40,41,42,43,44,45,46,47,48,49,47,48,42,48,40,41,42,43,44,45,46,47,48,49,40,41,47,48,49,47,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,40,41,42,43,44,45,46,47,48,49,48,47,47,42,43,48,49,40,41,42,43,44,45,46,47,48,49],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[1],[1],[[],[[3,[2]]]],[1],[[]],[[],1],[[]],0,[[]],[4,[[3,[5]]]],[[],3],[[],3],[[],6],[[[8,[7]]],[[8,[9,7]]]],[[],9],[[],9],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,11,12,11,12,13,14,15,14,15],16],[[13,13,13,14,15,14,15,11],16],[[17,10,11,12,18,18,18,13,14,15,14,15,19],16],[[10,12,14,15,14,15],16],0,[20,20],[21,21],[22,22],[23,23],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[11,12,24,24,18,18,18,18,18,25,26,[28,[27]],25],29],[[11,12,24,24,18,18,18,18,10],30],[[18,18,31,32],33],[[18,24,18,32,18,18,18],34],[[],24],[[14,15,18,32,18,24,24,18,18,18,18],16],[[14,15,11,12,24,24,18,18,18,18,18,25,26,[28,[27]],25],16],[[14,15,11,12,24,24,18,18,18,18,10],16],[[14,15,18,24,24,18,18,18,26,[28,[27]],[28,[27]],32,18,26,11,18,18],16],[35,[[3,[20,36]]]],[35,[[3,[21,36]]]],[35,[[3,[22,36]]]],[35,[[3,[23,36]]]],[[23,25],[[16,[22]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[20,37],[[3,[1,36]]]],[[21,37],[[3,[1,36]]]],[[22,37],[[3,[1,36]]]],[[23,37],[[3,[1,36]]]],[[22,10],[[16,[23]]]],0,[[20,20],19],[[21,21],19],[[22,22],19],[[23,23],19],[[],19],[[],19],[[],19],[[],19],[[20,38],39],[[21,38],39],[[22,38],39],[[23,38],39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,20],[[]],[[]],[[]],[[]],[[],[[16,[20]]]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[20,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[29,[[28,[18]]]],[30,[[28,[18]]]],[33,[[28,[18]]]],[34,[[28,[18]]]],0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[35,[[3,[40,36]]]],[35,[[3,[41,36]]]],[35,[[3,[42,36]]]],[35,[[3,[43,36]]]],[35,[[3,[44,36]]]],[35,[[3,[45,36]]]],[35,[[3,[46,36]]]],[35,[[3,[47,36]]]],[35,[[3,[48,36]]]],[35,[[3,[49,36]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[40,37],[[3,[1,36]]]],[[41,37],[[3,[1,36]]]],[[42,37],[[3,[1,36]]]],[[43,37],[[3,[1,36]]]],[[44,37],[[3,[1,36]]]],[[45,37],[[3,[1,36]]]],[[46,37],[[3,[1,36]]]],[[47,37],[[3,[1,36]]]],[[48,37],[[3,[1,36]]]],[[49,37],[[3,[1,36]]]],0,[[40,38],39],[[41,38],39],[[42,38],39],[[43,38],39],[[44,38],39],[[45,38],39],[[46,38],39],[[47,38],39],[[48,38],39],[[49,38],39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[[8,[7]]],[[8,[9,7]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[15,"usize"],[3,"With"],[4,"Result"],[15,"u8"],[4,"MoneyFunction"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"PublicKey"],[15,"u64"],[3,"TokenId"],[6,"MerkleTree"],[3,"ZkBinary"],[3,"ProvingKey"],[6,"Result"],[3,"Keypair"],[6,"Base"],[15,"bool"],[3,"Coin"],[3,"OwnCoin"],[3,"Note"],[3,"EncryptedNote"],[6,"ValueBlind"],[3,"SecretKey"],[3,"Position"],[3,"MerkleNode"],[3,"Vec"],[3,"TransferBurnRevealed"],[3,"TransferMintRevealed"],[6,"Scalar"],[6,"Point"],[3,"StakeLeadMintRevealed"],[3,"UnstakeLeadBurnRevealed"],[8,"Read"],[3,"Error"],[8,"Write"],[3,"Formatter"],[6,"Result"],[3,"MoneyStakeParams"],[3,"MoneyUnstakeParams"],[3,"StakedInput"],[3,"StakedOutput"],[3,"MoneyTransferParams"],[3,"MoneyTransferUpdate"],[3,"MoneyStakeUpdate"],[3,"ClearInput"],[3,"Input"],[3,"Output"],[3,"TransactionBuilderClearInputInfo"],[3,"TransactionBuilderInputInfo"],[3,"TransactionBuilderOutputInfo"]]},\
"darkfi_sdk":{"doc":"","t":[2,0,0,14,0,0,2,0,0,2,14,2,2,0,0,12,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,0,11,11,11,11,11,11,11,2,11,11,11,0,0,0,0,0,11,0,11,0,0,2,2,2,0,11,11,0,11,11,11,11,0,0,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,2,17,17,17,17,17,2,2,2,2,0,0,0,17,13,17,13,17,17,17,17,13,3,13,17,4,4,13,17,17,17,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,12,17,17,17,5,17,17,17,5,17,17,17,5,17,17,17,5,17,17,17,5,17,17,17,5,17,13,13,17,17,17,17,13,13,13,4,4,11,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,5,5,12,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,6,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,17,17,5,5,5,5,5,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,16,16,16,16,18,18,8,8,8,16,8,8,18,8,16,18,16,16,16,10,10,10,10,11,10,11,10,10,10,10,11,11,10,10,10,10,10,11,10,10,10,10,11,11,10,10,10,10,11,10,10,10,10,10,10,10,10,6,6,5,5,8,8,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,10,11,12,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,6,6,6,6,17,17,17,17,17,17,17,17,6,17,5,5,5,5,5,5,5,5,5,5,5,5,17,5,17,17,13,4,6,13,17,17,17,17,17,17,17,13,13,13,13,13,13,13,6,17,17,17,13,13,13,17,13,17,13,17,13,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,12,12,5,5,5,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["ContractCall","crypto","db","define_contract","entrypoint","error","incrementalmerkletree","log","merkle","merkle_add","msg","pasta","set_return_data","tx","util","0","Coin","ContractId","DAO_CONTRACT_ID","DAO_CONTRACT_ID","DARK_TOKEN_ID","DARK_TOKEN_ID","Keypair","MONEY_CONTRACT_ID","MONEY_CONTRACT_ID","MerkleNode","MerklePosition","MerkleTree","Nullifier","PublicKey","SecretKey","TokenId","ValueBlind","ValueCommit","add","add_assign","all_altitudes_required","altitudes_required","borrow","borrow_mut","clone","clone_into","cmp","coin","constants","contract_id","decode","deref","deref_mut","deserialize","diffie_hellman","drop","encode","eq","fmt","from","from","hash","incrementalmerkletree","init","into","is_complete","keypair","merkle_node","merkle_prelude","mimc_vdf","nullifier","ommer_altitudes","pallas","partial_cmp","pasta_prelude","pedersen","pedersen_commitment_base","pedersen_commitment_u64","poseidon_hash","schnorr","serialize","to_owned","token_id","try_from","try_from","try_into","type_id","util","vesta","vzip","zero","0","Coin","borrow","borrow_mut","clone","clone_into","decode","deref","deref_mut","drop","encode","eq","fmt","fmt","from","from","from_bytes","from_str","init","inner","into","to_bytes","to_owned","to_string","try_from","try_into","type_id","vzip","BLOCK_HASH_DOMAIN","DRK_SCHNORR_DOMAIN","H","L_ORCHARD_BASE","L_ORCHARD_SCALAR","L_VALUE","MERKLE_DEPTH","MERKLE_DEPTH_ORCHARD","NullifierK","OrchardFixedBases","OrchardFixedBasesFull","ValueCommitV","fixed_bases","sinsemilla","util","COMMIT_IVK_PERSONALIZATION","CommitIvkR","FIXED_BASE_WINDOW_SIZE","Full","H","NOTE_COMMITMENT_PERSONALIZATION","NUM_WINDOWS","NUM_WINDOWS_SHORT","NoteCommitR","NullifierK","NullifierK","ORCHARD_PERSONALIZATION","OrchardFixedBases","OrchardFixedBasesFull","SpendAuthG","VALUE_COMMITMENT_PERSONALIZATION","VALUE_COMMITMENT_R_BYTES","VALUE_COMMITMENT_V_BYTES","ValueCommitR","ValueCommitV","ValueCommitV","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","commit_ivk_r","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generator","generator","generator","init","init","init","init","into","into","into","into","note_commit_r","nullifier_k","spend_auth_g","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u","u","u","value_commit_r","value_commit_v","vzip","vzip","vzip","vzip","z","z","z","0","GENERATOR","U","Z","generator","GENERATOR","U","Z","generator","GENERATOR","U","Z","generator","GENERATOR","U","Z","generator","GENERATOR","U","Z","generator","GENERATOR","U_SHORT","Z_SHORT","generator","C","CommitIvk","CommitIvk","INV_TWO_POW_K","K","L_ORCHARD_MERKLE","MERKLE_CRH_PERSONALIZATION","MerkleCrh","NoteCommit","NoteCommit","OrchardCommitDomains","OrchardHashDomains","Q","Q_COMMIT_IVK_M_GENERATOR","Q_MERKLE_CRH","Q_NOTE_COMMITMENT_M_GENERATOR","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","hash_domain","i2lebsp_k","init","init","into","into","lebs2ip_k","r","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","gen_const_array","gen_const_array_with_default","i2lebsp","0","ContractId","DAO_CONTRACT_ID","MONEY_CONTRACT_ID","__private_field","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decode","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","derive","drop","drop","drop","encode","eq","fmt","fmt","from","from","from","from","from_bytes","hash_state_id","init","init","init","inner","into","into","into","to_bytes","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","KDF_SAPLING_PERSONALIZATION","kdf_sapling","sapling_ka_agree","0","0","Keypair","PublicKey","SecretKey","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","encode","encode","encode","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bytes","from_bytes","from_secret","from_str","from_str","init","init","init","inner","inner","into","into","into","new","public","random","random","secret","sign","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","x","xy","y","0","EMPTY_ROOTS","MerkleNode","MerkleTree","UNCOMMITTED_ORCHARD","__private_field","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","combine","conditional_select","decode","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty_leaf","empty_root","encode","eq","fmt","fmt","from","from","from","from","from_bytes","from_str","init","init","init","inner","into","into","into","new","partial_cmp","to_bytes","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Hashable","Tree","append","authentication_path","checkpoint","combine","current_leaf","current_position","empty_leaf","empty_root","garbage_collect","get_witnessed_leaf","remove_witness","rewind","root","witness","witnessed_positions","L_FERMAT_EXPONENT","MODULUS","backward_mimc","calculate_round_constants","eval","forward_mimc","verify","0","Nullifier","borrow","borrow_mut","clone","clone_into","decode","deref","deref_mut","drop","encode","eq","fmt","fmt","from","from","from_bytes","from_str","init","inner","into","to_bytes","to_owned","to_string","try_from","try_into","type_id","vzip","Affine","Base","Point","Scalar","AffineExt","AffineRepr","Base","Base","CAPACITY","CURVE_ID","Curve","CurveAffine","CurveExt","CurveExt","Field","Group","NUM_BITS","PrimeField","Repr","S","Scalar","ScalarExt","ScalarExt","a","a","b","b","batch_normalize","coordinates","cube","double","double","endo","from_repr","from_repr_vartime","from_str_vartime","from_xy","generator","hash_to_curve","identity","invert","is_even","is_identity","is_odd","is_on_curve","is_on_curve","is_zero","is_zero_vartime","jacobian_coordinates","multiplicative_generator","new_jacobian","one","pow_vartime","random","random","root_of_unity","sqrt","square","to_affine","to_repr","zero","ValueBlind","ValueCommit","pedersen_commitment_base","pedersen_commitment_u64","SchnorrPublic","SchnorrSecret","Signature","borrow","borrow_mut","clone","clone_into","commit","decode","deref","deref_mut","drop","dummy","encode","eq","fmt","from","init","into","response","sign","to_owned","try_from","try_into","type_id","verify","vzip","0","DARK_TOKEN_ID","TokenId","__private_field","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decode","deref","deref","deref","deref_mut","deref_mut","derive","drop","drop","encode","eq","fmt","fmt","from","from","from","from_bytes","init","init","inner","into","into","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","hash_to_scalar","mod_r_p","poseidon_hash","Affine","Base","Point","Scalar","CALLER_ACCESS_DENIED","DB_CONTAINS_KEY_FAILED","DB_DEL_FAILED","DB_GET_FAILED","DB_INIT_FAILED","DB_LOOKUP_FAILED","DB_SET_FAILED","DB_SUCCESS","DbHandle","SMART_CONTRACT_ZKAS_DB_NAME","db_contains_key","db_contains_key_","db_del","db_del_","db_get","db_get_","db_init","db_init_","db_lookup","db_lookup_","db_set","db_set_","SUCCESS","deserialize","CALLER_ACCESS_DENIED","CUSTOM_ZERO","CallerAccessDenied","ContractError","ContractResult","Custom","DB_CONTAINS_KEY_FAILED","DB_DEL_FAILED","DB_GET_FAILED","DB_INIT_FAILED","DB_LOOKUP_FAILED","DB_NOT_FOUND","DB_SET_FAILED","DbContainsKeyFailed","DbDelFailed","DbGetFailed","DbInitFailed","DbLookupFailed","DbNotFound","DbSetFailed","GenericResult","INTERNAL_ERROR","INVALID_FUNCTION","IO_ERROR","Internal","InvalidFunction","IoError","NULLIFIER_EXIST_CHECK","NullifierExistCheck","SET_RETVAL_ERROR","SetRetvalError","UPDATE_ALREADY_SET","UpdateAlreadySet","VALID_MERKLE_CHECK","ValidMerkleCheck","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","from","from","from","init","into","provide","to_builtin","to_owned","to_string","try_from","try_into","type_id","vzip","0","0","drk_log","merkle_add","merkle_add_","ContractCall","borrow","borrow_mut","clone","clone_into","contract_id","data","decode","deref","deref_mut","drop","encode","eq","fmt","from","init","into","to_owned","try_from","try_into","type_id","vzip","get_object_bytes","get_object_bytes_","get_object_size","get_object_size_","put_object_bytes","put_object_bytes_","set_return_data","set_return_data_"],"q":["darkfi_sdk","","","","","","","","","","","","","","","darkfi_sdk::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::coin","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::constants","","","","","","","","","","","","","","","darkfi_sdk::crypto::constants::fixed_bases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::constants::fixed_bases::OrchardFixedBases","darkfi_sdk::crypto::constants::fixed_bases::commit_ivk_r","","","","darkfi_sdk::crypto::constants::fixed_bases::note_commit_r","","","","darkfi_sdk::crypto::constants::fixed_bases::nullifier_k","","","","darkfi_sdk::crypto::constants::fixed_bases::spend_auth_g","","","","darkfi_sdk::crypto::constants::fixed_bases::value_commit_r","","","","darkfi_sdk::crypto::constants::fixed_bases::value_commit_v","","","","darkfi_sdk::crypto::constants::sinsemilla","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::constants::util","","","darkfi_sdk::crypto::contract_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::diffie_hellman","","","darkfi_sdk::crypto::keypair","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::merkle_node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::merkle_prelude","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::mimc_vdf","","","","","","","darkfi_sdk::crypto::nullifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::pallas","","","","darkfi_sdk::crypto::pasta_prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::pedersen","","","","darkfi_sdk::crypto::schnorr","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::token_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::crypto::util","","","darkfi_sdk::crypto::vesta","","","","darkfi_sdk::db","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::entrypoint","","darkfi_sdk::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::error::ContractError","","darkfi_sdk::log","darkfi_sdk::merkle","","darkfi_sdk::tx","","","","","","","","","","","","","","","","","","","","","","darkfi_sdk::util","","","","","","",""],"d":["","Crypto-related definitions This module contains a bit more …","Database functions","","Entrypoint used for the wasm binaries","Error handling","","Logging infrastructure","Merkle","","Print a message to the log","","","Transaction structure","Utilities","","","","","","","","","","","","A type representing the position of a leaf in a Merkle …","","","","","","","","","","Returns the altitude of each cousin and/or ommer required …","Returns the altitude of each cousin and/or ommer required …","","","","","","Coin definitions and methods","Cryptographic constants","Contract ID definitions and methods","","","","","Diffie-Hellman techniques","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Returns whether the binary tree having <code>self</code> as the …","Keypairs, secret keys, and public keys","Merkle node definitions","","MiMC VDF …","Nullifier definitions","Returns the altitude of each populated ommer.","The Pallas and iso-Pallas elliptic curve groups.","","Convenience module to import all the pasta traits. You …","Pedersen commitment utilities","","","","Schnorr signature traits","","","Token ID definitions and methods","","","","","Miscellaneous utilities","The Vesta and iso-Vesta elliptic curve groups.","","Returns the position of the first leaf in the tree.","","The <code>Coin</code> is represented as a base field element.","","","","","","","","","","","","","Returns the argument unchanged.","","Try to create a <code>Coin</code> type from the given 32 bytes. Returns …","Tries to decode a base58 string into a <code>Coin</code> type. This …","","Reference the raw inner base field element","Calls <code>U::from(self)</code>.","Convert the <code>Coin</code> type into 32 raw bytes","","","","","","","Domain prefix used for block hashes, with <code>hash_to_curve</code>.","Domain prefix used for Schnorr signatures, with …","","$\\\\ell^\\\\mathsf{Orchard}_\\\\mathsf{base}$","$\\\\ell^\\\\mathsf{Orchard}_\\\\mathsf{scalar}$","$\\\\ell_\\\\mathsf{value}$","","","","","","","Orchard fixed bases.","Sinsemilla generators","","SWU hash-to-curve personalization for the IVK commitment …","","Window size for fixed-base scalar multiplication","","$2^{<code>FIXED_BASE_WINDOW_SIZE</code>}$","SWU hash-to-curve personalization for the note commitment …","Number of windows for a full-width scalar","Number of windows for a short signed scalar","","NullifierK is used in scalar mul with a base field element.","","SWU hash-to-curve personalization for the spending key …","","The Orchard fixed bases used in scalar mul with full-width …","","SWU hash-to-curve personalization for the value commitment …","SWU hash-to-curve value for the value commitment generator","SWU hash-to-curve value for the value commitment generator","","ValueCommitV is used in scalar mul with a short signed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generator used in SinsemillaCommit randomness for IVK …","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","Generator used in SinsemillaCommit randomness for note …","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","The value commitment is used to check balance between …","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","The value commitment is used to check balance between …","Full-width u-values for GENERATOR","Full-width z-values for GENERATOR","","The value commitment is used to check balance between …","Short signed u-values for GENERATOR","Short signed z-values for GENERATOR","","The largest integer such that $2^c \\\\leq (r_P - 1) / 2$, …","","","$\\\\frac{1}{2^K}$","Number of bits of each message piece in …","$\\\\ell^\\\\mathsf{Orchard}_\\\\mathsf{Merkle}$","SWU hash-to-curve personalization for the Merkle CRH …","","","","","","","Generator used in SinsemillaHashToPoint for IVK commitment","Generator used in SinsemillaHashToPoint for Merkle …","Generator used in SinsemillaHashToPoint for note commitment","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","The sequence of K bits in little-endian order representing …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes in an FnMut closure and returns a constant-length …","","The sequence of bits representing a u64 in little-endian …","","ContractId represents an on-chain identifier for a certain …","Contract ID for the native DAO contract","Contract ID for the native money contract","","","","","","","","","","","","","","","","","","","","Derive a contract ID from a <code>SecretKey</code> (deploy key)","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a <code>ContractId</code> object from given bytes.","<code>blake3(self || tree_name)</code> is used in datbases to have a …","","","","Get the inner <code>pallas::Base</code> element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert a <code>ContractId</code> object to its byte representation","","","","","","","","","","","","","","","","","Sapling KDF for note encryption.","Sapling key agreement for note encryption. Implements …","","","Keypair structure holding a <code>SecretKey</code> and its respective …","Structure holding a public key, wrapping a <code>pallas::Point</code> …","Structure holding a secret key, wrapping a <code>pallas::Base</code> …","","","","","","","","","","","","","","","","Default Keypair used in genesis block generation","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Instantiate a <code>SecretKey</code> given 32 bytes. Returns an error …","Instantiate a <code>PublicKey</code> given 32 bytes. Returns an error …","Derive a new <code>PublicKey</code> object given a <code>SecretKey</code>","Tries to create a <code>SecretKey</code> object from a base58 encoded …","Tries to create a <code>PublicKey</code> object from a base58 encoded …","","","","Get the inner object wrapped by <code>SecretKey</code>","Get the inner object wrapped by <code>PublicKey</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Instantiate a new <code>Keypair</code> given a <code>SecretKey</code>","","Generate a new <code>Keypair</code> object given a source of randomness","Generate a new <code>SecretKey</code> given a source of randomness","","","Downcast the <code>PublicKey</code> to 32 bytes of <code>pallas::Point</code>","","","","","","","","","","","","","","","","","","","Fetch the <code>x</code> coordinate of this <code>PublicKey</code>","Fetch the <code>x</code> and <code>y</code> coordinates of this <code>PublicKey</code> as a tuple","Fetch the <code>y</code> coordinate of this <code>PublicKey</code>","","","The <code>MerkleNode</code> is represented as a base field element.","","","","","","","","","","","","","","Implements <code>MerkleCRH^Orchard</code> as defined in …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Try to create a <code>MerkleNode</code> type from the given 32 bytes. …","Tries to decode a base58 string into a <code>MerkleNode</code> type. …","","","","Reference the raw inner base field element","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert the <code>MerkleNode</code> type into 32 raw bytes","","","","","","","","","","","","","","","A trait describing the operations that make a value  …","A Merkle tree that supports incremental appends, …","Appends a new value to the tree at the next available slot.","Obtains an authentication path to the value at the …","Creates a new checkpoint for the current tree state. It is …","","Returns the most recently appended leaf value.","Returns the most recently appended leaf value.","","","Remove state from the tree that no longer needs to be …","Returns the leaf at the specified position if the tree can …","Marks the value at the specified position as a value we’…","Rewinds the tree state to the previous checkpoint, and …","Obtains the root of the Merkle tree at the specified …","Marks the current leaf as one for which we’re interested …","Return a set of all the positions for which we have …","An exponent to perform inverse of x^3 on prime field based …","Modulus of prime field 2^256 - 2^32 * 351 + 1","Executes <code>num_steps</code> of MiMC-calculation in backward …","Calculates set of round constants to perform …","Performs an Eval() step of the MiMC-based VDF","Executes <code>num_steps</code> of MiMC-calculation in forward …","Performs a Verify() step for the MiMC-based VDF result","","The <code>Nullifier</code> is represented as a base field element.","","","","","","","","","","","","","Returns the argument unchanged.","","Try to create a <code>Nullifier</code> type from the given 32 bytes. …","Tries to decode a base58 string into a <code>Nullifier</code> type. …","","Reference the raw inner base field element","Calls <code>U::from(self)</code>.","Convert the <code>Nullifier</code> type into 32 raw bytes","","","","","","","A Pallas point in the affine coordinate space (or the …","The base field of the Pallas and iso-Pallas curves.","A Pallas point in the projective coordinate space.","The scalar field of the Pallas and iso-Pallas curves.","The affine version of the curve","The affine representation for this elliptic curve.","The base field over which this elliptic curve is …","The base field over which this elliptic curve is …","How many bits of information can be reliably stored in the …","CURVE_ID used for hash-to-curve.","Efficient representation of an elliptic curve point …","This trait is the affine counterpart to <code>Curve</code> and is used …","This trait is a common interface for dealing with elements …","The projective form of the curve","This trait represents an element of a field.","This trait represents an element of a cryptographic group.","How many bits are needed to represent an element of this …","This represents an element of a prime field.","The prime field can be converted back and forth into this …","An integer <code>s</code> satisfying the equation <code>2^s * t = modulus - 1</code> …","Scalars modulo the order of this group’s scalar field.","The scalar field of this elliptic curve.","The scalar field of this elliptic curve.","Returns the curve constant a.","Returns the curve constant $a$.","Returns the curve constant b.","Returns the curve constant $b$.","Converts a batch of projective elements into affine …","Gets the coordinates of this point.","Cubes this element.","Doubles this element.","Doubles this element.","Apply the curve endomorphism by multiplying the …","Attempts to convert a byte representation of a field …","Attempts to convert a byte representation of a field …","Interpret a string of numbers as a (congruent) prime field …","Obtains a point given $(x, y)$, failing if it is not on the","Returns a fixed generator of the prime-order subgroup.","Requests a hasher that accepts messages and returns …","Returns the additive identity, also known as the “…","Computes the multiplicative inverse of this element, …","Returns true iff this element is even.","Determines if this point is the identity.","Returns true iff this element is odd.","Returns whether or not this element is on the curve; should","Returns whether or not this element is on the curve; should","Returns true iff this element is zero.","Returns true iff this element is zero.","Return the Jacobian coordinates of this point.","Returns a fixed multiplicative generator of <code>modulus - 1</code> …","Obtains a point given Jacobian coordinates $X : Y : Z$, …","Returns the one element of the field, the multiplicative …","Exponentiates <code>self</code> by <code>exp</code>, where <code>exp</code> is a little-endian …","Returns an element chosen uniformly at random using a …","Returns an element chosen uniformly at random from the …","Returns the <code>2^s</code> root of unity.","Returns the square root of the field element, if it is …","Squares this element.","Converts this element into its affine representation.","Converts an element of the prime field into the standard …","Returns the zero element of the field, the additive …","","","Pedersen commitment for a full-width base field element.","Pedersen commitment for a 64-bit value, in the base field.","Trait for public keys that implements a signature …","Trait for secret keys that implements a signature creation","Schnorr signature with a commit and response","","","","","","","","","","Return a dummy identity <code>Signature</code>","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Sign a given message, using <code>rng</code> as source of randomness.","","","","","Verify a given message is valid given a signature.","","","Native DARK token ID","TokenId represents an on-chain identifier for a certain …","","","","","","","","","","","","","","Derives a <code>TokenId</code> given a <code>SecretKey</code> (mint authority)","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Create a <code>TokenId</code> object from given bytes, erroring if the …","","","Get the inner <code>pallas::Base</code> element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hash <code>a</code> and <code>b</code> together with a prefix <code>persona</code> and return a …","Converts from pallas::Base to pallas::Scalar (aka $x …","Wrapper around poseidon in <code>halo2_gadgets</code>","A Vesta point in the affine coordinate space (or the point …","The base field of the Vesta and iso-Vesta curves.","A Vesta point in the projective coordinate space.","The scalar field of the Vesta and iso-Vesta curves.","","","","","","","","","","","Everyone can call this. Checks if a key is contained in …","","Only update() can call this. Removes a key from the db.","","Everyone can call this. Will read a key from the key-value …","","Only deploy() can call this. Creates a new database …","","","","Only update() can call this. Set a value within the …","","Success exit code for a contract","Deserialize a given payload in <code>entrypoint</code> The return …","","","","Error codes available in the contract.","","Allows on-chain programs to implement contract-specific …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Builtin return values occupy the upper 32 bits","","","","","","","","","","","","A ContractCall is the part of a transaction that executes …","","","","","ID of the contract invoked","Call data passed to the contract","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,1,1,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,21,0,0,0,0,22,0,21,0,0,0,22,0,0,0,22,0,21,21,22,23,24,21,22,23,24,21,22,23,24,21,22,23,24,0,21,22,23,24,21,22,23,24,21,22,23,24,21,22,23,24,21,22,23,24,21,21,21,21,22,23,24,22,23,24,21,22,23,24,21,22,23,24,0,0,0,21,22,23,24,21,22,23,24,21,22,23,24,21,22,23,24,22,23,24,0,0,21,22,23,24,22,23,24,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,27,28,0,0,27,0,0,0,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,28,0,27,28,27,28,0,28,27,28,27,28,27,28,27,28,27,28,0,0,0,32,0,0,0,33,34,33,34,32,33,34,32,32,32,32,33,33,34,34,32,33,34,32,32,33,34,32,32,32,32,32,33,34,32,32,32,32,33,34,32,32,33,34,32,32,32,32,33,34,32,32,33,34,32,33,34,32,33,34,32,0,0,0,35,37,0,0,0,39,35,37,39,35,37,39,35,37,39,35,37,39,35,37,39,39,35,37,39,35,37,39,35,37,39,35,37,39,35,37,39,35,35,37,37,39,35,35,37,37,35,37,37,35,37,39,35,37,35,37,39,35,37,39,39,39,35,39,35,37,39,35,37,35,37,39,35,37,39,35,37,39,35,37,37,39,35,37,37,37,37,42,0,0,0,0,44,45,44,45,42,44,45,42,42,42,42,42,42,42,44,44,45,45,42,44,45,42,44,45,42,42,42,42,42,42,42,44,45,42,42,42,42,44,45,42,42,44,45,42,42,42,42,42,42,44,45,42,44,45,42,44,45,42,44,45,42,0,0,68,68,68,69,68,68,69,69,68,68,68,68,68,68,68,0,0,0,0,0,0,0,49,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,0,0,70,71,70,72,73,70,0,0,0,72,0,0,73,0,73,73,74,70,72,70,72,70,72,71,72,75,75,74,70,73,73,73,72,74,70,74,75,73,74,73,70,72,75,75,70,73,70,75,75,75,74,73,75,75,71,73,75,0,0,0,0,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,76,41,41,41,41,77,41,57,0,0,58,58,57,58,57,57,57,57,58,58,57,58,57,57,58,57,57,57,57,57,58,57,57,57,58,57,57,58,57,57,57,58,57,57,58,57,58,57,58,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,36,0,0,0,0,0,0,0,36,36,36,36,36,36,36,0,0,0,0,36,36,36,0,36,0,36,0,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,36,36,36,36,36,36,78,79,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,2]],[1,3],[1,3],[[]],[[]],[1,1],[[]],[[1,1],4],0,0,0,[[],[[6,[1,5]]]],[2],[2],[[],[[6,[1]]]],0,[2],[1,[[6,[2,5]]]],[[1,1],7],[[1,8],[[6,[9]]]],[2,1],[[]],[1],0,[[],2],[[]],[[1,10],7],0,0,0,0,0,[1,3],0,[[1,1],[[11,[4]]]],0,0,0,0,0,0,[1,6],[[]],0,[[],6],[12,[[6,[1]]]],[[],6],[[],13],0,0,[[]],[[],1],0,0,[[]],[[]],[14,14],[[]],[15,[[6,[14,5]]]],[2],[2],[2],[[14,16],[[6,[2,5]]]],[[14,14],7],[[14,8],17],[[14,8],17],[[]],[18,14],[[],[[11,[14]]]],[19,[[6,[14]]]],[[],2],[14,18],[[]],[14],[[]],[[],20],[[],6],[[],6],[[],13],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[22,22],[23,23],[24,24],[[]],[[]],[[]],[[]],0,[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[21,21],7],[[22,22],7],[[23,23],7],[[24,24],7],[[21,8],17],[[22,8],17],[[23,8],17],[[24,8],17],[[]],[22,21],[24,21],[23,21],[[]],[[]],[[]],[22,25],[23,25],[24,25],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],13],[[],13],[[],13],[[],13],[22,26],[23,26],[24,26],0,0,[[]],[[]],[[]],[[]],[22,[[26,[12]]]],[23,[[26,[12]]]],[24,[[26,[12]]]],0,0,0,0,[[],25],0,0,0,[[],25],0,0,0,[[],25],0,0,0,[[],25],0,0,0,[[],25],0,0,0,[[],25],0,0,0,0,0,0,0,0,0,0,0,0,[27,25],0,0,0,[[]],[[]],[[]],[[]],[27,27],[28,28],[[]],[[]],[2],[2],[2],[2],[2],[2],[[27,27],7],[[28,28],7],[[27,8],17],[[28,8],17],[[]],[[]],[28,27],[2],[[],2],[[],2],[[]],[[]],[[],29],[28,22],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],13],[[],13],[[]],[[]],[30],[[31,30]],[12],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[[]],[15,[[6,[32,5]]]],[2],[33,32],[2],[34,32],[2],[2],[2],[2],[35,32],[2],[2],[2],[[32,16],[[6,[2,5]]]],[[32,32],7],[[32,8],17],[[32,8],17],[[]],[[]],[[]],[18,32],[[],[[6,[32,36]]]],[[32,19]],[[],2],[[],2],[[],2],[32,18],[[]],[[]],[[]],[32],[[]],[[],20],[[],6],[[],6],[[],6],[19,[[6,[32]]]],[[],6],[[],6],[[],6],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,[[37,37],38],[[35,37],37],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[35,35],[37,37],[[]],[[]],[[]],[15,[[6,[39,5]]]],[15,[[6,[35,5]]]],[15,[[6,[37,5]]]],[[],39],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[39,16],[[6,[2,5]]]],[[35,16],[[6,[2,5]]]],[[37,16],[[6,[2,5]]]],[[39,39],7],[[35,35],7],[[37,37],7],[[39,8],17],[[35,8],17],[[35,8],17],[[37,8],17],[[37,8],17],[[]],[[]],[18,35],[40,37],[[]],[[],[[6,[35,36]]]],[[],[[6,[37,36]]]],[35,37],[19,[[6,[35]]]],[19,[[6,[37]]]],[[],2],[[],2],[[],2],[35,18],[37,40],[[]],[[]],[[]],[35,39],0,[[],39],[[],35],0,[35,41],[37],[[]],[[]],[[]],[[],20],[[],20],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],13],[[],13],[[],13],[[37,41],7],[[]],[[]],[[]],[37,18],[37],[37,18],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[42,42],[[]],[[42,42],4],[[10,42,42],42],[[42,42,43],42],[15,[[6,[42,5]]]],[2],[44,18],[2],[45,26],[2],[2],[2],[2],[2],[2],[2],[[],42],[10,42],[[42,16],[[6,[2,5]]]],[[42,42],7],[[42,8],17],[[42,8],17],[[]],[[]],[18,42],[[]],[[],[[11,[42]]]],[19,[[6,[42]]]],[[],2],[[],2],[[],2],[42,18],[[]],[[]],[[]],[18,42],[[42,42],[[11,[4]]]],[42],[[]],[[],20],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,[[],7],[1,[[11,[[26,[46]]]]]],[[]],[10],[[],11],[[],[[11,[1]]]],[[]],[10],[[]],[1,11],[1,7],[[],7],[2,11],[[],[[11,[1]]]],[[],[[47,[1,46]]]],0,0,[[12,48],48],[[]],[[48,12],48],[[12,48],48],[[48,12,48],7],0,0,[[]],[[]],[49,49],[[]],[15,[[6,[49,5]]]],[2],[2],[2],[[49,16],[[6,[2,5]]]],[[49,49],7],[[49,8],17],[[49,8],17],[[]],[18,49],[[],[[11,[49]]]],[19,[[6,[49]]]],[[],2],[49,18],[[]],[49],[[]],[[],20],[[],6],[[],6],[[],13],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],[[51,[50]]]],[[]],[[]],[[]],[[]],[[],51],[[],11],[19,11],[[],51],[[]],[19,[[53,[52,46]]]],[[]],[[],51],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],7],[[]],[[]],[[],51],[[]],[[]],[54],[54],[[]],[[],51],[[]],[[]],[[]],[[]],0,0,[[18,55],56],[[12,55],56],0,0,0,[[]],[[]],[41,41],[[]],0,[15,[[6,[41,5]]]],[2],[2],[2],[[],41],[[41,16],[[6,[2,5]]]],[[41,41],7],[[41,8],17],[[]],[[],2],[[]],0,[[],41],[[]],[[],6],[[],6],[[],13],[41,7],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[57,57],[[]],[15,[[6,[57,5]]]],[2],[58,57],[2],[2],[2],[35,57],[2],[2],[[57,16],[[6,[2,5]]]],[[57,57],7],[[57,8],17],[[57,8],17],[[]],[18,57],[[]],[[],[[6,[57,36]]]],[[],2],[[],2],[57,18],[[]],[[]],[[]],[[],20],[[],6],[[],6],[19,[[6,[57]]]],[[],6],[[],6],[[],13],[[],13],[[]],[[]],[[],59],[18,59],[[],18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[60,[[61,[7]]]],0,[60,61],0,[60,[[61,[[11,[[26,[62]]]]]]]],0,[[32,19],[[61,[60]]]],0,[[32,19],[[61,[60]]]],0,[60,61],0,0,[62],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[36,36],[[]],[2],[2],[2],[[36,8],17],[[36,8],17],[63,36],[5,36],[64,36],[[]],[[],2],[[]],[65],0,[[]],[[],20],[[],6],[[],6],[[],13],[[]],0,0,[19],[[60,60],61],0,0,[[]],[[]],[66,66],[[]],0,0,[15,[[6,[66,5]]]],[2],[2],[2],[[66,16],[[6,[2,5]]]],[[66,66],7],[[66,8],17],[[]],[[],2],[[]],[[]],[[],6],[[],6],[[],13],[[]],[29,64],0,[29,64],0,[[],64],0,[[],[[6,[36]]]],0],"p":[[3,"MerklePosition"],[15,"usize"],[8,"Iterator"],[4,"Ordering"],[3,"Error"],[4,"Result"],[15,"bool"],[3,"Formatter"],[3,"Error"],[3,"Altitude"],[4,"Option"],[15,"u64"],[3,"TypeId"],[3,"Coin"],[8,"Read"],[8,"Write"],[6,"Result"],[6,"Base"],[15,"str"],[3,"String"],[4,"OrchardFixedBases"],[4,"OrchardFixedBasesFull"],[3,"NullifierK"],[3,"ValueCommitV"],[6,"Affine"],[3,"Vec"],[4,"OrchardHashDomains"],[4,"OrchardCommitDomains"],[15,"u32"],[8,"FnMut"],[8,"Copy"],[3,"ContractId"],[3,"MONEY_CONTRACT_ID"],[3,"DAO_CONTRACT_ID"],[3,"SecretKey"],[4,"ContractError"],[3,"PublicKey"],[3,"Hash"],[3,"Keypair"],[6,"Point"],[3,"Signature"],[3,"MerkleNode"],[3,"Choice"],[3,"UNCOMMITTED_ORCHARD"],[3,"EMPTY_ROOTS"],[3,"Global"],[3,"BTreeSet"],[3,"BigUint"],[3,"Nullifier"],[3,"Coordinates"],[3,"CtOption"],[8,"Fn"],[3,"Box"],[8,"RngCore"],[6,"ValueBlind"],[6,"ValueCommit"],[3,"TokenId"],[3,"DARK_TOKEN_ID"],[6,"Scalar"],[6,"DbHandle"],[6,"GenericResult"],[15,"u8"],[4,"Error"],[15,"i64"],[3,"Demand"],[3,"ContractCall"],[13,"Full"],[8,"Tree"],[8,"Hashable"],[8,"CurveExt"],[8,"Curve"],[8,"CurveAffine"],[8,"PrimeField"],[8,"Group"],[8,"Field"],[8,"SchnorrSecret"],[8,"SchnorrPublic"],[13,"Custom"],[13,"IoError"]]},\
"darkfi_serial":{"doc":"","t":[12,8,8,8,24,24,3,8,0,11,11,10,11,11,14,5,5,10,11,11,14,14,0,11,11,11,14,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,11,11,14,11,0,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,3,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,14,14,14,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0],"n":["0","Decodable","Encodable","ReadExt","SerialDecodable","SerialEncodable","VarInt","WriteExt","async_serial","borrow","borrow_mut","decode","decode","decode_async","decoder_fn","deserialize","deserialize_partial","encode","encode","encode_async","encode_payload","encoder_fn","endian","eq","fmt","from","impl_int_encodable","into","length","read_bool","read_f32","read_f64","read_i128","read_i16","read_i32","read_i64","read_i8","read_slice","read_u128","read_u16","read_u32","read_u64","read_u8","serialize","try_from","try_into","tuple_encode","type_id","types","vzip","write_bool","write_f32","write_f64","write_i128","write_i16","write_i32","write_i64","write_i8","write_slice","write_u128","write_u16","write_u32","write_u64","write_u8","AsyncReadExt","AsyncWriteExt","async_decoder_fn","async_encoder_fn","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","read_u128","read_u16","read_u32","read_u64","read_u8","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_u128","write_u16","write_u32","write_u64","write_u8","bytes_to_u64_slice_le","define_be_to_array","define_chunk_slice_to_int","define_le_to_array","define_slice_to_be","define_slice_to_le","f32_to_array_le","f64_to_array_le","i128_to_array_le","i16_to_array_le","i32_to_array_le","i64_to_array_le","slice_to_f32_le","slice_to_f64_le","slice_to_i128_le","slice_to_i16_le","slice_to_i32_le","slice_to_i64_le","slice_to_u128_le","slice_to_u16_le","slice_to_u32_be","slice_to_u32_le","slice_to_u64_le","u128_to_array_le","u16_to_array_le","u32_to_array_be","u32_to_array_le","u64_to_array_le","collections","hash","incrementalmerkletree","pasta","url"],"q":["darkfi_serial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_serial::async_serial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_serial::endian","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfi_serial::types","","","",""],"d":["","Data which can be decoded in a consensus-consistent way.","Data which can be encoded in a consensus-consistent way.","Extensions of <code>Read</code> to decode data as per Bitcoin consensus.","","","Variable-integer encoding","Extensions of <code>Write</code> to encode data as per Bitcoin …","","","","","","","","Deserialize an object from a vector. Will error if said …","Deserialize an object from a vector, but do not error if …","Encode an object with a well-defined format. Should only …","","","Encode a dynamic set of arguments to a buffer.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Gets the length of this <code>VarInt</code> when encoded. Returns:","Read a boolean","Read a 32-bit floating point int","Read a 64-bit floating point int","Read a 128-bit signed int","Read a 16-bit signed int","Ouptut a 32-bit signed int","Read a 64-bit signed int","Read an 8-bit signed int","Read a byte slice","Read a 128-bit unsigned int","Read a 16-bit unsigned int","Read a 32-bit unsigned int","Read a 64-bit unsigned int","Read an 8-bit unsigned int","Encode an object into a vector.","","","","","Encodings for external crates","","Output a boolean","Output a 32-bit floating point int","Output a 64-bit floating point int","Output a 128-bit signed int","Output a 16-bit signed int","Ouptut a 32-bit signed int","Output a 64-bit signed int","Output an 8-bit signed int","Output a byte slice","Output a 128-bit unsigned int","Output a 16-bit unsigned int","Output a 32-bit unsigned int","Output a 64-bit unsigned int","Output an 8-bit unsigned int","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialization of collections","","","Implementations for pasta curves",""],"i":[4,0,0,0,0,0,0,0,0,4,4,5,4,4,0,0,0,25,4,4,0,0,0,4,4,4,0,4,4,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,4,4,0,4,0,4,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,28,29,28,29,28,29,28,29,28,28,28,28,28,28,29,28,29,28,29,28,29,29,29,29,29,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[1,[[3,[2]]]],[1,[[3,[4,2]]]],[[],[[3,[4,2]]]],0,[[],[[3,[5,2]]]],[[],[[3,[2]]]],[6,[[3,[7,2]]]],[[4,6],[[3,[7,2]]]],[4,[[3,[7,2]]]],0,0,0,[[4,4],8],[[4,9],10],[[]],0,[[]],[4,7],[[],[[3,[8,2]]]],[[],[[3,[11,2]]]],[[],[[3,[12,2]]]],[[],[[3,[13,2]]]],[[],[[3,[14,2]]]],[[],[[3,[15,2]]]],[[],[[3,[16,2]]]],[[],[[3,[17,2]]]],[[],[[3,[2]]]],[[],[[3,[18,2]]]],[[],[[3,[19,2]]]],[[],[[3,[20,2]]]],[[],[[3,[21,2]]]],[[],[[3,[22,2]]]],[[],[[23,[22]]]],[[],3],[[],3],0,[[],24],0,[[]],[8,[[3,[2]]]],[11,[[3,[2]]]],[12,[[3,[2]]]],[13,[[3,[2]]]],[14,[[3,[2]]]],[15,[[3,[2]]]],[16,[[3,[2]]]],[17,[[3,[2]]]],[[],[[3,[2]]]],[18,[[3,[2]]]],[19,[[3,[2]]]],[20,[[3,[2]]]],[21,[[3,[2]]]],[22,[[3,[2]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[3,[18,2]]]],[[],[[3,[19,2]]]],[[],[[3,[20,2]]]],[[],[[3,[21,2]]]],[[],[[3,[22,2]]]],[[],3],[[],3],[[],3],[[],3],[[],24],[[],24],[[]],[[]],[18,[[3,[2]]]],[19,[[3,[2]]]],[20,[[3,[2]]]],[21,[[3,[2]]]],[22,[[3,[2]]]],[[]],0,0,0,0,0,[11],[12],[13],[14],[15],[16],[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[[],18],[[],19],[[],20],[[],20],[[],21],[18],[19],[20],[20],[21],0,0,0,0,0],"p":[[8,"Read"],[3,"Error"],[4,"Result"],[3,"VarInt"],[8,"Decodable"],[8,"Write"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[3,"Vec"],[3,"TypeId"],[8,"Encodable"],[8,"ReadExt"],[8,"WriteExt"],[3,"AsyncReadExt"],[3,"AsyncWriteExt"]]},\
"darkfid":{"doc":"","t":[3,17,17,3,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,5,0,12,0,0,0,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,12,12,11,11,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11],"n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","Darkfid","blockchain_get_slot","blockchain_last_known_slot","blockchain_lookup_zkas","blockchain_subscribe_blocks","borrow","borrow","borrow_mut","borrow_mut","cashier_pub","chain","channel_log","clap","clock_sync","clone","clone_into","config","consensus","consensus_p2p","consensus_p2p_accept","consensus_p2p_external","consensus_p2p_peer","consensus_p2p_seed","consensus_p2p_transports","consensus_peer_rpc","consensus_seed_rpc","consensus_slots","database","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","error","faucet_pub","fmt","from","from","from_clap","handle_request","init","init","into","into","localnet","main","merge","misc_clock","misc_get_consensus_info","misc_get_info","misc_pong","new","pointer_metadata","pointer_metadata","realmain","rpc_blockchain","rpc_listen","rpc_misc","rpc_tx","rpc_wallet","single_node","sync_p2p","sync_p2p_accept","sync_p2p_external","sync_p2p_peer","sync_p2p_seed","sync_p2p_transports","sync_slots","synced","to_owned","try_from","try_from","try_into","try_into","tx_broadcast","tx_simulate","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","validator_state","verbose","vzip","vzip","wallet","wallet_exec_sql","wallet_pass","wallet_path","wallet_query_row_multi","wallet_query_row_single","ContractZkasDbNotFound","NoRowsFoundInWallet","NotSynced","ParseError","RpcError","TxBroadcastFail","TxSimulationFail","UnknownSlot","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","pointer_metadata","server_error","to_tuple","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":["darkfid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkfid::error","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","Whitelisted cashier public key (repeatable flag)","Chain to use (testnet, mainnet)","Enable channel log","","Verify system clock is correct","","","Configuration file to use","Participate in consensus","","P2P accept addresses for the consensus protocol …","P2P external addresses for the consensus protocol …","Connect to peer for the consensus protocol (repeatable …","Connect to seed for the consensus protocol (repeatable …","Prefered transports of outbound connections for the …","Peers JSON-RPC listen URL for clock synchronization …","Seed nodes JSON-RPC listen URL for clock synchronization …","Connection slots for the consensus protocol","Path to blockchain database","","","","","","","","","","","","Whitelisted faucet public key (repeatable flag)","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Enable localnet hosts","","","","","","","","","","","","JSON-RPC listen URL","","","","Enable single-node mode for local testing","","P2P accept addresses for the syncing protocol (repeatable …","P2P external addresses for the syncing protocol …","Connect to peer for the syncing protocol (repeatable flag)","Connect to seed for the syncing protocol (repeatable flag)","Prefered transports of outbound connections for the …","Connection slots for the syncing protocol","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","","Password for the wallet database","Path to wallet database","","","","","","","Custom RPC errors available for darkfid. Please sort them …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,5,1,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,1,5,1,5,1,5,5,1,5,0,5,5,1,5,5,1,1,5,1,5,5,0,5,1,1,1,1,1,1,5,0,0,5,0,0,0,5,1,5,5,5,5,5,5,1,5,1,5,1,5,1,1,1,5,1,5,1,5,1,5,1,5,1,5,1,1,5,5,1,1,26,26,26,26,0,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,26,26,26,26,26,26,26],"f":[0,0,0,0,[[1,2],3],[[1,2],3],[[1,2],3],[[1,2],3],[[]],[[]],[[]],[[]],0,0,0,[[],4],0,[5,5],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[],5],[6],[6],[6],[6],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[5]]]],[6],[6],0,0,[[5,9],10],[[]],[[]],[11,5],[[1,12],[[15,[[14,[13]]]]]],[[],6],[[],6],[[]],[[]],0,[[],16],[[5,5,11],5],[[1,2],3],[[1,2],3],[[1,2],3],[[1,2],3],[[17,[19,[18]],[19,[18]],20],1],[[]],[[]],[[5,[22,[21]]],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],8],[[],8],[[],8],[[],8],[[1,2],3],[[1,2],3],[[],23],[[],23],[[[14,[24]]],[[14,[25,24]]]],[[[14,[24]]],[[14,[25,24]]]],[[],25],[[],25],[[],25],[[],25],0,0,[[]],[[]],0,[[1,2],3],0,0,[[1,2],3],[[1,2],3],0,0,0,0,0,0,0,0,[[]],[[]],[6],[6],[[],[[8,[7]]]],[6],[[]],[[],6],[[]],[[]],[[26,2,[19,[27]]],3],[26],[[],8],[[],8],[[],23],[[[14,[24]]],[[14,[25,24]]]],[[],25],[[],25],[[]]],"p":[[3,"Darkfid"],[4,"Value"],[4,"JsonResult"],[3,"App"],[3,"Args"],[15,"usize"],[3,"With"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[3,"JsonRequest"],[8,"Future"],[3,"Box"],[3,"Pin"],[6,"Result"],[6,"ValidatorStatePtr"],[6,"P2pPtr"],[4,"Option"],[6,"WalletPtr"],[3,"Executor"],[3,"Arc"],[3,"TypeId"],[3,"Global"],[8,"Any"],[4,"RpcError"],[15,"str"]]},\
"darkwiki":{"doc":"","t":[3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12],"n":["Args","ArgsSubCommand","Log","Restore","Update","borrow","borrow","borrow_mut","borrow_mut","clap","clap","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","endpoint","eq","fmt","fmt","from","from","from_clap","from_clap","init","init","into","into","main","pointer_metadata","pointer_metadata","print_patches","sub_command","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verbose","vzip","vzip","dry_run","dry_run","values","values","values"],"q":["darkwiki","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkwiki::ArgsSubCommand","","","",""],"d":["","","Show the history of patches  ","Undo the local changes","Publish local patches and merging received patches","","","","","","","","","","","","","","","","","","","darkfid JSON-RPC endpoint","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","Run without applying the changes","Run without applying the changes","Names of files to update (Note: Will update all the …","Names of files to log (Note: Will show all the log if left …","Names of files to restore (Note: Will restore all the …"],"i":[0,0,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,0,2,3,0,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,3,17,18,17,19,18],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],1],[2,2],[3,3],[[]],[[]],[4],[4],[4],[4],[[],[[6,[5]]]],[[],[[6,[5]]]],[4],[4],0,[[3,3],7],[[2,8],9],[[3,8],9],[[]],[[]],[10,2],[10,3],[[],4],[[],4],[[]],[[]],[[],11],[[]],[[]],[12],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],13],[[],13],[[[15,[14]]],[[15,[16,14]]]],[[[15,[14]]],[[15,[16,14]]]],[[],16],[[],16],[[],16],[[],16],0,[[]],[[]],0,0,0,0,0],"p":[[3,"App"],[3,"Args"],[4,"ArgsSubCommand"],[15,"usize"],[3,"With"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Result"],[3,"Vec"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[13,"Update"],[13,"Restore"],[13,"Log"]]},\
"darkwikid":{"doc":"","t":[3,17,17,3,3,17,6,17,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,0,0,5,11,12,11,11,11,0,11,11,11,11,12,5,11,12,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,12,11,12,11,11,11,11,11,11,11,11,3,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,13,3,13,4,3,3,13,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,5,5,5,5,5,5],"n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","DarkWiki","DarkWikiSettings","LOCAL_ID_PATH","Patches","SYNC_ID_PATH","WORKSPACES","__private_field","author","author","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clap","clone","clone_into","config","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","docs","docs_path","drop","drop","drop","drop","fmt","from","from","from","from","from_clap","gen_secret","handle_signals","init","init","init","init","into","into","into","into","is_delete_patch","jsonrpc","lcs","main","merge","net","on_receive_patch","on_receive_restore","on_receive_update","patch","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","raft","realmain","restore","rpc","rpc_listen","save_doc","settings","start","store_path","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","update","util","verbose","vzip","vzip","vzip","vzip","workspace","JsonRpcInterface","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","handle_request","init","into","log","new","patch_to_tuple","pointer_metadata","printable_patches","receiver","restore","sender","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","update","vzip","Lcs","a","b","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","lengths","new","op","ops","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","0","Delete","EncryptedPatch","Insert","OpMethod","OpMethods","Patch","Retain","add_op","author","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","colorize","decode","decode","decode","decode","delete","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","encode","encode","encode","encode","eq","eq","eq","equivalent","equivalent","equivalent","extend_ops","fmt","fmt","fmt","fmt","from","from","from","from","id","init","init","init","init","insert","into","into","into","into","merge","new","nonce","ops","ops","path","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","retain","serialize","serialize","serialize","set_ops","timestamp","to_owned","to_owned","to_owned","to_owned","to_string","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","workspace","0","0","0","decrypt_patch","encrypt_patch","get_docs_paths","parse_b58_secret","parse_workspaces","path_to_id","str_to_chars"],"q":["darkwikid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkwikid::jsonrpc","","","","","","","","","","","","","","","","","","","","","","","","","","","darkwikid::lcs","","","","","","","","","","","","","","","","","","","","","","","","darkwikid::patch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darkwikid::patch::OpMethod","","","darkwikid::util","","","","","",""],"d":["","","","DarkWiki object","Settings struct used to hold some metadata for DarkWiki","","","","This is where we hold our workspaces, so we are also able …","","","Sets author’s name for patches","","","","","","","","","","","","Configuration file to use","","","","","","","","","","","","","","","","Path where to store wiki’s files","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generate a new secret for a workspace","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Network settings","","","","","","","","","","","","","JSON-RPC listen URL","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","","Workspace configuration (repeatable flag)","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decrypt a patch using a NaCl crypto_secretbox given an …","Encrypt a patch using a NaCl crypto_secretbox given a <code>Patch</code>…","TODO: DOCUMENT ME FIXME: There’s checking of file …","Parse a base58 string for a <code>crypto_secretbox</code> secret.","Parse a TOML string for configured workspaces and return …","Hash a path and workspace, and encode with base58, …","Split a <code>&amp;str</code> into a vector of each of its chars."],"i":[0,0,0,0,0,0,0,0,0,4,46,2,46,17,4,2,46,17,4,2,2,2,2,2,2,46,17,4,4,2,46,17,4,2,46,17,4,2,2,2,46,46,17,4,2,2,46,17,4,2,2,2,0,46,17,4,2,46,17,4,2,17,0,0,0,2,2,17,17,17,0,46,17,4,2,17,0,17,17,2,17,17,17,46,2,46,17,4,2,46,17,4,2,46,17,4,2,46,17,4,2,46,17,4,2,46,17,4,2,17,0,2,46,17,4,2,2,0,28,28,28,28,28,28,28,28,28,28,28,28,0,28,0,28,28,28,28,28,28,28,28,28,28,28,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,37,36,0,36,0,0,0,36,14,14,14,36,37,38,14,36,37,38,14,38,36,37,38,14,36,37,38,14,14,36,37,38,14,14,36,37,38,14,36,37,38,14,36,36,37,37,38,14,14,36,37,38,14,36,37,38,14,36,37,14,36,37,14,14,36,37,38,14,36,37,38,14,14,36,37,38,14,14,36,37,38,14,14,14,38,14,14,14,36,37,38,14,14,36,37,14,14,14,36,37,38,14,14,14,36,37,38,14,36,37,38,14,36,37,38,14,36,37,38,14,36,37,38,14,36,37,38,14,36,37,38,14,14,47,48,49,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[2,2],[[]],0,[[],2],[3],[3],[4,5],[3],[3],[3],[3],[3],[3],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[2]]]],[[],[[7,[6]]]],0,0,[3],[3],[3],[3],[[2,8],9],[[]],[[]],[[]],[[]],[10,2],0,[[11,12,13]],[[],3],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[]],[14,15],0,0,[[],16],[[2,2,10],2],0,[[17,14],16],[[17,15,[19,[18]]],16],[[17,15,[19,[18]]],16],0,[[]],[[]],[[]],[[]],0,[[2,[21,[20]]],16],[[17,15,22,23],[[16,[[19,[14]]]]]],0,0,[[17,23,23,23],16],0,[17,16],0,[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],24],[[],24],[[],24],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[17,15,22,[19,[18]],23],16],0,0,[[]],[[]],[[]],[[]],0,0,[[]],[[]],[3],[3],[[],[[7,[6]]]],[3],[[]],[[28,29],[[31,[[26,[30]]]]]],[[],3],[[]],[[28,32],33],[[13,[34,[[19,[[19,[14]]]]]]],28],[[14,15]],[[]],[[[19,[[19,[14]]]],15],[[19,[19]]]],0,[[28,32],33],0,[[],7],[[],7],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],[[28,32],33],[[]],0,0,0,[[]],[[]],[3],[3],[[],[[7,[6]]]],[3],[[]],[[],3],[[]],0,[[23,23],35],[[35,19,3,3]],[35,[[19,[36]]]],[[]],[[],7],[[],7],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],[[]],0,0,0,0,0,0,0,0,[[14,36]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[36,36],[37,37],[38,38],[14,14],[[]],[[]],[[]],[[]],[14,18],[39,[[7,[36,40]]]],[39,[[7,[37,40]]]],[39,[[7,[38,40]]]],[39,[[7,[14,40]]]],[[14,41]],[3],[3],[3],[3],[3],[3],[3],[3],[[],[[7,[6]]]],[[],[[7,[36]]]],[[],[[7,[37]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[14]]]],[[],[[7,[6]]]],[3],[3],[3],[3],[[36,42],[[7,[3,40]]]],[[37,42],[[7,[3,40]]]],[[38,42],[[7,[3,40]]]],[[14,42],[[7,[3,40]]]],[[36,36],15],[[37,37],15],[[14,14],15],[[],15],[[],15],[[],15],[[14,37]],[[36,8],9],[[37,8],9],[[38,8],9],[[14,8],9],[[]],[[]],[[]],[[]],0,[[],3],[[],3],[[],3],[[],3],[[14,23]],[[]],[[]],[[]],[[]],[[14,14],14],[[23,23,23,23],14],0,[14,37],0,0,[[]],[[]],[[]],[[]],[[14,41]],[36,7],[37,7],[14,7],[[14,37]],0,[[]],[[]],[[]],[[]],[14,18],[[14,14],14],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],24],[[],24],[[],24],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,0,0,0,[[38,43],[[16,[14]]]],[[14,43],[[16,[38]]]],[[19,22,[44,[22]]],16],[23,16],[23,[[45,[18,43]]]],[[23,23],18],[23,[[19,[23]]]]],"p":[[3,"App"],[3,"Args"],[15,"usize"],[3,"WORKSPACES"],[3,"RwLock"],[3,"With"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Signals"],[3,"PathBuf"],[3,"Sender"],[3,"Patch"],[15,"bool"],[6,"Result"],[3,"DarkWiki"],[3,"String"],[3,"Vec"],[3,"Executor"],[3,"Arc"],[3,"Path"],[15,"str"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"JsonRpcInterface"],[3,"JsonRequest"],[8,"Future"],[3,"Pin"],[4,"Value"],[4,"JsonResult"],[3,"Receiver"],[3,"Lcs"],[4,"OpMethod"],[3,"OpMethods"],[3,"EncryptedPatch"],[8,"Read"],[3,"Error"],[15,"u64"],[8,"Write"],[6,"Key"],[4,"Option"],[3,"HashMap"],[3,"DarkWikiSettings"],[13,"Delete"],[13,"Insert"],[13,"Retain"]]},\
"dchat":{"doc":"","t":[3,3,6,6,12,5,5,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,12,11,11,0,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["AppSettings","Dchat","Error","Result","accept_addr","alice","bob","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dchat_error","dchatmsg","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","init","init","into","into","main","menu","net","new","new","p2p","pointer_metadata","pointer_metadata","protocol_dchat","recv_msgs","register_protocol","rpc","send","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ErrorMissingSpecifier","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","fmt","from","init","into","pointer_metadata","provide","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","DchatMsg","DchatMsgsBuffer","borrow","borrow_mut","clone","clone_into","decode","deref","deref_mut","deserialize","drop","encode","fmt","from","init","into","msg","name","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ProtocolDchat","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","handle_receive_msg","init","init","into","jobsman","msg_sub","msgs","name","pointer_metadata","start","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","JsonRpcInterface","addr","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","get_info","handle_request","init","into","p2p","pointer_metadata","pong","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":["dchat","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dchat::dchat_error","","","","","","","","","","","","","","","","","","","","","","","","","dchat::dchatmsg","","","","","","","","","","","","","","","","","","","","","","","","","","","dchat::protocol_dchat","","","","","","","","","","","","","","","","","","","","","","","","","dchat::rpc","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,8,1,8,1,1,1,0,0,8,1,8,1,8,1,8,1,1,8,1,8,1,8,1,0,8,1,8,1,8,8,1,0,8,8,0,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33],"f":[0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[]],[[]],[[]],[[]],[1,1],[[]],0,0,[3],[3],[3],[3],[[],[[5,[4]]]],[[],[[5,[4]]]],[3],[3],[[1,6],7],[[]],[[]],[[],3],[[],3],[[]],[[]],[[],2],[8,2],0,[[9,10],8],[[11,12],1],0,[[]],[[]],0,0,[[8,10],2],0,[[8,13],2],[[8,[15,[14]]],2],[[]],[[],5],[[],5],[[],5],[[],5],[[],16],[[],16],[[[18,[17]]],[[18,[19,17]]]],[[[18,[17]]],[[18,[19,17]]]],[[],19],[[],19],[[],19],[[],19],[[]],[[]],0,[[]],[[]],[20,20],[[]],[3],[3],[[],[[5,[4]]]],[3],[[20,6],7],[[20,6],7],[[]],[[],3],[[]],[[]],[21],[[]],[[],13],[[],5],[[],5],[[],16],[[[18,[17]]],[[18,[19,17]]]],[[],19],[[],19],[[]],0,0,[[]],[[]],[22,22],[[]],[23,[[5,[22,24]]]],[3],[3],[[],[[5,[4]]]],[3],[[22,25],[[5,[3,24]]]],[[22,6],7],[[]],[[],3],[[]],0,[[],26],[[]],[[]],[[],5],[[],5],[[],16],[[[18,[17]]],[[18,[19,17]]]],[[],19],[[],19],[[]],0,[[]],[[]],[3],[3],[[],[[5,[4]]]],[3],[[]],[[[15,[27]]],28],[[29,10],30],[[],3],[[]],0,0,0,[27,26],[[]],[[[15,[27]],[15,[14]]],[[32,[[18,[31]]]]]],[[],5],[[],5],[[],16],[[[18,[17]]],[[18,[19,17]]]],[[],19],[[],19],[[]],0,0,[[]],[[]],[3],[3],[[],[[5,[4]]]],[3],[[]],[[33,34,34],35],[[33,36],[[32,[[18,[31]]]]]],[[],3],[[]],0,[[]],[[33,34,34],35],[[],5],[[],5],[[],16],[[[18,[17]]],[[18,[19,17]]]],[[],19],[[],19],[[]]],"p":[[3,"AppSettings"],[6,"Result"],[15,"usize"],[3,"With"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"Dchat"],[6,"P2pPtr"],[6,"DchatMsgsBuffer"],[3,"Url"],[3,"Settings"],[3,"String"],[3,"Executor"],[3,"Arc"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"ErrorMissingSpecifier"],[3,"Demand"],[3,"DchatMsg"],[8,"Read"],[3,"Error"],[8,"Write"],[15,"str"],[3,"ProtocolDchat"],[6,"Result"],[6,"ChannelPtr"],[6,"ProtocolBasePtr"],[8,"Future"],[3,"Pin"],[3,"JsonRpcInterface"],[4,"Value"],[4,"JsonResult"],[3,"JsonRequest"]]},\
"dnetview":{"doc":"","t":[3,11,11,0,11,11,11,11,0,11,11,11,5,0,12,11,0,0,11,11,0,11,11,11,11,11,11,0,0,12,11,17,17,13,3,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,6,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,3,13,13,3,13,3,6,6,13,3,13,3,13,13,4,4,13,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,3,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,5,5,5,5,5,3,3,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DnetView","borrow","borrow_mut","config","deref","deref_mut","deserialize","drop","error","from","init","into","main","model","model","new","options","parser","pointer_metadata","render_view","rpc","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","util","view","view","vzip","CONFIG_FILE","CONFIG_FILE_CONTENTS","CONSENSUS","DnvConfig","LILITH","NORMAL","Node","NodeType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","name","node_type","nodes","pointer_metadata","pointer_metadata","pointer_metadata","rpc_url","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","CannotFindId","Darkfi","DnetViewError","DnetViewResult","EmptyRpcReply","Io","NoExternalAddr","NoIdAtIndex","NotSelectableObject","SerdeJsonError","SetLoggerError","UnexpectedData","UrlParse","ValueIsNotObject","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","init","into","pointer_metadata","provide","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","0","0","0","0","0","0","Connect","ConnectInfo","Inbound","Lilith","LilithInfo","Manual","Model","MsgLog","MsgMap","Network","NetworkInfo","Node","NodeInfo","Offline","Outbound","SelectableObject","Session","Session","SessionInfo","accept_addr","addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","children","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","external_addr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hosts","id","id","id","id","id","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","is_empty","is_empty","is_offline","last_msg","last_status","msg_log","msg_log","msg_map","name","name","name","name","networks","new","new","new","new","new","new","nodes","parent","parent","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","remote_node_id","selectables","serialize","serialize","serialize","serialize","serialize","serialize","serialize","state","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","urls","urls","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","config","deref","deref_mut","deserialize","drop","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","log_path","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","update_from_arg_matches","update_from_arg_matches_mut","verbose","vzip","DataParser","_parse_manual","borrow","borrow_mut","config","deref","deref_mut","deserialize","drop","from","init","into","model","new","parse_data","parse_external_addr","parse_inbound","parse_lilith_data","parse_offline","parse_outbound","pointer_metadata","poll","start_connect_slots","try_connect","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","update_msgs","update_selectables","vzip","RpcConnect","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","get_consensus_info","get_info","init","into","lilith_spawns","name","new","ping","pointer_metadata","rpc_client","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","is_empty_session","make_connect_id","make_empty_id","make_node_id","make_session_id","IdMenu","MsgList","MsgLog","MsgMap","NodeInfoView","View","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","id_menu","ids","index","index","infos","init","init","init","init","into","into","into","into","make_ordered_list","msg_list","msg_map","new","new","new","new","next","ordered_list","parse_msg_list","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","previous","render","render_ids","render_info","scroll","selectables","state","state","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unselect","unselect","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","update","update_id_menu","update_msg_index","update_msg_list","update_selectable","vzip","vzip","vzip","vzip"],"q":["dnetview","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dnetview::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dnetview::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dnetview::error::DnetViewError","","","","","","dnetview::modeldnetview::model::SelectableObject","","","","","dnetview::options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dnetview::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dnetview::rpc","","","","","","","","","","","","","","","","","","","","","","","","","dnetview::util","","","","","dnetview::view","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets a custom config file","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Logfile path","","","","","","","","","","Increase verbosity (-vvv supported)","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,8,8,0,8,8,8,8,0,8,8,8,0,0,8,8,0,0,8,8,0,8,8,8,8,8,8,0,0,8,8,0,0,16,0,16,16,0,0,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,14,15,15,16,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,15,15,14,14,15,16,15,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,19,19,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,59,60,61,62,63,64,30,0,29,30,0,29,0,0,0,30,0,30,0,29,29,0,0,30,0,32,33,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,31,32,29,30,31,32,33,34,35,29,30,31,32,33,34,35,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,29,29,30,30,5,31,31,32,32,33,33,34,34,35,35,29,30,5,31,32,33,34,35,29,30,31,32,33,34,35,29,30,31,32,33,34,35,31,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,32,31,32,33,34,35,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,32,33,31,33,33,5,33,5,31,32,34,35,34,5,31,32,33,34,35,35,32,33,29,30,5,31,32,33,34,35,33,5,29,30,31,32,33,34,35,31,33,29,30,31,32,33,34,35,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,29,30,5,31,32,33,34,35,34,35,29,30,5,31,32,33,34,35,65,66,67,68,69,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,7,52,53,54,7,52,53,54,7,52,53,54,7,52,53,54,7,7,52,53,54,7,52,53,54,7,52,53,54,7,52,53,54,7,52,53,54,7,52,53,54,7,52,53,54,54,7,52,53,54,7,52,53,54,7,7,53,7,52,53,54,52,7,7,7,52,53,54,52,7,7,7,53,7,52,53,7,52,53,54,7,52,53,54,7,52,53,54,7,52,53,54,52,53,7,52,53,54,7,52,53,54,7,52,53,54,7,7,7,7,7,7,52,53,54],"f":[0,[[]],[[]],0,[1],[1],[[],[[3,[2]]]],[1],0,[[]],[[],1],[[]],[[],4],0,0,[[[6,[5]],7],8],0,0,[[]],[[8,9],4],0,[[],3],[[],3],[[],10],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],0,0,0,[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[14]]]],[[],[[3,[2]]]],[[],[[3,[15]]]],[[],[[3,[2]]]],[[],[[3,[16]]]],[1],[1],[1],[[14,17],18],[[15,17],18],[[16,17],18],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],0,[14,3],[15,3],[16,3],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],10],[[],10],[[],10],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1],[1],[[],[[3,[2]]]],[1],[[19,17],18],[[19,17],18],[[]],[20,19],[21,19],[22,19],[23,19],[24,19],[[],1],[[]],[[]],[25],[19,[[27,[26]]]],[[],28],[[],3],[[],3],[[],10],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[29]]]],[[],[[3,[30]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[31]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[32]]]],[[],[[3,[33]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[34]]]],[[],[[3,[35]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[1],[1],[1],[1],[[29,29],36],[[30,30],36],[[31,31],36],[[32,32],36],[[33,33],36],[[34,34],36],[[35,35],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],0,[[29,17],18],[[30,17],18],[[5,17],18],[[31,17],18],[[32,17],18],[[33,17],18],[[34,17],18],[[35,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[6,[5]]]],[[28,28,28,[37,[32]],[27,[28]],36],31],[[28,28,36,28,[37,[33]],[27,[28]],[27,[[37,[28]]]]],32],[[28,28,28,28,37,36,28,28,28],33],[[28,28,[37,[28]],[37,[35]]],34],[[28,28,[37,[28]],[37,[28]]],35],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[29,3],[30,3],[31,3],[32,3],[33,3],[34,3],[35,3],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[38,38],[38,38],[[]],[[]],[[],38],[[],38],0,[1],[1],[[],[[3,[2]]]],[1],[[]],[39,[[3,[40,41]]]],[39,[[3,[40,41]]]],[[],[[27,[42]]]],[[],1],[[]],0,[[]],[[],3],[[],3],[[],10],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],[[40,39],[[3,[41]]]],[[40,39],[[3,[41]]]],0,[[]],0,[[43,44,28],[[4,[32]]]],[[]],[[]],0,[1],[1],[[],[[3,[2]]]],[1],[[]],[[],1],[[]],0,[[[6,[5]],14],[[6,[43]]]],[[43,45,28],4],[[43,27],[[4,[[27,[28]]]]]],[[43,44,28],[[4,[32]]]],[[43,[45,[28,44]],28],4],[[43,28],4],[[43,44,28],[[4,[32]]]],[[]],[[43,15,46],4],[[[6,[43]],[6,[47]]],4],[[[6,[43]],15],4],[[],3],[[],3],[[],10],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],[[43,[37,[32]]],4],[[43,[37,[32]],31],4],[[]],0,[[]],[[]],[1],[1],[[],[[3,[2]]]],[1],[[]],[46,[[4,[44]]]],[46,[[4,[44]]]],[[],1],[[]],[46,[[4,[44]]]],0,[[48,28],[[49,[46]]]],[46,[[49,[44]]]],[[]],0,[[],3],[[],3],[[],10],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],[[]],[[],36],[50,[[49,[28]]]],[[51,29,50],[[49,[28]]]],[28,[[49,[28]]]],[[51,29],[[49,[28]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[52,52],[53,53],[54,54],[[]],[[]],[[]],[[]],[[],7],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[[7,17],18],[[52,17],18],[[53,17],18],[[54,17],18],[[]],[[]],[[]],[[]],0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[7],0,0,[[],7],[[[37,[28]]],52],[[[55,[28,37]],1],53],[[[55,[28,31]]],54],[52],0,[[7,28],[[4,[56]]]],[[]],[[]],[[]],[[]],[52],[[7,57],4],[[7,57,[37,[58]]],4],[[7,57,[37,[58]],28],4],[53,4],0,0,0,[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],10],[[],10],[[],10],[[],10],[52],[53],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[7,[55,[28,37]],[55,[28,30]]]],[[7,[55,[28,30]]]],[7],[[7,[55,[28,37]]]],[[7,[55,[28,30]]]],[[]],[[]],[[]],[[]]],"p":[[15,"usize"],[3,"With"],[4,"Result"],[6,"DnetViewResult"],[3,"Model"],[3,"Arc"],[3,"View"],[3,"DnetView"],[3,"Terminal"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"DnvConfig"],[3,"Node"],[4,"NodeType"],[3,"Formatter"],[6,"Result"],[4,"DnetViewError"],[4,"Error"],[3,"Error"],[3,"Error"],[3,"SetLoggerError"],[4,"ParseError"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[4,"Session"],[4,"SelectableObject"],[3,"NodeInfo"],[3,"SessionInfo"],[3,"ConnectInfo"],[3,"LilithInfo"],[3,"NetworkInfo"],[15,"bool"],[3,"Vec"],[3,"Command"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[3,"Id"],[3,"DataParser"],[4,"Value"],[3,"Map"],[3,"RpcConnect"],[3,"Executor"],[3,"Url"],[6,"Result"],[15,"u64"],[15,"str"],[3,"IdMenu"],[3,"MsgList"],[3,"NodeInfoView"],[3,"HashMap"],[3,"List"],[3,"Frame"],[3,"Rect"],[13,"UnexpectedData"],[13,"Darkfi"],[13,"SerdeJsonError"],[13,"Io"],[13,"SetLoggerError"],[13,"UrlParse"],[13,"Node"],[13,"Lilith"],[13,"Network"],[13,"Session"],[13,"Connect"]]},\
"drk":{"doc":"","t":[13,3,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,12,12,11,3,3,3,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11],"n":["Airdrop","Args","Balance","Broadcast","Create","Dao","DaoSubcmd","Drk","Exec","Import","Init","Inspect","Inspect","Join","List","Mint","Otc","OtcSubcmd","Ping","Proposal","Proposals","Propose","Scan","Sign","Subcmd","Subscribe","Transfer","Unspend","View","Vote","Wallet","apply_tx_dao_data","apply_tx_money_data","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands","augment_subcommands","augment_subcommands_for_update","augment_subcommands_for_update","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_tx","cli_util","command","command","command_for_update","confirm_daos","dao_balance","dao_list","dao_list_single","dao_mint","dao_propose","dao_vote","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","endpoint","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","get_block_by_slot","get_coins","get_dao_by_id","get_dao_proposals","get_dao_secrets","get_dao_trees","get_daos","get_money_secrets","get_money_tree","group_id","has_subcommand","has_subcommand","has_subcommand","import_dao","import_money_secrets","init","init","init","init","init","init_swap","initialize_dao","initialize_money","inspect_swap","into","into","into","into","into","join_swap","last_scanned_slot","lookup_zkas","main","mark_spent_coin","mark_spent_coins","money_balance","money_keygen","ping","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","put_dao_proposals","put_dao_trees","put_money_tree","request_airdrop","reset_dao_trees","reset_daos","reset_money_coins","reset_money_tree","rpc_airdrop","rpc_blockchain","rpc_client","rpc_dao","rpc_swap","rpc_transfer","scan_block_dao","scan_block_money","scan_blocks","sign_swap","subscribe_blocks","transfer","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unconfirm_daos","unspend_coin","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","vzip","vzip","vzip","vzip","vzip","wallet_address","wallet_dao","wallet_money","amount","approval_ratio","dao_id","dao_id","dao_id","dao_id","dao_id","dao_id","dao_id","dao_id","dao_name","gov_token_id","proposal","proposal","proposal_id","proposer_limit","quorum","recipient","token_id","vote","vote_weight","token_pair","value_pair","0","0","address","address","amount","amount","balance","checkpoint","coin","coins","dao","dao_bulla","faucet_endpoint","import_secrets","initialize","keygen","list","recipient","reset","secrets","token","token","tree","kaching","parse_token_pair","parse_value_pair","PartialSwapData","borrow","borrow_mut","decode","deref","deref_mut","deserialize","drop","encode","from","init","into","params","pointer_metadata","proofs","token_blinds","token_pair","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value_blinds","value_pair","vzip","Dao","DaoParams","DaoProposal","DaoVote","amount","approval_ratio_base","approval_ratio_base","approval_ratio_quot","approval_ratio_quot","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bulla","bulla","bulla_blind","bulla_blind","bulla_blind","call_index","call_index","call_index","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dao_bulla","decode","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","encode","fmt","fmt","fmt","fmt","from","from","from","from","gov_token_id","gov_token_id","id","id","id","init","init","init","init","into","into","into","into","leaf_position","leaf_position","name","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proposal_id","proposer_limit","proposer_limit","quorum","quorum","recipient","secret_key","secret_key","serial","to_owned","to_owned","to_owned","to_owned","token_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_hash","tx_hash","tx_hash","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vote_id","vote_option","vzip","vzip","vzip","vzip"],"q":["drkdrk::DaoSubcmd","","","","","","","","","","","","","","","","","","","","","drk::OtcSubcmd","","drk::Subcmd","","","","","","","","","","","","","","","","","","","","","","","drk::cli_util","","","drk::rpc_swap","","","","","","","","","","","","","","","","","","","","","","","","","","drk::wallet_dao","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Airdrop some tokens","","Show the balance of a DAO","Read a transaction from stdin and broadcast it","Create DAO parameters","DAO functionalities","","","Execute a DAO proposal","Import DAO data from stdin","Initialize the first half of the atomic swap","Inspect a transaction from stdin","Inspect a swap half or the full swap tx from stdin","Build entire swap tx given the first half from stdin","List imported DAOs (or info about a specific one)","Mint an imported DAO on-chain","OTC atomic swap","","Send a ping request to the darkfid RPC endpoint","View a DAO proposal data","List DAO proposals","Create a proposal for a DAO","Scan the blockchain and parse relevant transactions","Sign a transaction given from stdin as the first-half","","Subscribe to incoming blocks from darkfid","Create a payment transaction","Unspend a coin","View DAO data from stdin","Vote on a given proposal","Wallet operations","Append data related to DAO contract transactions into the …","Append data related to Money contract transactions into …","","","","","","","","","","","","","","","","","","","Broadcast a given transaction to darkfid and forward onto …","CLI utility functions","","","","Confirm already imported DAO metadata into the wallet. …","Fetch known unspent balances from the wallet for the given …","List DAO(s) imported in the wallet. If an ID is given, …","","Mint a DAO on-chain","Create a DAO proposal","Vote on a DAO proposal","","","","","","","","","","","","","","","","","","","","","darkfid JSON-RPC endpoint","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Queries darkfid for a block with given slot","Fetch all coins and their metadata related to the Money …","Fetch a DAO given a numeric ID","Fetch all known DAO proposals from the wallet given a DAO …","Fetch all DAO secret keys from the wallet","Fetch DAO Merkle trees from the wallet","Fetch all known DAOs from the wallet.","Fetch all secret keys from the wallet","Fetch the Money Merkle tree from the wallet","","","","","Import given DAO params into the wallet with a given name.","Import given secret keys into the wallet. The query uses …","","","","","","Initialize the first half of an atomic swap","Initialize wallet with tables for the DAO contract","Initialize wallet with tables for the Money contract","Inspect and verify a given swap (half or full) transaction","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a full transaction by inspecting and verifying …","Get the last scanned slot from the wallet","Try to fetch zkas bincodes for the given <code>ContractId</code>.","","Mark a coin in the wallet as spent","Marks all coins in the wallet as spent, if their nullifier …","Fetch known unspent balances from the wallet and return …","Generate a new keypair and place it into the wallet.","","","","","","","Import given DAO proposals into the wallet","Replace the DAO Merkle trees in the wallet.","Replace the Money Merkle tree in the wallet.","Request an airdrop of <code>amount</code> <code>token_id</code> tokens from a faucet.","Reset the DAO Merkle trees in the wallet","Reset confirmed DAOs in the wallet","Reset the Money coins in the wallet","Reset the Money Merkle tree in the wallet","Airdrop methods","Blockchain methods","","DAO methods","Swap methods","Payment methods","<code>scan_block_dao</code> will go over transactions in a block and …","<code>scan_block_money</code> will go over transactions in a block and …","Scans the blockchain starting from the last scanned slot, …","Sign a given transaction by retrieving the secret key from …","Subscribes to darkfid’s JSON-RPC notification endpoint …","Create a payment transaction. Returns the transaction …","","","","","","","","","","","","","","","","Unconfirm imported DAOs by removing the leaf position, …","Mark a given coin in the wallet as unspent","","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","","","Fetch pubkeys from the wallet and return the requested …","Wallet functionality related to DAO","Wallet functionality related to Money","Amount to send from DAO with proposal success","The ratio of winning votes/total votes needed for a …","Numeric identifier for the DAO (optional)","Numeric identifier for the DAO","Numeric identifier for the DAO","Numeric identifier for the DAO","Numeric identifier for the DAO","Numeric identifier for the DAO","Numeric identifier for the DAO","Numeric identifier for the DAO","Named identifier for the DAO","DAO’s governance token ID","Numeric identifier for the proposal","Proposal identifier","Numeric identifier for the proposal","The minimum amount of governance tokens needed to open a …","Minimal threshold of participating total tokens needed for …","Pubkey to send tokens to with proposal success","Token ID to send from DAO with proposal success","Vote (0 for NO, 1 for YES)","Vote weight (amount of governance tokens)","Token pair to send:recv (f00:b4r)","Value pair to send:recv (11.55:99.42)","","","Get the default address in the wallet","Optional address to send tokens to (defaults to main …","Amount to request from the faucet","Amount to send","Query the wallet for known balances","Reset Merkle tree to checkpoint index and start scanning","base58-encoded coin to mark as unspent","Print all the coins in the wallet","Mark if this is being sent to a DAO","DAO bulla, if the tokens are being sent to a DAO","Faucet JSON-RPC endpoint","Import secret keys from stdin into the wallet, separated …","Initialize wallet with data for Money Contract (run this …","Generate a new keypair in the wallet","List all available checkpoints","Recipient address","Reset Merkle tree and start scanning from first slot","Print all the secret keys from the wallet","Token ID to request from the faucet","Token ID to send","Print the Merkle tree in the wallet","Fun police go away","","","Half of the swap data, includes the coin that is supposed …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Parameters representing an intialized DAO, optionally …","Parameters representing a DAO to be initialized","Parameters representing an initialized DAO proposal, …","Parameters representing a vote we’ve made on a DAO …","Amount of this proposal","The ratio of winning/total votes needed for a proposal to …","The ratio of winning/total votes needed for a proposal to …","","","","","","","","","","","","","DAO bulla blind","DAO bulla blind","Proposal’s bulla blind","The call index in the transaction where the DAO was …","call index in the transaction where this proposal was …","call index in the transaction where this vote was casted","","","","","","","","","The DAO bulla related to this proposal","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","DAO’s governance token ID","DAO’s governance token ID","Numeric identifier for the DAO","Numeric identifier for the proposal","Numeric identifier for the vote","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Leaf position of the DAO in the Merkle tree of DAOs","Leaf position of this proposal in the Merkle tree of …","Named identifier for the DAO","","","","","Numeric identifier for the proposal related to this vote","The minimum amount of governance tokens needed to open a …","The minimum amount of governance tokens needed to open a …","Minimal threshold of participating total tokens needed for …","Minimal threshold of participating total tokens needed for …","Recipient of this proposal’s funds","Secret key for the DAO","Secret key for the DAO","Serial of this proposal","","","","","Token ID to be sent","","","","","","","","","The transaction hash where the DAO was deployed","Transaction hash where this proposal was proposed","Transaction hash where this vote was casted","","","","","","","","","","","","","","","","","The vote ID we’ve voted on this proposal","The vote","","","",""],"i":[18,0,20,18,20,18,0,0,20,20,19,18,19,19,20,20,18,0,18,20,20,20,18,19,0,18,18,18,20,20,18,1,1,16,16,18,19,20,18,19,20,1,16,18,19,20,1,16,18,19,20,1,0,16,16,16,1,1,1,1,1,1,1,1,16,18,19,20,1,16,18,19,20,1,16,18,19,20,1,16,18,19,20,16,1,16,18,19,20,16,18,19,20,16,18,19,20,1,1,1,1,1,1,1,1,1,16,18,19,20,1,1,1,16,18,19,20,1,1,1,1,1,16,18,19,20,1,1,1,0,1,1,1,1,1,1,16,18,19,20,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,16,18,19,20,1,16,18,19,20,1,16,18,19,20,1,1,1,16,18,19,20,1,16,18,19,20,1,16,18,19,20,16,18,19,20,16,18,19,20,16,1,16,18,19,20,1,0,0,49,50,51,52,53,49,54,55,56,57,58,50,56,57,55,50,50,49,49,56,56,59,59,60,61,62,63,63,64,62,65,66,62,64,64,63,62,62,62,65,64,65,62,63,64,62,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,24,29,23,29,23,29,23,24,46,29,23,24,46,23,24,29,23,24,23,24,46,29,23,24,46,29,23,24,46,24,29,29,23,24,46,29,23,24,46,29,23,24,46,29,23,24,46,29,29,23,24,46,29,23,24,46,29,23,23,24,46,29,23,24,46,29,23,24,46,23,24,23,29,23,24,46,46,29,23,29,23,24,29,23,24,29,23,24,46,24,29,23,24,46,29,23,24,46,23,24,46,29,23,24,46,29,23,24,46,29,23,24,46,29,23,24,46,24,46,29,23,24,46],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3],4],[[1,2,3],4],[5,5],[5,5],[5,5],[5,5],[5,5],[5,5],[5,5],[5,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],[[4,[6]]]],0,[[],5],0,[[],5],[1,4],[[1,7],[[4,[[8,[6,7]]]]]],[[1,[9,[7]]],4],[[1,7],4],[[1,7],[[4,[2]]]],[[1,7,10,7,11],[[4,[2]]]],[[1,7,7,3,7],[[4,[2]]]],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[],[[14,[13]]]],[[],[[14,[13]]]],[[],[[14,[13]]]],[[],[[14,[13]]]],[[],[[14,[13]]]],[12],[12],[12],[12],[12],0,[[]],[[]],[[]],[[]],[[]],[15,[[14,[16,17]]]],[15,[[14,[18,17]]]],[15,[[14,[19,17]]]],[15,[[14,[20,17]]]],[15,[[14,[16,17]]]],[15,[[14,[18,17]]]],[15,[[14,[19,17]]]],[15,[[14,[20,17]]]],[[1,7],[[4,[[9,[21]]]]]],[[1,3],[[4,[22]]]],[[1,7],[[4,[23]]]],[[1,7],[[4,[[22,[24]]]]]],[1,[[4,[[22,[25]]]]]],[1,4],[1,[[4,[[22,[23]]]]]],[1,[[4,[[22,[25]]]]]],[1,[[4,[26]]]],[[],[[9,[27]]]],[28,3],[28,3],[28,3],[[1,6,29],4],[[1,[22,[25]]],[[4,[[22,[10]]]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[1,7,11,7,11],[[4,[30]]]],[1,4],[1,4],[[1,[22,[31]]],4],[[]],[[]],[[]],[[]],[[]],[[1,30],[[4,[2]]]],[1,[[4,[7]]]],[[1,32],[[4,[22]]]],[[],4],[[1,33],4],[1,4],[1,[[4,[[8,[6,7]]]]]],[1,4],[1,4],[[]],[[]],[[]],[[]],[[]],[1,4],[[1,26,26],4],[[1,26],4],[[1,34,35,11,10],[[4,[6]]]],[1,4],[1,4],[1,4],[1,4],0,0,0,0,0,0,[[1,21],4],[[1,21],4],[[1,3],4],[[1,2],4],[[1,34],4],[[1,28,11,10,3,[9,[6]]],[[4,[2]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],36],[[],36],[[],36],[[],36],[[],36],[1,4],[[1,33],4],[[[38,[37]]],[[38,[39,37]]]],[[[38,[37]]],[[38,[39,37]]]],[[[38,[37]]],[[38,[39,37]]]],[[[38,[37]]],[[38,[39,37]]]],[[[38,[37]]],[[38,[39,37]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[16,15],[[14,[17]]]],[[18,15],[[14,[17]]]],[[19,15],[[14,[17]]]],[[20,15],[[14,[17]]]],[[16,15],[[14,[17]]]],[[18,15],[[14,[17]]]],[[19,15],[[14,[17]]]],[[20,15],[[14,[17]]]],0,[[]],[[]],[[]],[[]],[[]],[[1,7],[[4,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],40],[28,40],[28,40],0,[[]],[[]],[41,[[14,[30,42]]]],[12],[12],[[],[[14,[13]]]],[12],[[30,43],[[14,[12,42]]]],[[]],[[],12],[[]],0,[[]],0,0,0,[[],14],[[],14],[[],36],[[[38,[37]]],[[38,[39,37]]]],[[],39],[[],39],0,0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,44],[24,45],0,0,0,0,0,0,[29,29],[23,23],[24,24],[46,46],[[]],[[]],[[]],[[]],0,[41,[[14,[29,42]]]],[12],[12],[12],[12],[12],[12],[12],[12],[[],[[14,[13]]]],[[],[[14,[13]]]],[[],[[14,[13]]]],[[],[[14,[13]]]],[12],[12],[12],[12],[[29,43],[[14,[12,42]]]],[[29,47],48],[[23,47],48],[[24,47],48],[[46,47],48],[[]],[[]],[[]],[[]],0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,[[],36],[[],36],[[],36],[[],36],[[[38,[37]]],[[38,[39,37]]]],[[[38,[37]]],[[38,[39,37]]]],[[[38,[37]]],[[38,[39,37]]]],[[[38,[37]]],[[38,[39,37]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,[[]],[[]],[[]],[[]]],"p":[[3,"Drk"],[3,"Transaction"],[15,"bool"],[6,"Result"],[3,"Command"],[3,"String"],[15,"u64"],[3,"HashMap"],[4,"Option"],[3,"PublicKey"],[3,"TokenId"],[15,"usize"],[3,"With"],[4,"Result"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[4,"Subcmd"],[4,"OtcSubcmd"],[4,"DaoSubcmd"],[3,"BlockInfo"],[3,"Vec"],[3,"Dao"],[3,"DaoProposal"],[3,"SecretKey"],[6,"MerkleTree"],[3,"Id"],[15,"str"],[3,"DaoParams"],[3,"PartialSwapData"],[15,"u8"],[3,"ContractId"],[3,"Coin"],[3,"Url"],[15,"f64"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[6,"Result"],[8,"Read"],[3,"Error"],[8,"Write"],[3,"DaoBulla"],[6,"Base"],[3,"DaoVote"],[3,"Formatter"],[6,"Result"],[13,"Propose"],[13,"Create"],[13,"List"],[13,"Balance"],[13,"Mint"],[13,"Proposals"],[13,"Proposal"],[13,"Vote"],[13,"Exec"],[13,"Import"],[13,"Init"],[13,"Otc"],[13,"Dao"],[13,"Wallet"],[13,"Airdrop"],[13,"Transfer"],[13,"Scan"],[13,"Unspend"]]},\
"faucetd":{"doc":"","t":[3,17,17,3,6,12,11,12,12,12,12,12,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,12,11,11,11,12,5,5,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11],"n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","Faucetd","ProvingKeyMap","_wallet","airdrop","airdrop_limit","airdrop_limit","airdrop_map","airdrop_timeout","airdrop_timeout","borrow","borrow","borrow_mut","borrow_mut","cashier_pub","chain","channel_log","clap","clone","clone_into","config","database","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","error","faucet_pub","fmt","from","from","from_clap","handle_request","init","init","initialize_keypair","initialize_wallet","into","into","keypair","localnet","main","merge","merkle_tree","new","pointer_metadata","pointer_metadata","proving_keys","prune_airdrop_map","realmain","rpc_listen","sync_p2p","sync_p2p_accept","sync_p2p_external","sync_p2p_peer","sync_p2p_seed","sync_p2p_transports","sync_slots","synced","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","validator_state","verbose","vzip","vzip","wallet_pass","wallet_path","AmountExceedsLimit","InternalError","ParseError","RpcError","TimeLimitReached","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","pointer_metadata","server_error","to_tuple","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":["faucetd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","faucetd::error","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Airdrop amount limit","","","Airdrop timeout limit in seconds","","","","","Whitelisted cashier address (repeatable flag)","Chain to use (testnet, mainnet)","Enable channel log","","","","Configuration file to use","Path to blockchain database","","","","","","","","","","","","Whitelisted faucet address (repeatable flag)","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Enable localnet hosts","","","","","","","","","","JSON-RPC listen URL","","P2P accept addresses for the syncing protocol","P2P external addresses for the syncing protocol","Connect to peer for the syncing protocol (repeatable flag)","Connect to seed for the syncing protocol (repeatable flag)","Prefered transports of outbound connections for the …","Connection slots for the syncing protocol","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","Password for the wallet database","Path to wallet database","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,1,1,1,5,1,1,5,1,5,1,5,5,5,5,5,5,5,5,5,5,1,5,1,5,1,5,5,1,5,0,5,5,1,5,5,1,1,5,1,1,1,5,1,5,0,5,1,1,1,5,1,0,0,5,1,5,5,5,5,5,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32,0,0,32,32,32,32,32,32,32],"f":[0,0,0,0,0,0,[[1,2],3],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[[],4],[5,5],[[]],0,0,[[],5],[6],[6],[6],[6],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[5]]]],[6],[6],0,0,[[5,9],10],[[]],[[]],[11,5],[[1,12],[[15,[[14,[13]]]]]],[[],6],[[],6],[16,[[18,[17]]]],[16,[[18,[[20,[19]]]]]],[[]],[[]],0,0,[[],18],[[5,5,11],5],0,[[21,22,16,23,24],[[18,[1]]]],[[]],[[]],0,[[[27,[[26,[[25,[23]]]]]],23]],[[5,[27,[28]]],18],0,0,0,0,0,0,0,0,0,[[]],[[],8],[[],8],[[],8],[[],8],[[],29],[[],29],[[[14,[30]]],[[14,[31,30]]]],[[[14,[30]]],[[14,[31,30]]]],[[],31],[[],31],[[],31],[[],31],0,0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[6],[6],[[],[[8,[7]]]],[6],[[]],[[],6],[[]],[[]],[[32,2],3],[32],[[],8],[[],8],[[],29],[[[14,[30]]],[[14,[31,30]]]],[[],31],[[],31],[[]]],"p":[[3,"Faucetd"],[4,"Value"],[4,"JsonResult"],[3,"App"],[3,"Args"],[15,"usize"],[3,"With"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[3,"JsonRequest"],[8,"Future"],[3,"Box"],[3,"Pin"],[6,"WalletPtr"],[3,"Keypair"],[6,"Result"],[3,"MerkleNode"],[3,"BridgeTree"],[6,"ValidatorStatePtr"],[6,"P2pPtr"],[15,"i64"],[15,"u64"],[3,"HashMap"],[3,"Mutex"],[3,"Arc"],[3,"Executor"],[3,"TypeId"],[3,"Global"],[8,"Any"],[4,"RpcError"]]},\
"fu":{"doc":"","t":[3,3,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12],"n":["Args","Fu","Get","List","Subcmd","Sync","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","close_connection","command","command","command_for_update","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","endpoint","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","get","group_id","has_subcommand","init","init","init","into","into","into","list","main","pointer_metadata","pointer_metadata","pointer_metadata","rpc_client","sync","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","vzip","vzip","vzip","file"],"q":["fu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fu::Subcmd"],"d":["","","Retrieve provided file name from the fud network","List fud folder contents","","Sync fud folder contents and signal network for record …","","","","","","","","","","","","","","","","","","","","","","","","","","","fud JSON-RPC endpoint","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","File name"],"i":[0,0,10,10,0,10,8,8,10,10,2,8,10,2,8,10,2,8,8,8,2,8,10,2,8,10,2,8,10,2,8,10,8,2,8,10,8,10,8,10,2,8,10,2,8,10,2,8,10,2,0,2,8,10,2,2,2,8,10,2,8,10,2,8,10,2,8,10,2,8,10,2,8,10,8,10,8,10,8,2,8,10,20],"f":[0,0,0,0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[2,3],[[],1],0,[[],1],[4],[4],[4],[4],[4],[4],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[4],[4],[4],0,[[]],[[]],[[]],[7,[[6,[8,9]]]],[7,[[6,[10,9]]]],[7,[[6,[8,9]]]],[7,[[6,[10,9]]]],[[2,11],3],[[],[[13,[12]]]],[14,15],[[],4],[[],4],[[],4],[[]],[[]],[[]],[2,3],[[],3],[[]],[[]],[[]],0,[2,3],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],[[[18,[17]]],[[18,[19,17]]]],[[[18,[17]]],[[18,[19,17]]]],[[[18,[17]]],[[18,[19,17]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[8,7],[[6,[9]]]],[[10,7],[[6,[9]]]],[[8,7],[[6,[9]]]],[[10,7],[[6,[9]]]],0,[[]],[[]],[[]],0],"p":[[3,"Command"],[3,"Fu"],[6,"Result"],[15,"usize"],[3,"With"],[4,"Result"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[4,"Subcmd"],[3,"String"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[13,"Get"]]},\
"fud":{"doc":"","t":[3,17,17,3,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,0,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,12,12,12,11,11,11,5,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11],"n":["Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","Fud","borrow","borrow","borrow_mut","borrow_mut","channel_log","clap","clone","clone_into","config","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","dht","disconnect","drop","drop","error","fmt","folder","folder","from","from","from_clap","get","get_info","handle_request","init","init","init","into","into","list","localnet","main","merge","new","p2p_accept","p2p_external","peers","pointer_metadata","pointer_metadata","pong","realmain","rpc_listen","seeds","slots","sync","to_owned","transports","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verbose","vzip","vzip","FileGenerationFail","KeyInsertFail","KeyRemoveFail","QueryFailed","RpcError","UnknownKey","WaitingNetworkError","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","pointer_metadata","server_error","to_tuple","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":["fud","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fud::error","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Struct representing the daemon.","","","","","Enable channel log","","","","Configuration file to use","","","","","","","","","Daemon dht state","Signaling fud network that node goes offline.","","","","","Path to the contents directory","Path to the contents directory","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Initialize fud dht state by reading the contents folder …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Enable localnet hosts","","","","P2P accept addresses (repeatable flag)","P2P external addresses (repeatable flag)","Connect to peer (repeatable flag)","","","","","JSON-RPC listen URL","Connect to seed (repeatable flag)","Connection slots","","","Prefered transports for outbound connections (repeatable …","","","","","","","","","","","","","Increase verbosity (-vvv supported)","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,6,2,6,2,2,2,2,2,2,2,6,2,6,2,6,2,2,6,6,6,2,0,2,6,2,6,2,2,6,6,6,6,6,2,6,2,6,2,0,2,6,2,2,2,6,2,6,0,2,2,2,6,2,2,6,2,6,2,6,2,6,2,6,2,6,2,2,6,2,24,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,0,0,24,24,24,24,24,24,24],"f":[0,0,0,0,[[]],[[]],[[]],[[]],0,[[],1],[2,2],[[]],0,[[],2],[3],[3],[3],[3],[[],[[5,[4]]]],[[],[[5,[2]]]],[[],[[5,[4]]]],0,[6,7],[3],[3],0,[[2,8],9],0,0,[[]],[[]],[10,2],[[6,11],12],[[6,11],12],[[6,13],[[16,[[15,[14]]]]]],[6,7],[[],3],[[],3],[[]],[[]],[[6,11],12],0,[[],7],[[2,2,10],2],[[17,18],[[7,[6]]]],0,0,0,[[]],[[]],[[6,11],12],[[2,[20,[19]]],7],0,0,0,[[6,11],12],[[]],0,[[],5],[[],5],[[],5],[[],5],[[],21],[[],21],[[[15,[22]]],[[15,[23,22]]]],[[[15,[22]]],[[15,[23,22]]]],[[],23],[[],23],[[],23],[[],23],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[3],[3],[[],[[5,[4]]]],[3],[[]],[[],3],[[]],[[]],[[24,11],12],[24],[[],5],[[],5],[[],21],[[[15,[22]]],[[15,[23,22]]]],[[],23],[[],23],[[]]],"p":[[3,"App"],[3,"Args"],[15,"usize"],[3,"With"],[4,"Result"],[3,"Fud"],[6,"Result"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[4,"Value"],[4,"JsonResult"],[3,"JsonRequest"],[8,"Future"],[3,"Box"],[3,"Pin"],[6,"DhtPtr"],[3,"PathBuf"],[3,"Executor"],[3,"Arc"],[3,"TypeId"],[3,"Global"],[8,"Any"],[4,"RpcError"]]},\
"ircd":{"doc":"","t":[3,3,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,0,11,12,11,11,12,0,0,0,12,5,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,6,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,3,3,3,12,12,11,11,11,11,12,0,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,11,11,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,12,11,11,5,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,3,4,6,3,3,6,17,17,3,13,3,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,12,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,6,3,17,3,3,17,3,3,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,17,17,17,3,3,13,17,17,17,17,13,13,4,17,17,17,17,13,17,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,11,11,12,5,5,5,12,11,11,11,11,12,12,12,5,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11],"n":["Ircd","KeyPair","borrow","borrow","borrow_mut","borrow_mut","buffers","crypto","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","from","from","init","init","into","into","irc","main","model","new","notify_clients","pointer_metadata","pointer_metadata","private_key","privmsg","protocol_privmsg","protocol_privmsg2","public_key","realmain","rpc","serialize","settings","start","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","view","vzip","vzip","Buffers","Msgs","OrderingAlgo","Orphan","PrivmsgsBuffer","RingBuffer","SeenIds","UMsgs","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone","clone_into","clone_into","contains","contains","create_buffers","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","fetch_msgs","fetch_msgs","from","from","from","from","from","from","from","get","get_msg_by_term","get_msg_by_term","ids","inc_read_confirms","init","init","init","init","init","init","init","insert","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","items","iter","last_term","last_term","len","len","len","len","load","load","load","msg","msgs","msgs","new","new","new","new","new","new","oprhan_is_valid","orphans","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","privmsgs","push","push","push","push","remove","remove","seen_ids","sort_buffer","sort_orphans","timestamp","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unread_msgs","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","update","update_orphans","vzip","vzip","vzip","vzip","vzip","vzip","vzip","decrypt_privmsg","decrypt_target","encrypt","encrypt_privmsg","try_decrypt","IrcClient","IrcConfig","IrcServer","address","auto_channels","borrow","borrow","borrow_mut","borrow_mut","capabilities","client","clone","clone_into","configured_chans","configured_contacts","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","irc_config","irc_config","is_cap_end","is_nick_init","is_pass_init","is_registered","is_user_init","new","new","nickname","notify_clients","notify_clients","p2p","p2p","password","pointer_metadata","pointer_metadata","process_connection","seen","seen","settings","setup_listener","start","subscription","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","write_stream","IrcClient","address","borrow","borrow_mut","clean_input_line","deref","deref_mut","deserialize","drop","from","init","into","irc_config","listen","new","notify_clients","on_ping","on_quit","on_receive_cap","on_receive_join","on_receive_names","on_receive_nick","on_receive_part","on_receive_pass","on_receive_privmsg","on_receive_topic","on_receive_user","p2p","parse_line","pointer_metadata","process_line","process_msg","registre","reply","seen","subscription","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","update","vzip","write_stream","0","1","Event","EventAction","EventId","EventNode","EventsQueue","EventsQueueArc","MAX_DEPTH","MAX_HEIGHT","Model","PrivMsg","PrivMsgEvent","_debug","_events_queue","action","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","current_root","decode","decode","decode","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","diff_depth","dispatch","drop","drop","drop","drop","drop","drop","encode","encode","encode","event","event_map","fetch","find_ancestor","find_depth","find_head","find_height","find_leaves","find_longest_chain","fmt","fmt","from","from","from","from","from","from","get_event","get_event_children","hash","init","init","init","init","init","init","into","into","into","into","into","into","is_orphan","msg","name","new","new","nick","orphans","parent","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","previous_event_hash","prune_chains","read_confirms","remove_node","reorganize","target","timestamp","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","update_root","vzip","vzip","vzip","vzip","vzip","vzip","0","Privmsg","PrivmsgId","borrow","borrow_mut","clone","clone_into","decode","deref","deref_mut","deserialize","drop","encode","eq","equivalent","fmt","from","id","init","into","message","name","new","nickname","pointer_metadata","read_confirms","target","term","timestamp","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","0","InvObject","ProtocolPrivmsg","borrow","borrow","borrow_mut","borrow_mut","channel","clone","clone_into","decode","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","fmt","from","from","handle_receive_msg","init","init","init","into","into","jobsman","msg_sub","name","notify","p2p","pointer_metadata","pointer_metadata","seen","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","GetData","Inv","InvId","InvItem","MAX_CONFIRM","ProtocolEvent","RingBuffer","SIZE_OF_SEEN_BUFFER","Seen","SyncEvent","UNREAD_EVENT_EXPIRE_TIME","UnreadEvents","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains","decode","decode","decode","decode","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","eq","equivalent","event_sub","events","events","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get_hash","getdata_sub","handle_receive_event","handle_receive_getdata","handle_receive_inv","handle_receive_syncevent","hash","hash","id","inc_read_confirms","init","init","init","init","init","init","init","init","init","insert","into","into","into","into","into","into","into","into","inv_sub","invs","items","jobsman","leaves","model","name","name","name","name","new","new","new","new_event","p2p","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","push","push","seen","seen_event","seen_inv","send_getdata","send_inv","send_sync_hash_loop","start","syncevent_sub","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unread_events","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","JsonRpcInterface","addr","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","get_info","handle_request","init","into","p2p","pointer_metadata","pong","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Args","BROADCAST_LAST_TERM_MSG","CONFIG_FILE","CONFIG_FILE_CONTENTS","ChannelInfo","ContactInfo","EndOfNames","LIFETIME_FOR_ORPHAN","MAXIMUM_LENGTH_OF_MESSAGE","MAXIMUM_LENGTH_OF_NICKNAME","MAX_CONFIRM","NameReply","NoTopic","RPL","SIZE_OF_IDSS_BUFFER","SIZE_OF_MSGS_BUFFER","TERM_MAX_TIME_DIFFERENCE","TIMEOUT_FOR_RESEND_UNREAD_MSGS","Topic","UNREAD_MSG_EXPIRE_TIME","autojoin","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clap","clone","clone","clone","clone_into","clone_into","clone_into","config","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","from","from","from","from","from_clap","gen_keypair","gen_secret","get_current_time","init","init","init","init","into","into","into","into","irc_listen","irc_tls_cert","irc_tls_secret","joined","merge","names","net","new","new","output","parse_configured_channels","parse_configured_contacts","parse_priv_key","password","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","rpc_listen","salt_box","salt_box","salt_box_from_shared_secret","secret","to_owned","to_owned","to_owned","topic","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verbose","vzip","vzip","vzip","vzip","View","_new","_process","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","pointer_metadata","seen","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":["ircd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd::buffersircd::crypto","","","","","ircd::irc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd::irc::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd::modelircd::model::EventAction","ircd::privmsg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd::protocol_privmsg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd::protocol_privmsgircd::rpc","","","","","","","","","","","","","","","","","","","","","","","ircd::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd::view","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decrypt PrivMsg nickname and message","Decrypt PrivMsg target","The format we’re using is nonce+ciphertext, where nonce …","Encrypt PrivMsg","The format we’re using is nonce+ciphertext, where nonce …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","On every new connection create new IrcClient which will …","","","","Setup a listener for irc server","Start listening to new irc clients connecting to the irc …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Start listening for messages came from p2p network or irc …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Starts ping-pong keep-alive messages exchange. Runs …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","ircd cli","","","","This struct holds information about preconfigured channels.","","","","","","","","","","","","","","","","Autojoin channels","","","","","","","","","","","","","","","","Sets a custom config file","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generate a new NaCl keypair and exit","Generate a new NaCl secret and exit","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","IRC listen URL","Optional TLS certificate file path if <code>irc_listen</code> uses TLS","Optional TLS certificate key file path if <code>irc_listen</code> uses …","Flag indicates whether the user has joined the channel or …","","All nicknames which are visible on the channel","","","","Path to save keypair in","Parse a TOML string for any configured channels and return …","Parse a TOML string for any configured contact list and …","","Password","","","","","JSON-RPC listen URL","Optional NaCl box for the channel, used for …","Optional NaCl box for the channel, used for …","","Recover public key from secret key","","","","Optional topic for the channel","","","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,8,4,8,4,0,0,8,4,8,4,8,4,8,4,4,8,4,8,4,8,4,0,0,0,8,8,8,4,4,0,0,0,4,0,0,4,0,8,4,8,4,8,4,8,4,8,4,8,4,8,4,0,8,4,0,0,0,0,0,0,0,0,25,91,31,12,27,25,33,26,91,31,12,27,25,33,26,31,25,26,25,26,27,25,0,31,12,27,25,33,91,31,12,27,25,33,26,91,31,12,27,25,33,26,91,31,12,27,25,33,26,91,31,12,27,25,33,26,26,26,31,33,91,31,12,27,25,33,26,27,31,33,12,27,91,31,12,27,25,33,26,27,91,31,12,27,25,33,26,31,25,33,25,25,31,33,31,27,25,33,31,27,33,26,27,33,31,12,27,25,33,26,31,31,91,31,12,27,25,33,26,91,31,12,25,33,27,25,91,31,31,26,25,26,91,31,12,27,25,33,26,91,31,12,27,25,33,26,91,31,12,27,25,33,26,91,91,31,12,27,25,33,26,91,31,12,27,25,33,26,91,31,12,27,25,33,26,31,31,91,31,12,27,25,33,26,0,0,0,0,0,0,0,0,52,44,46,44,46,44,44,0,44,44,44,44,46,44,46,44,46,44,46,44,46,44,46,44,46,44,52,46,44,44,44,44,44,46,44,44,52,46,52,46,44,46,44,46,52,46,46,46,46,52,44,46,44,46,44,46,44,46,44,46,44,46,44,46,44,52,0,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,66,66,0,0,0,0,0,0,0,0,0,60,0,57,57,58,57,66,57,59,60,58,61,66,57,59,60,58,61,61,59,60,58,61,59,60,58,61,57,59,60,58,66,57,59,60,58,61,66,57,59,60,58,61,66,57,59,60,58,61,57,66,66,57,59,60,58,61,59,60,58,61,57,66,57,57,57,57,57,57,58,61,66,57,59,60,58,61,57,57,58,66,57,59,60,58,61,66,57,59,60,58,61,57,59,58,66,57,59,57,61,66,57,59,60,58,61,58,57,58,57,57,59,58,59,60,58,61,66,57,59,60,58,61,66,57,59,60,58,61,66,57,59,60,58,61,66,57,59,60,58,61,66,57,59,60,58,61,66,57,59,60,58,61,57,66,57,59,60,58,61,92,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,69,0,0,70,69,70,69,70,69,69,69,70,69,70,69,70,69,70,69,69,69,70,69,70,70,70,69,70,69,70,70,70,70,70,70,69,70,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,0,0,0,0,0,0,0,0,0,0,0,0,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,83,76,77,78,79,80,76,77,78,79,80,76,81,77,78,79,80,76,82,81,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,77,78,79,80,77,77,83,80,81,77,78,79,80,83,76,77,78,79,80,82,81,81,77,83,83,83,83,83,77,77,77,81,83,83,76,77,78,79,80,82,81,81,83,76,77,78,79,80,82,81,83,78,76,83,79,83,83,78,79,80,76,82,81,83,83,83,76,77,78,79,80,82,81,76,82,82,83,83,83,83,83,83,83,76,77,78,79,80,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,83,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,83,76,77,78,79,80,82,81,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,0,0,0,0,0,0,93,0,0,0,0,93,93,0,0,0,0,0,93,0,9,93,9,43,41,93,9,43,41,9,9,43,41,9,43,41,9,9,93,9,43,41,93,9,43,41,93,9,9,43,41,93,9,43,41,9,93,9,43,41,9,9,9,0,93,9,43,41,93,9,43,41,9,9,9,41,9,41,9,43,41,9,0,0,0,9,93,9,43,41,9,43,41,0,9,9,43,41,41,93,9,43,41,93,9,43,41,93,9,43,41,93,9,43,41,93,9,43,41,93,9,43,41,9,93,9,43,41,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90],"f":[0,0,[[]],[[]],[[]],[[]],0,0,[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[[4,5],6],[[]],[[]],[[],1],[[],1],[[]],[[]],0,[[],7],0,[[],8],0,[[]],[[]],0,0,0,0,0,[[9,[11,[10]]],7],0,[4,3],0,[[8,9,[11,[[13,[12]]]],14,[16,[15]],[11,[10]]],7],[[],17],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[],21],[[],21],0,[[]],[[]],0,0,0,0,0,0,0,0,[[[25,[[0,[22,23,24]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[25,[24]]],[[25,[24]]]],[26,26],[[]],[[]],[[27,28],29],[[[25,[[0,[22,23,24]]]]],29],[[],30],[[],31],[[],12],[[],27],[[],[[25,[32]]]],[[],33],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[1],[1],[1],[[26,26],29],[[],29],[[31,34],[[35,[15]]]],[[33,34],[[35,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,28],[[36,[15]]]],[[31,34],[[36,[15]]]],[[33,34],[[36,[15]]]],0,[[27,28],29],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[27,15],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,29],[[[25,[[0,[22,23,24]]]]],29],[33,29],0,[[[25,[[0,[22,23,24]]]]],[[0,[37,38]]]],[31,34],[33,34],[31,1],[27,1],[[[25,[[0,[22,23,24]]]]],1],[33,1],[31,[[35,[15]]]],[27,[[39,[17,15]]]],[33,[[35,[15]]]],0,0,0,[[],31],[[],12],[[],27],[1,[[25,[[0,[22,23,24]]]]]],[[],33],[15,26],[26,29],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[31,15]],[[12,34],29],[[[25,[[0,[22,23,24]]]],[0,[22,23,24]]]],[[33,15]],[[27,28],[[36,[15]]]],[[[25,[[0,[22,23,24]]]]],[[36,[[0,[22,23,24]]]]]],0,[31],[31],0,[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[31],[31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[40,15]],[[17,15,[42,[17,41]],[42,[17,43]]]],[[40,28],17],[[40,15]],[[40,28],[[36,[17]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[44,44],[[]],0,0,[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[[]],[[]],[[],1],[[],1],[[]],[[]],0,0,0,0,0,0,0,[[9,[11,[[13,[12]]]],14,[45,[15]]],[[7,[46]]]],[9,[[7,[44]]]],0,0,0,0,0,0,[[]],[[]],[[46,[11,[10]],[0,[47,48,49,50]],51],7],0,0,0,[46,7],[[46,[11,[10]]],7],0,[[]],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[],21],[[],21],[[]],[[]],0,0,0,[[]],[[]],[17,[[7,[17]]]],[1],[1],[[],[[3,[2]]]],[1],[[]],[[],1],[[]],0,[[[52,[[0,[47,48,49,50]]]],[54,[[53,[[0,[47,48,49,50]]]]]]]],[[[55,[[0,[47,48,49,50]]]],51,[11,[[13,[12]]]],44,14,[45,[15]],[56,[15]]],[[52,[[0,[47,48,49,50]]]]]],0,[[[52,[[0,[47,48,49,50]]]],28],7],[[[52,[[0,[47,48,49,50]]]]],7],[[[52,[[0,[47,48,49,50]]]],28,28],7],[[[52,[[0,[47,48,49,50]]]],[35,[17]]],7],[[[52,[[0,[47,48,49,50]]]],[35,[17]]],7],[[[52,[[0,[47,48,49,50]]]],28],7],[[[52,[[0,[47,48,49,50]]]],[35,[17]]],7],[[[52,[[0,[47,48,49,50]]]],28],7],[[[52,[[0,[47,48,49,50]]]],28,28],7],[[[52,[[0,[47,48,49,50]]]],28,28],7],[[[52,[[0,[47,48,49,50]]]]],7],0,[28,7],[[]],[[[52,[[0,[47,48,49,50]]]],17],7],[[[52,[[0,[47,48,49,50]]]],15],7],[[[52,[[0,[47,48,49,50]]]]],7],[[[52,[[0,[47,48,49,50]]]],28],7],0,0,[[],3],[[],3],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[[52,[[0,[47,48,49,50]]]],17],7],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[57],0,0,[[57,58]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[59,59],[60,60],[58,58],[61,61],[[]],[[]],[[]],[[]],0,[62,[[3,[59,63]]]],[62,[[3,[60,63]]]],[62,[[3,[58,63]]]],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[57,64,64],65],[[66,58],7],[1],[1],[1],[1],[1],[1],[[59,67],[[3,[1,63]]]],[[60,67],[[3,[1,63]]]],[[58,67],[[3,[1,63]]]],0,0,[66,[[7,[58]]]],[[57,64,64],64],[[57,64,64],65],[57,64],[[57,64,64],[[36,[65]]]],[57,[[35,[64]]]],[[57,64,65]],[[58,5],6],[[61,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[57,64],[[36,[58]]]],[[57,64],[[35,[58]]]],[58,64],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[57,58],29],0,[[],28],[[],68],[68,57],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[57],0,[[57,64]],[57],0,0,[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[57],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[15,15],[[]],[62,[[3,[15,63]]]],[1],[1],[[],[[3,[2]]]],[1],[[15,67],[[3,[1,63]]]],[[15,15],29],[[],29],[[15,5],6],[[]],0,[[],1],[[]],0,[[],28],[[28,28,28,34],15],0,[[]],0,0,0,0,[[]],[15,17],[[],3],[[],3],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[]],0,0,0,[[]],[[]],[[]],[[]],0,[69,69],[[]],[62,[[3,[69,63]]]],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[[69,67],[[3,[1,63]]]],[[69,5],6],[[]],[[]],[[[11,[70]]],7],[[],1],[[71,[72,[15]],14,[11,[[13,[12]]]]],73],[[],1],[[]],[[]],0,0,[70,28],0,0,[[]],[[]],0,[[[11,[70]],[11,[10]]],[[75,[[20,[74]]]]]],[[]],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[],21],[[],21],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[76,[24]]],[[76,[24]]]],[77,77],[78,78],[79,79],[80,80],[[]],[[]],[[]],[[]],[[]],[[[76,[[0,[22,23,24]]]]],29],[[81,64],29],[62,[[3,[77,63]]]],[62,[[3,[78,63]]]],[62,[[3,[79,63]]]],[62,[[3,[80,63]]]],[[],[[76,[32]]]],[[],[[82,[32]]]],[[],81],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[1],[1],[1],[1],[[77,67],[[3,[1,63]]]],[[78,67],[[3,[1,63]]]],[[79,67],[[3,[1,63]]]],[[80,67],[[3,[1,63]]]],[[77,77],29],[[],29],0,0,0,[[77,5],6],[[78,5],6],[[79,5],6],[[80,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[81,64],[[36,[58]]]],[[],34],0,[[[11,[83]]],7],[[[11,[83]]],7],[[[11,[83]]],7],[[[11,[83]]],7],[77],0,0,[[81,64],[[36,[58]]]],[[71,14,[11,[[13,[57]]]],[82,[64]],[82,[34]],[11,[[13,[81]]]]],73],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[81,58]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[83,28],[[],28],[[],28],[[],28],[1,[[76,[[0,[22,23,24]]]]]],[[],[[82,[[0,[22,23,24]]]]]],[[],81],[[83,58],7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[76,[[0,[22,23,24]]]],[0,[22,23,24]]]],[[[82,[[0,[22,23,24]]]]],29],0,0,0,[[83,[35,[64]]],7],[[83,58],7],[[[11,[83]]],7],[[[11,[83]],[11,[10]]],[[75,[[20,[74]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],0,[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[1],[1],[[],[[3,[2]]]],[1],[[]],[[84,85,85],86],[[84,87],[[75,[[20,[74]]]]]],[[],1],[[]],0,[[]],[[84,85,85],86],[[],3],[[],3],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],88],[9,9],[43,43],[41,41],[[]],[[]],[[]],0,[[],9],[1],[1],[1],[1],[1],[1],[1],[1],[[],[[3,[2]]]],[[],[[3,[9]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[[],[[3,[2]]]],[1],[1],[1],[1],[[9,5],6],[[]],[[]],[[]],[[]],[89,9],0,0,[[],34],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],0,0,0,0,[[9,9,89],9],0,0,[[],[[7,[43]]]],[[],[[7,[41]]]],0,[28,[[7,[[42,[17,41]]]]]],[28,[[7,[[42,[17,43]]]]]],[28,[[7,[17]]]],0,[[]],[[]],[[]],[[]],0,0,0,[28,[[7,[40]]]],0,[[]],[[]],[[]],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],18],[[],18],[[],18],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,[[]],[[]],[[]],[[]],0,[[],90],[[90,68],7],[[]],[[]],[1],[1],[[],[[3,[2]]]],[1],[[]],[[],1],[[]],[[]],0,[[],3],[[],3],[[],18],[[[20,[19]]],[[20,[21,19]]]],[[],21],[[],21],[[]]],"p":[[15,"usize"],[3,"With"],[4,"Result"],[3,"KeyPair"],[3,"Formatter"],[6,"Result"],[6,"Result"],[3,"Ircd"],[3,"Args"],[3,"Executor"],[3,"Arc"],[3,"SeenIds"],[3,"Mutex"],[6,"P2pPtr"],[3,"Privmsg"],[3,"Receiver"],[3,"String"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[8,"Eq"],[8,"PartialEq"],[8,"Clone"],[3,"RingBuffer"],[3,"Orphan"],[3,"UMsgs"],[15,"str"],[15,"bool"],[6,"Buffers"],[3,"OrderingAlgo"],[8,"Default"],[3,"PrivmsgsBuffer"],[15,"u64"],[3,"Vec"],[4,"Option"],[8,"Iterator"],[8,"DoubleEndedIterator"],[3,"BTreeMap"],[3,"SalsaBox"],[3,"ChannelInfo"],[3,"HashMap"],[3,"ContactInfo"],[3,"IrcConfig"],[6,"SubscriberPtr"],[3,"IrcServer"],[8,"AsyncRead"],[8,"AsyncWrite"],[8,"Send"],[8,"Unpin"],[4,"SocketAddr"],[3,"IrcClient"],[3,"ReadHalf"],[3,"BufReader"],[3,"WriteHalf"],[3,"Subscription"],[3,"Model"],[3,"Event"],[3,"PrivMsgEvent"],[4,"EventAction"],[3,"EventNode"],[8,"Read"],[3,"Error"],[6,"EventId"],[15,"u32"],[3,"EventsQueue"],[8,"Write"],[6,"EventsQueueArc"],[3,"InvObject"],[3,"ProtocolPrivmsg"],[6,"ChannelPtr"],[3,"Sender"],[6,"ProtocolBasePtr"],[8,"Future"],[3,"Pin"],[3,"RingBuffer"],[3,"InvItem"],[3,"Inv"],[3,"SyncEvent"],[3,"GetData"],[3,"UnreadEvents"],[3,"Seen"],[3,"ProtocolEvent"],[3,"JsonRpcInterface"],[4,"Value"],[4,"JsonResult"],[3,"JsonRequest"],[3,"App"],[3,"ArgMatches"],[3,"View"],[3,"Msgs"],[13,"PrivMsg"],[4,"RPL"]]},\
"ircd2":{"doc":"","t":[0,0,0,5,0,0,0,5,0,0,0,3,11,11,5,5,11,11,11,11,5,5,11,11,11,11,11,12,12,11,11,5,11,11,11,11,11,11,11,12,12,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,3,3,3,4,13,13,13,12,11,11,11,11,11,11,11,11,12,12,0,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,12,12,11,11,11,11,12,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,12,11,11,5,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,12,3,6,3,17,17,3,6,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,6,3,17,3,3,17,3,6,3,17,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,17,17,3,3,13,17,17,13,13,4,13,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,11,11,12,5,5,12,11,11,11,11,12,12,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11],"n":["crypto","events_queue","irc","main","model","privmsg","protocol_event","realmain","rpc","settings","view","KeyPair","borrow","borrow_mut","decrypt_privmsg","decrypt_target","deref","deref_mut","deserialize","drop","encrypt","encrypt_privmsg","fmt","from","init","into","pointer_metadata","private_key","public_key","serialize","to_string","try_decrypt","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","0","1","EventsQueue","EventsQueuePtr","borrow","borrow_mut","deref","deref_mut","deserialize","dispatch","drop","fetch","from","init","into","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ClientSubMsg","Config","IrcClient","IrcConfig","IrcServer","NotifierMsg","Privmsg","Privmsg","UpdateConfig","address","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","channels","client","clients_subscriptions","clone","clone","clone","clone_into","clone_into","clone_into","contacts","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","irc_config","is_cap_end","is_nick_init","is_pass_init","is_registered","is_user_init","listen","listen_to_msgs","new","new","nickname","password","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","private_key","process_connection","read_stream","server_notifier","settings","setup_listener","start","subscription","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","write_stream","0","0","0","IrcClient","address","borrow","borrow_mut","clean_input_line","deref","deref_mut","deserialize","drop","from","init","into","irc_config","listen","new","on_ping","on_quit","on_receive_cap","on_receive_join","on_receive_names","on_receive_nick","on_receive_part","on_receive_pass","on_receive_privmsg","on_receive_topic","on_receive_user","parse_line","pointer_metadata","process_line","process_msg","read_stream","registre","reply","server_notifier","subscription","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","update","update_config","vzip","write_stream","Event","EventId","EventNode","MAX_DEPTH","MAX_HEIGHT","Model","ModelPtr","_debug","_events_queue","action","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone_into","clone_into","current_root","decode","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","diff_depth","drop","drop","drop","encode","event","event_map","find_ancestor","find_depth","find_head","find_height","find_leaves","find_longest_chain","fmt","fmt","from","from","from","get_event","get_event_children","hash","init","init","init","into","into","into","is_orphan","name","new","orphans","parent","pointer_metadata","pointer_metadata","pointer_metadata","previous_event_hash","prune_chains","read_confirms","remove_node","reorganize","timestamp","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","update_root","vzip","vzip","vzip","EventAction","PrivMsg","PrivMsgEvent","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode","decode","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","encode","encode","from","from","init","init","into","into","msg","nick","pointer_metadata","pointer_metadata","target","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","0","GetData","Inv","InvId","InvItem","MAX_CONFIRM","ProtocolEvent","RingBuffer","SIZE_OF_SEEN_BUFFER","Seen","SeenPtr","SyncEvent","UNREAD_EVENT_EXPIRE_TIME","UnreadEvents","UnreadEventsPtr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains","decode","decode","decode","decode","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","eq","equivalent","event_sub","events","events","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get_hash","getdata_sub","handle_receive_event","handle_receive_getdata","handle_receive_inv","handle_receive_syncevent","hash","hash","id","inc_read_confirms","init","init","init","init","init","init","init","init","init","insert","into","into","into","into","into","into","into","into","inv_sub","invs","items","jobsman","leaves","model","name","name","name","name","new","new","new","new_event","p2p","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","push","push","seen","seen_event","seen_inv","send_getdata","send_inv","send_sync_hash_loop","start","syncevent_sub","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unread_events","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","JsonRpcInterface","addr","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","get_info","handle_request","init","into","p2p","pointer_metadata","pong","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","ChannelInfo","ContactInfo","EndOfNames","MAXIMUM_LENGTH_OF_MESSAGE","MAXIMUM_LENGTH_OF_NICKNAME","NameReply","NoTopic","RPL","Topic","autojoin","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channels","clap","clone","clone","clone","clone_into","clone_into","clone_into","config","contacts","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_clap","gen_keypair","get_current_time","init","init","init","init","into","into","into","into","irc_listen","irc_tls_cert","irc_tls_secret","joined","merge","names","net","new","new","output","parse_priv","parse_pub","password","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","private_key","pubkey","rpc_listen","salt_box","salt_box","secret","serialize","serialize","to_owned","to_owned","to_owned","topic","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verbose","vzip","vzip","vzip","vzip","View","borrow","borrow_mut","deref","deref_mut","deserialize","drop","events_queue","from","init","into","new","pointer_metadata","process","seen","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":["ircd2","","","","","","","","","","","ircd2::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd2::events_queue","","","","","","","","","","","","","","","","","","","","","","","","ircd2::irc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd2::irc::ClientSubMsg","","ircd2::irc::NotifierMsg","ircd2::irc::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd2::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd2::privmsg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd2::privmsg::EventAction","ircd2::protocol_eventircd2::rpc","","","","","","","","","","","","","","","","","","","","","","","ircd2::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ircd2::view","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Decrypt PrivMsg nickname and message","Decrypt PrivMsg target","","","","","The format we’re using is nonce+ciphertext, where nonce …","Encrypt PrivMsg","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","The format we’re using is nonce+ciphertext, where nonce …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Start listening to new connections from irc clients","Start listening to msgs from irc clients","","","","","","","","","","On every new connection create new IrcClient","","","","Setup a listener for irc server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Start listening for messages came from View or irc client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","ircd cli","","","This struct holds information about preconfigured channels.","This struct holds information about preconfigured contacts.","","","","","","","","Autojoin channels","","","","","","","","","Channels","","","","","","","","Sets a custom config file","Channels","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generate a new NaCl keypair and exit","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","IRC listen URL","Optional TLS certificate file path if <code>irc_listen</code> uses TLS","Optional TLS certificate key file path if <code>irc_listen</code> uses …","Flag indicates whether the user has joined the channel or …","","All nicknames which are visible on the channel","","","","Path to save keypair in","","","Password","","","","","Private key","","JSON-RPC listen URL","","","Optional NaCl box for the channel, used for …","","","","","","Optional topic for the channel","","","","","","","","","","","","","","","","","","","","","","","","","Increase verbosity","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,14,14,0,0,14,14,14,14,0,0,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,21,21,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,25,0,0,0,0,25,26,26,36,27,24,25,26,27,24,25,26,24,24,0,27,24,25,26,24,25,26,24,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,36,24,24,24,24,24,27,27,27,24,24,24,27,24,25,26,24,27,36,36,27,27,27,36,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,36,82,83,84,0,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,0,0,0,0,42,42,22,42,42,22,43,42,22,43,43,22,43,22,43,42,22,42,22,43,42,22,43,42,22,43,42,42,22,43,22,43,42,42,42,42,42,42,42,22,43,42,22,43,42,42,22,42,22,43,42,22,43,42,22,42,42,43,42,22,43,22,42,22,42,42,22,22,43,42,22,43,42,22,43,42,22,43,42,22,43,42,22,43,42,22,43,42,42,22,43,0,50,0,6,50,6,50,6,50,6,50,6,50,6,50,6,50,6,50,6,50,6,50,6,50,6,50,6,50,6,6,6,50,6,6,50,6,6,50,6,50,6,50,6,50,6,50,6,50,6,50,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,61,52,53,54,55,56,52,53,54,55,56,57,52,53,54,55,56,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,53,54,55,56,53,53,61,57,56,53,54,55,56,68,57,61,52,53,54,55,56,57,53,61,61,61,61,61,53,53,53,57,68,57,61,61,52,53,54,55,56,57,68,57,61,52,53,54,55,56,61,54,52,61,55,61,61,54,55,56,68,57,52,61,61,68,57,61,52,53,54,55,56,68,52,68,61,61,61,61,61,61,61,52,53,54,55,56,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,61,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,68,57,61,52,53,54,55,56,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,0,0,86,0,0,86,86,0,86,2,86,2,76,77,86,2,76,77,2,2,2,76,77,2,76,77,2,2,2,76,77,86,2,76,77,86,2,76,77,86,2,2,76,76,77,77,86,2,76,77,76,77,86,2,76,77,2,2,0,86,2,76,77,86,2,76,77,2,2,2,77,2,77,2,76,77,2,0,0,2,86,2,76,77,2,76,2,76,77,77,76,77,2,76,77,77,86,2,76,77,86,2,76,77,86,2,76,77,86,2,76,77,86,2,76,77,86,2,76,77,2,86,2,76,77,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81],"f":[0,0,0,[[],1],0,0,0,[[2,[4,[3]]],1],0,0,0,0,[[]],[[]],[[5,6]],[[6,7,7,8]],[9],[9],[[],[[11,[10]]]],[9],[[5,12],13],[[5,6]],[[14,15],16],[[]],[[],9],[[]],[[]],0,0,[14,11],[[],13],[[5,12],[[8,[13]]]],[[],11],[[],11],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[]],0,0,0,0,[[]],[[]],[9],[9],[[],[[11,[10]]]],[[21,22],1],[9],[21,[[1,[22]]]],[[]],[[],9],[[]],[[],23],[[]],[[],11],[[],11],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[24,24],[25,25],[26,26],[[]],[[]],[[]],0,[9],[9],[9],[9],[9],[9],[9],[9],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[9],[9],[9],[9],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[27,28,[4,[3]]],1],[[29,[30,[25]]],1],[[2,[30,[25]]],[[1,[27]]]],[2,[[1,[24]]]],0,0,[[]],[[]],[[]],[[]],0,[[27,[0,[31,32,33,34]],35,28,[4,[3]]],1],0,0,0,[27,1],[[27,[4,[3]]],1],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],17],[[],17],[[],17],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[13,[[1,[13]]]],[9],[9],[[],[[11,[10]]]],[9],[[]],[[],9],[[]],0,[[[36,[[0,[31,32,33,34]]]]]],[[[37,[[0,[31,32,33,34]]]],[39,[[38,[[0,[31,32,33,34]]]]]],35,24,28,[40,[25]]],[[36,[[0,[31,32,33,34]]]]]],[[[36,[[0,[31,32,33,34]]]],12],1],[[[36,[[0,[31,32,33,34]]]]],1],[[[36,[[0,[31,32,33,34]]]],12,12],1],[[[36,[[0,[31,32,33,34]]]],[41,[13]]],1],[[[36,[[0,[31,32,33,34]]]],[41,[13]]],1],[[[36,[[0,[31,32,33,34]]]],12],1],[[[36,[[0,[31,32,33,34]]]],[41,[13]]],1],[[[36,[[0,[31,32,33,34]]]],12],1],[[[36,[[0,[31,32,33,34]]]],12,12],1],[[[36,[[0,[31,32,33,34]]]],12,12],1],[[[36,[[0,[31,32,33,34]]]]],1],[12,1],[[]],[[[36,[[0,[31,32,33,34]]]],13],1],[[[36,[[0,[31,32,33,34]]]],6],1],0,[[[36,[[0,[31,32,33,34]]]]],1],[[[36,[[0,[31,32,33,34]]]],12],1],0,0,[[],11],[[],11],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[[36,[[0,[31,32,33,34]]]],13],1],[[[36,[[0,[31,32,33,34]]]],24]],[[]],0,0,0,0,0,0,0,0,[42],0,0,[[42,22]],[[]],[[]],[[]],[[]],[[]],[[]],0,[22,22],[43,43],[[]],[[]],0,[44,[[11,[22,45]]]],[9],[9],[9],[9],[9],[9],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[42,46,46],47],[9],[9],[9],[[22,48],[[11,[9,45]]]],0,0,[[42,46,46],46],[[42,46,46],47],[42,46],[[42,46,46],[[8,[47]]]],[42,[[41,[46]]]],[[42,46,47]],[[22,15],16],[[43,15],16],[[]],[[]],[[]],[[42,46],[[8,[22]]]],[[42,46],[[41,[22]]]],[22,46],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[42,22],49],[[],12],[23,42],0,0,[[]],[[]],[[]],0,[42],0,[[42,46]],[42],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],17],[[],17],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[42],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[6,6],[50,50],[[]],[[]],[44,[[11,[6,45]]]],[44,[[11,[50,45]]]],[9],[9],[9],[9],[[],[[11,[10]]]],[[],[[11,[10]]]],[9],[9],[[6,48],[[11,[9,45]]]],[[50,48],[[11,[9,45]]]],[[]],[[]],[[],9],[[],9],[[]],[[]],0,0,[[]],[[]],0,[[]],[[]],[6,13],[[],11],[[],11],[[],11],[[],11],[[],17],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[],20],[[],20],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[52,[51]]],[[52,[51]]]],[53,53],[54,54],[55,55],[56,56],[[]],[[]],[[]],[[]],[[]],[[57,46],49],[[[52,[[0,[58,59,51]]]]],49],[44,[[11,[53,45]]]],[44,[[11,[54,45]]]],[44,[[11,[55,45]]]],[44,[[11,[56,45]]]],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[9],[9],[9],[9],[9],[9],[9],[9],[[53,48],[[11,[9,45]]]],[[54,48],[[11,[9,45]]]],[[55,48],[[11,[9,45]]]],[[56,48],[[11,[9,45]]]],[[53,53],49],[[],49],0,0,0,[[53,15],16],[[54,15],16],[[55,15],16],[[56,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[57,46],[[8,[22]]]],[[],60],0,[[[4,[61]]],1],[[[4,[61]]],1],[[[4,[61]]],1],[[[4,[61]]],1],[53],0,0,[[57,46],[[8,[22]]]],[[],9],[[],9],[[],9],[[62,63,64,[65,[46]],[65,[60]],66],67],[[],9],[[],9],[[],9],[[],9],[[],9],[[57,22]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[61,12],[[],12],[[],12],[[],12],[[],[[65,[[0,[58,59,51]]]]]],[[],66],[9,[[52,[[0,[58,59,51]]]]]],[[61,22],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[68,[[0,[58,59,51]]]]],49],[[[52,[[0,[58,59,51]]]],[0,[58,59,51]]]],0,0,0,[[61,[41,[46]]],1],[[61,22],1],[[[4,[61]]],1],[[[4,[61]],[4,[3]]],[[70,[[19,[69]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[9],[9],[[],[[11,[10]]]],[9],[[]],[[71,72,72],73],[[71,74],[[70,[[19,[69]]]]]],[[],9],[[]],0,[[]],[[71,72,72],73],[[],11],[[],11],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],75],[2,2],[76,76],[77,77],[[]],[[]],[[]],0,0,[[],2],[[],76],[[],77],[9],[9],[9],[9],[9],[9],[9],[9],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[2]]]],[[],[[11,[76]]]],[[],[[11,[10]]]],[[],[[11,[77]]]],[[],[[11,[10]]]],[9],[9],[9],[9],[[76,15],16],[[77,15],16],[[]],[[]],[[]],[[]],[78,2],0,[[],60],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],0,0,0,0,[[2,2,78],2],0,0,[[],76],[[],77],0,[12,[[1,[79]]]],[12,[[1,[80]]]],0,[[]],[[]],[[]],[[]],0,0,0,[[76,12,12],[[8,[5]]]],[[77,12],[[8,[5]]]],0,[76,11],[77,11],[[]],[[]],[[]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],17],[[],17],[[],17],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[]],[[]],[[]],[[]],0,[[]],[[]],[9],[9],[[],[[11,[10]]]],[9],0,[[]],[[],9],[[]],[23,81],[[]],[81,1],0,[[],11],[[],11],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[]]],"p":[[6,"Result"],[3,"Args"],[3,"Executor"],[3,"Arc"],[3,"SalsaBox"],[3,"PrivMsgEvent"],[3,"HashMap"],[4,"Option"],[15,"usize"],[3,"With"],[4,"Result"],[15,"str"],[3,"String"],[3,"KeyPair"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"EventsQueue"],[3,"Event"],[6,"EventsQueuePtr"],[3,"IrcConfig"],[4,"ClientSubMsg"],[4,"NotifierMsg"],[3,"IrcServer"],[3,"Sender"],[3,"Receiver"],[6,"SubscriberPtr"],[8,"AsyncRead"],[8,"AsyncWrite"],[8,"Send"],[8,"Unpin"],[4,"SocketAddr"],[3,"IrcClient"],[3,"WriteHalf"],[3,"ReadHalf"],[3,"BufReader"],[3,"Subscription"],[3,"Vec"],[3,"Model"],[3,"EventNode"],[8,"Read"],[3,"Error"],[6,"EventId"],[15,"u32"],[8,"Write"],[15,"bool"],[4,"EventAction"],[8,"Clone"],[3,"RingBuffer"],[3,"InvItem"],[3,"Inv"],[3,"SyncEvent"],[3,"GetData"],[3,"UnreadEvents"],[8,"Eq"],[8,"PartialEq"],[15,"u64"],[3,"ProtocolEvent"],[6,"ChannelPtr"],[6,"P2pPtr"],[6,"ModelPtr"],[6,"SeenPtr"],[6,"UnreadEventsPtr"],[6,"ProtocolBasePtr"],[3,"Seen"],[8,"Future"],[3,"Pin"],[3,"JsonRpcInterface"],[4,"Value"],[4,"JsonResult"],[3,"JsonRequest"],[3,"App"],[3,"ContactInfo"],[3,"ChannelInfo"],[3,"ArgMatches"],[3,"SecretKey"],[3,"PublicKey"],[3,"View"],[13,"Privmsg"],[13,"Config"],[13,"Privmsg"],[13,"PrivMsg"],[4,"RPL"]]},\
"lilith":{"doc":"","t":[17,17,3,3,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,12,12,11,11,11,5,5,5,5,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,3,3,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,5,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11],"n":["CONFIG_FILE","CONFIG_FILE_CONTENTS","Lilith","Spawn","addresses","blockchain_notify_blocks","borrow","borrow","borrow_mut","borrow_mut","config","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","handle_request","info","init","init","into","into","load_hosts","main","name","p2p","pointer_metadata","pointer_metadata","pong","realmain","save_hosts","simulate_blocks","spawn_network","spawns","spawns","spawns_hosts","subscriber","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","urls","vzip","vzip","Args","NetInfo","borrow","borrow","borrow_mut","borrow_mut","channel_log","clap","clone","clone","clone_into","clone_into","config","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","fmt","from","from","from_clap","hosts_file","init","init","into","into","localnet","merge","parse_configured_networks","peers","pointer_metadata","pointer_metadata","port","rpc_listen","seeds","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","urls","verbose","vzip","vzip"],"q":["lilith","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lilith::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Struct representing the daemon.","Struct representing a spawned p2p network.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieve saved hosts for provided networks","","","","","","","","Save spawns current hosts","","","","Spawned networks","","","","","","","","","","","","","","","Configured urls","","","","Defines the network specific settings","","","","","Enable channel log","","","","","","Configuration file to use","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Hosts .tsv file to use","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Enable localnet hosts","","Parse a TOML string for any configured network and return …","Connect to peers (repeatable flag)","","","Specific port the network will use","JSON-RPC listen URL","Connect to seeds (repeatable flag)","","","","","","","","","","","","","","","Daemon published urls, common for all enabled networks …","Increase verbosity (-vvv supported)","",""],"i":[0,0,0,0,1,4,1,4,1,4,0,1,4,1,4,1,4,1,4,1,4,4,1,1,4,1,4,0,0,1,1,1,4,4,0,0,0,0,4,4,4,4,1,4,1,4,1,4,1,4,1,4,1,4,4,1,4,0,0,19,25,19,25,25,19,19,25,19,25,19,19,19,25,19,25,19,19,25,19,25,19,19,25,19,19,19,25,19,25,25,19,0,25,19,25,25,19,25,19,25,19,25,19,25,19,25,19,25,19,25,19,25,19,19,19,25],"f":[0,0,0,0,[1,[[3,[2]]]],[[4,5],6],[[]],[[]],[[]],[[]],0,[7],[7],[7],[7],[[],[[9,[8]]]],[[],[[9,[8]]]],[7],[7],[[]],[[]],[[4,10],[[13,[[12,[11]]]]]],[1,5],[[],7],[[],7],[[]],[[]],[14,[[17,[2,[16,[15]]]]]],[[],18],0,0,[[]],[[]],[[4,5],6],[[19,[21,[20]]],18],[[14,[17,[2,[3,[2]]]]]],[[[23,[22]]]],[[24,25,[3,[15]],[26,[16]],[21,[20]]],[[18,[1]]]],[[4,5],6],0,[4,[[17,[2,[3,[2]]]]]],0,[[],9],[[],9],[[],9],[[],9],[[],27],[[],27],[[[12,[28]]],[[12,[29,28]]]],[[[12,[28]]],[[12,[29,28]]]],[[],29],[[],29],[[],29],[[],29],0,[[]],[[]],0,0,[[]],[[]],[[]],[[]],0,[[],30],[19,19],[25,25],[[]],[[]],0,[[],19],[7],[7],[7],[7],[[],[[9,[8]]]],[[],[[9,[19]]]],[[],[[9,[8]]]],[7],[7],[[19,31],32],[[]],[[]],[33,19],0,[[],7],[[],7],[[]],[[]],0,[[19,19,33],19],[24,[[18,[[17,[2,25]]]]]],0,[[]],[[]],0,0,0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],27],[[],27],[[[12,[28]]],[[12,[29,28]]]],[[[12,[28]]],[[12,[29,28]]]],[[],29],[[],29],[[],29],[[],29],0,0,[[]],[[]]],"p":[[3,"Spawn"],[3,"String"],[3,"Vec"],[3,"Lilith"],[4,"Value"],[4,"JsonResult"],[15,"usize"],[3,"With"],[4,"Result"],[3,"JsonRequest"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"Path"],[3,"Url"],[3,"HashSet"],[3,"HashMap"],[6,"Result"],[3,"Args"],[3,"Executor"],[3,"Arc"],[3,"JsonNotification"],[6,"SubscriberPtr"],[15,"str"],[3,"NetInfo"],[4,"Option"],[3,"TypeId"],[3,"Global"],[8,"Any"],[3,"App"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"]]},\
"tau":{"doc":"","t":[13,3,13,17,13,13,13,13,13,13,13,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,0,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,0,11,11,11,12,12,12,12,12,12,12,12,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,3,3,13,13,13,4,13,3,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,12,11,11,11,11,12,12,12,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5,5,5],"n":["Add","Args","Comment","DEFAULT_PATH","Export","Import","Info","List","Log","Modify","Open","Pause","Start","Stop","Switch","Tau","TauSubcommand","add","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","close_connection","command","command","command_for_update","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drawdown","drop","drop","drop","endpoint","export_to","filter","filters","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","get_ids","get_stop_tasks","get_task_by_id","get_ws","group_id","has_subcommand","import_from","init","init","init","into","into","into","main","pointer_metadata","pointer_metadata","pointer_metadata","primitives","rpc","rpc_client","set_comment","set_state","switch_ws","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","update","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","util","verbose","view","vzip","vzip","vzip","assignee","content","month","path","path","values","values","workspace","BLUE","GREEN","INCREASE_FACTOR","MAX_SCALE","MIN_SCALE","NO_TASK_SCALE","assignees","drawdown","get_days_from_month","helper_parse_func","is_leap_year","to_naivedate","apply_filter","get_ids","no_filter_warn","BaseTask","Comment","Open","Pause","Start","State","Stop","TaskEvent","TaskInfo","action","assign","assign","author","author","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comments","content","content","created_at","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","desc","desc","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","due","due","events","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","id","init","init","init","init","init","into","into","into","into","into","is_pause","is_start","is_stop","owner","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","project","project","rank","rank","ref_id","serialize","serialize","serialize","serialize","state","tags","tags","task_from_cli","timestamp","timestamp","title","title","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","workspace","desc_in_editor","due_as_timestamp","comments_as_string","events_as_string","print_task_info","print_task_list"],"q":["tau","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tau::TauSubcommand","","","","","","","","tau::drawdown","","","","","","","","","","","","tau::filter","","","tau::primitives","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tau::util","","tau::view","","",""],"d":["Add a new task.","","Set or Get comment for task(s).","","Export tasks to a specified directory.","Import tasks from a specified directory.","Get all data about selected task(s).","List tasks.","Log drawdown.","Modify/Edit an existing task.","Open task(s).","Pause task(s).","Start task(s).","Stop task(s).","Switch workspace.","","","Add a new task.","","","","","","","","","","","","","","","","","","","","","","","","","","","","taud JSON-RPC endpoint","Export tasks.","","Search filters (zero or more)","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Get current open tasks ids.","Get month’s stopped tasks.","Get task data by its ID.","Get current workspace.","","","Import tasks.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set a comment for a task.","Set the state for a task.","Switch workspace.","","","","","","","","","","","","","","","","","","","Update existing task given it’s ID and some params.","","","","","","Increase verbosity (-vvv supported)","","","","","The person of which we want to draw a heatmap (if not …","Set comment content if provided (Get comments otherwise).","The month in which we want to draw a heatmap (e.g. 0822 …","The parent directory from where you want to import tasks.","The parent directory to where you want to export tasks.","Values (e.g. project:blockchain).","Pairs of key:value (e.g. desc:description assign:dark).","Tau workspace.","","","","","","","","Log drawdown gets all assignees of tasks, stores a vec of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Start up the preferred editor to edit a task’s …","Parse due date (e.g. “1503” for 15 March) as i64 …","","","",""],"i":[13,0,13,0,13,13,13,13,13,13,13,13,13,13,13,0,0,1,11,11,13,13,1,11,13,1,11,13,1,11,11,11,1,11,13,1,11,13,1,11,13,0,1,11,13,11,1,0,11,1,11,13,11,13,11,13,1,1,1,1,11,13,1,1,11,13,1,11,13,0,1,11,13,0,0,1,1,1,1,1,11,13,1,11,13,1,11,13,1,11,13,1,11,13,1,11,13,1,11,13,11,13,0,11,0,1,11,13,32,33,32,34,35,36,37,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,0,21,0,0,28,2,18,28,29,21,2,18,28,29,21,2,18,28,29,2,18,28,29,2,18,28,29,18,28,29,18,28,21,2,18,28,29,21,2,18,28,29,2,18,21,2,2,18,18,28,28,29,29,21,2,18,28,29,2,18,18,21,2,18,28,28,29,29,21,2,18,28,29,21,18,21,2,18,28,29,21,2,18,28,29,21,21,21,18,21,2,18,28,29,2,18,2,18,18,2,18,28,29,18,2,18,0,28,29,2,18,2,18,28,29,21,28,29,21,2,18,28,29,21,2,18,28,29,21,2,18,28,29,21,2,18,28,29,21,2,18,28,29,21,2,18,28,29,21,2,18,28,29,18,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[4,4],[4,4],[4,4],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[1,3],[[],4],0,[[],4],[5],[5],[5],[5],[5],[5],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],0,[5],[5],[5],0,[[1,8],[[3,[9]]]],0,0,[[]],[[]],[[]],[10,[[7,[11,12]]]],[10,[[7,[13,12]]]],[10,[[7,[11,12]]]],[10,[[7,[13,12]]]],[1,[[3,[[15,[14]]]]]],[[1,[17,[16]]],[[3,[[15,[18]]]]]],[[1,14],[[3,[18]]]],[1,[[3,[8]]]],[[],[[17,[19]]]],[20,9],[[1,8],[[3,[9]]]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[],3],[[]],[[]],[[]],0,0,0,[[1,14,20],3],[[1,14,21],3],[[1,8],3],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],22],[[],22],[[],22],[[[24,[23]]],[[24,[25,23]]]],[[[24,[23]]],[[24,[25,23]]]],[[[24,[23]]],[[24,[25,23]]]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[1,14,2],3],[[11,10],[[7,[12]]]],[[13,10],[[7,[12]]]],[[11,10],[[7,[12]]]],[[13,10],[[7,[12]]]],0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[15,[18]]],[[15,[8]]]],[[8,[15,[18]],[17,[8]]],3],[8,[[3,[16]]]],[8,3],[26,9],[8,[[3,[27]]]],[[15,20]],[15,[[3,[[15,[14]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[18,18],[28,28],[29,29],[[]],[[]],[[]],[[]],0,0,0,0,[[],28],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,[[],[[7,[6]]]],[[],[[7,[2]]]],[[],[[7,[6]]]],[[],[[7,[18]]]],[[],[[7,[6]]]],[[],[[7,[6]]]],[[],[[7,[28]]]],[[],[[7,[6]]]],[[],[[7,[29]]]],[5],[5],[5],[5],[5],0,0,0,[[21,30],31],[[2,30],31],[[18,30],31],[[28,30],31],[[28,30],31],[[29,30],31],[[29,30],31],[[]],[[]],[[]],[[]],[[]],[20,[[7,[21]]]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[21,9],[21,9],[21,9],0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[2,7],[18,7],[28,7],[29,7],0,0,0,[[[15,[8]]],[[3,[2]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],22],[[],22],[[],22],[[],22],[[],22],[[[24,[23]]],[[24,[25,23]]]],[[[24,[23]]],[[24,[25,23]]]],[[[24,[23]]],[[24,[25,23]]]],[[[24,[23]]],[[24,[25,23]]]],[[[24,[23]]],[[24,[25,23]]]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],0,[[],[[3,[[17,[8]]]]]],[20,[[17,[16]]]],[[[15,[29]]],8],[[[15,[28]]]],[18,3],[[[15,[18]],8],3]],"p":[[3,"Tau"],[3,"BaseTask"],[6,"Result"],[3,"Command"],[15,"usize"],[3,"With"],[4,"Result"],[3,"String"],[15,"bool"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[4,"TauSubcommand"],[15,"u64"],[3,"Vec"],[15,"i64"],[4,"Option"],[3,"TaskInfo"],[3,"Id"],[15,"str"],[4,"State"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[15,"i32"],[3,"NaiveDate"],[3,"TaskEvent"],[3,"Comment"],[3,"Formatter"],[6,"Result"],[13,"Log"],[13,"Comment"],[13,"Import"],[13,"Export"],[13,"Modify"],[13,"Add"],[13,"Switch"]]},\
"taud":{"doc":"","t":[3,11,11,11,11,11,5,11,11,11,11,11,5,0,11,11,5,11,11,0,5,0,12,5,12,11,5,0,5,0,11,11,11,11,11,11,11,0,11,13,13,13,13,13,13,13,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,12,12,12,12,3,3,11,12,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,17,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,3,3,3,3,3,3,3,3,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5],"n":["EncryptedTask","borrow","borrow_mut","clone","clone_into","decode","decrypt_task","deref","deref_mut","deserialize","drop","encode","encrypt_task","error","fmt","from","get_workspaces","init","into","jsonrpc","main","month_tasks","nonce","on_receive_task","payload","pointer_metadata","realmain","settings","start_sync_loop","task_info","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","util","vzip","Darkfi","EncryptionError","InvalidData","InvalidDueTime","InvalidId","IoError","SerdeJsonError","TaudError","TaudResult","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","init","into","pointer_metadata","provide","source","to_json_result","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","0","0","0","0","0","BaseTaskInfo","JsonRpcInterface","add","assign","borrow","borrow","borrow_mut","borrow_mut","check_params_for_update","clone","clone_into","dataset_path","deref","deref","deref_mut","deref_mut","desc","deserialize","deserialize","deserialize","drop","drop","due","export_to","fmt","from","from","get_ids","get_info","get_stop_tasks","get_task_by_id","get_ws","handle_request","import_from","init","init","into","into","load_task_by_id","new","nickname","notify_queue_sender","p2p","pointer_metadata","pointer_metadata","pong","project","rank","serialize","set_comment","set_state","switch_ws","tags","title","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","update","vzip","vzip","workspace","workspaces","MonthTasks","active_tks","add","borrow","borrow_mut","clone","clone_into","create","created_at","deactive_tks","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","fmt","from","get_all","get_path","init","into","load_current_tasks","load_or_create","load_stop_tasks","new","objects","pointer_metadata","remove","save","serialize","set_date","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Args","CONFIG_FILE","CONFIG_FILE_CONTENTS","borrow","borrow_mut","clap","clone","clone_into","config","datastore","default","deref","deref_mut","deserialize","deserialize","drop","fmt","from","from_clap","generate","init","into","merge","net","nickname","pointer_metadata","refresh","rpc_listen","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verbose","vzip","workspaces","0","0","0","0","0","Comment","TaskAssigns","TaskComments","TaskEvent","TaskEvents","TaskInfo","TaskProjects","TaskTags","action","activate","assign","author","author","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comments","content","content","created_at","deactivate","decode","decode","decode","decode","decode","decode","decode","decode","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","desc","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","due","encode","encode","encode","encode","encode","encode","encode","encode","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","events","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_id","get_path","get_state","id","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","load","new","new","new","owner","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","project","rank","ref_id","save","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_assign","set_comment","set_desc","set_due","set_event","set_project","set_rank","set_state","set_tags","set_title","state","tags","timestamp","timestamp","title","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","workspace","find_free_id"],"q":["taud","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","taud::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","taud::error::TaudError","","","","","taud::jsonrpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","taud::month_tasks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","taud::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","taud::task_infotaud::util"],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","taud cli","","","","","","","","Sets a custom config file","Sets Datastore Path","","","","","","","","Returns the argument unchanged.","","Generate a new workspace","","Calls <code>U::from(self)</code>.","","","Current display name    ","","Clean all the local data in datastore path (BE CAREFULL) …","JSON-RPC listen URL","","","","","","","","Increase verbosity","","Secret Key To Encrypt/Decrypt tasks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0,0,1,1,1,1,1,1,1,0,1,7,7,7,7,7,7,7,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7,7,59,60,61,62,63,0,0,36,37,36,37,36,37,36,37,37,36,36,37,36,37,37,36,37,37,36,37,37,36,37,36,37,36,36,36,36,36,36,36,36,37,36,37,36,36,36,36,36,36,37,36,37,37,37,36,36,36,37,37,37,36,37,36,37,36,37,36,37,36,37,36,37,36,36,37,36,36,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,52,53,54,55,56,0,0,0,0,0,0,0,0,50,6,6,50,51,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,6,50,51,6,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,6,50,50,51,51,52,52,53,53,54,54,55,55,56,56,6,6,50,51,52,53,54,55,56,6,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,6,6,6,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,6,50,51,6,6,50,51,52,53,54,55,56,6,6,6,6,6,50,51,52,53,54,55,56,6,6,6,6,6,6,6,6,6,6,6,6,6,50,51,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,50,51,52,53,54,55,56,6,6,0],"f":[0,[[]],[[]],[1,1],[[]],[2,[[4,[1,3]]]],[[1,5],[[4,[6,7]]]],[8],[8],[[],[[4,[9]]]],[8],[[1,10],[[4,[8,3]]]],[[6,5,11],[[4,[1,7]]]],0,[[1,12],13],[[]],[14,[[17,[[16,[15,5]]]]]],[[],8],[[]],0,[[],17],0,0,[[1,18,16],[[4,[7]]]],0,[[]],[[14,[20,[19]]],17],0,[[[21,[6]],[22,[1]],[21,[1]],23,[16,[15,5]],11],[[4,[7]]]],0,[[]],[[],4],[[],4],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],0,[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[8],[8],[[],[[4,[9]]]],[8],[[7,12],13],[[7,12],13],[28,7],[[]],[29,7],[3,7],[30,7],[[],8],[[]],[[]],[31],[7,[[33,[32]]]],[[[4,[34,7]],34],35],[[],15],[[],4],[[],4],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],[[]],0,0,0,0,0,0,0,[36,[[4,[34,7]]]],0,[[]],[[]],[[]],[[]],[[36,34,34,15],[[4,[6,7]]]],[37,37],[[]],0,[8],[8],[8],[8],0,[[],[[4,[9]]]],[[],[[4,[9]]]],[[],[[4,[37]]]],[8],[8],0,[36,[[4,[34,7]]]],[[37,12],13],[[]],[[]],[36,[[4,[34,7]]]],[36,[[4,[34,7]]]],[36,[[4,[34,7]]]],[36,[[4,[34,7]]]],[36,[[4,[34,7]]]],[[36,38],[[40,[[26,[39]]]]]],[36,[[4,[34,7]]]],[[],8],[[],8],[[]],[[]],[[36,34,15],[[4,[6,7]]]],[[23,[22,[6]],15,[16,[15,5]],41],36],0,0,0,[[]],[[]],[36,[[4,[34,7]]]],0,0,[37,4],[36,[[4,[34,7]]]],[36,[[4,[34,7]]]],[36,[[4,[34,7]]]],0,0,[[]],[[],4],[[],4],[[],4],[[],4],[[],24],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],[[],27],[[],27],[36,[[4,[34,7]]]],[[]],[[]],0,0,0,0,[[42,43]],[[]],[[]],[42,42],[[]],[[44,18],[[4,[42,7]]]],0,0,[8],[8],[[],[[4,[9]]]],[[],[[4,[42]]]],[8],[[42,42],45],[[],45],[[42,12],13],[[]],[18,[[47,[[46,[23]]]]]],[[44,18],23],[[],8],[[]],[[18,15,45],[[4,[[46,[6]],7]]]],[[[33,[44]],18],[[4,[42,7]]]],[[18,15,[33,[44]]],[[4,[[46,[6]],7]]]],[[],42],[[42,18],[[4,[[46,[6]],7]]]],[[]],[[42,43]],[[42,18],[[4,[7]]]],[42,4],[[42,44]],[[]],[[],4],[[],4],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],[[]],0,0,0,[[]],[[]],[[],48],[14,14],[[]],0,0,[[],14],[8],[8],[[],[[4,[14]]]],[[],[[4,[9]]]],[8],[[14,12],13],[[]],[49,14],0,[[],8],[[]],[[14,14,49],14],0,0,[[]],0,0,[[]],[[],4],[[],4],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[6,18],[[4,[7]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[6,18],[[4,[7]]]],[2,[[4,[50,3]]]],[2,[[4,[51,3]]]],[2,[[4,[52,3]]]],[2,[[4,[53,3]]]],[2,[[4,[54,3]]]],[2,[[4,[55,3]]]],[2,[[4,[56,3]]]],[2,[[4,[6,3]]]],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],0,[[],[[4,[9]]]],[[],[[4,[50]]]],[[],[[4,[51]]]],[[],[[4,[9]]]],[[],[[4,[52]]]],[[],[[4,[9]]]],[[],[[4,[9]]]],[[],[[4,[53]]]],[[],[[4,[54]]]],[[],[[4,[9]]]],[[],[[4,[9]]]],[[],[[4,[55]]]],[[],[[4,[56]]]],[[],[[4,[9]]]],[[],[[4,[9]]]],[[],[[4,[6]]]],[8],[8],[8],[8],[8],[8],[8],[8],0,[[50,10],[[4,[8,3]]]],[[51,10],[[4,[8,3]]]],[[52,10],[[4,[8,3]]]],[[53,10],[[4,[8,3]]]],[[54,10],[[4,[8,3]]]],[[55,10],[[4,[8,3]]]],[[56,10],[[4,[8,3]]]],[[6,10],[[4,[8,3]]]],[[50,50],45],[[51,51],45],[[52,52],45],[[53,53],45],[[54,54],45],[[55,55],45],[[56,56],45],[[6,6],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],0,[[50,12],13],[[51,12],13],[[52,12],13],[[53,12],13],[[54,12],13],[[55,12],13],[[56,12],13],[[6,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,57],[[43,18],23],[6,15],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[43,18],[[4,[6,7]]]],[[15,15,15],50],[[43,43],51],[[15,43,43,43,[33,[44]],[33,[58]],18],[[4,[6,7]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[6,18],[[4,[7]]]],[50,4],[51,4],[52,4],[53,4],[54,4],[55,4],[56,4],[6,4],[6],[[6,51]],[[6,43]],[[6,[33,[44]]]],[[6,43,43]],[6],[[6,[33,[58]]]],[[6,43]],[6],[[6,43]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[[26,[25]]],[[26,[27,25]]]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],57]],"p":[[3,"EncryptedTask"],[8,"Read"],[3,"Error"],[4,"Result"],[3,"SalsaBox"],[3,"TaskInfo"],[4,"TaudError"],[15,"usize"],[3,"With"],[8,"Write"],[3,"OsRng"],[3,"Formatter"],[6,"Result"],[3,"Args"],[3,"String"],[3,"HashMap"],[6,"Result"],[3,"Path"],[3,"Executor"],[3,"Arc"],[3,"Receiver"],[3,"Sender"],[3,"PathBuf"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"Error"],[4,"Error"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[4,"Value"],[4,"JsonResult"],[3,"JsonRpcInterface"],[3,"BaseTaskInfo"],[3,"JsonRequest"],[8,"Future"],[3,"Pin"],[6,"P2pPtr"],[3,"MonthTasks"],[15,"str"],[3,"Timestamp"],[15,"bool"],[3,"Vec"],[6,"Result"],[3,"App"],[3,"ArgMatches"],[3,"TaskEvent"],[3,"Comment"],[3,"TaskEvents"],[3,"TaskComments"],[3,"TaskProjects"],[3,"TaskAssigns"],[3,"TaskTags"],[15,"u32"],[15,"f32"],[13,"InvalidData"],[13,"Darkfi"],[13,"SerdeJsonError"],[13,"EncryptionError"],[13,"IoError"]]},\
"vanityaddr":{"doc":"","t":[3,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,12,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Args","DrkAddr","DrkToken","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","case_sensitive","command","command_for_update","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","init","init","init","into","into","into","main","new","new","pointer_metadata","pointer_metadata","pointer_metadata","prefix","public","secret","secret","starts_with","starts_with","starts_with_any","starts_with_any","threads","token_id","token_id","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","vzip"],"q":["vanityaddr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Should the search be case-sensitive","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Prefixes to search","","","","","","","","Number of threads to use (defaults to number of available …","","Search for TokenId instead of an address","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,6,6,10,11,6,10,11,6,6,6,6,10,11,6,10,11,6,10,11,6,10,11,6,10,11,6,6,6,6,10,11,6,10,11,6,0,10,11,10,11,6,6,10,10,11,10,11,10,11,6,11,6,10,11,6,10,11,6,10,11,6,10,11,6,10,11,6,10,11,6,6,6,10,11,6],"f":[0,0,0,[1,1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[],1],[2],[2],[2],[2],[2],[2],[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[3]]]],[2],[2],[2],[[]],[[]],[[]],[5,[[4,[6,7]]]],[5,[[4,[6,7]]]],[[],[[9,[8]]]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[],10],[[],11],[[]],[[]],[[]],0,0,0,0,[[10,12,13],13],[[11,12,13],13],[[10,13],13],[[11,13],13],0,0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],14],[[],14],[[],14],[[[16,[15]]],[[16,[17,15]]]],[[[16,[15]]],[[16,[17,15]]]],[[[16,[15]]],[[16,[17,15]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[6,5],[[4,[7]]]],[[6,5],[[4,[7]]]],[[]],[[]],[[]]],"p":[[3,"Command"],[15,"usize"],[3,"With"],[4,"Result"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[3,"Id"],[4,"Option"],[3,"DrkAddr"],[3,"DrkToken"],[15,"str"],[15,"bool"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"]]},\
"zkas":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,5,12,11,12,11,11,11,11,11,11,11,11,11],"n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","deserialize","drop","evaluate","examine","from","from_arg_matches","from_arg_matches_mut","group_id","init","input","interactive","into","main","output","pointer_metadata","strip","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":["zkas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Preprocess only; do not compile","Examine decoded bytecode","Returns the argument unchanged.","","","","","ZK script to compile","Interactive semantic analysis","Calls <code>U::from(self)</code>.","","Place the output into <code>&lt;FILE&gt;</code>","","Strip debug symbols","","","","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6],"f":[0,[1,1],[1,1],[[]],[[]],[[],1],[[],1],[2],[2],[[],[[4,[3]]]],[2],0,0,[[]],[5,[[4,[6,7]]]],[5,[[4,[6,7]]]],[[],[[9,[8]]]],[[],2],0,0,[[]],[[]],0,[[]],0,[[],4],[[],4],[[],10],[[[12,[11]]],[[12,[13,11]]]],[[],13],[[],13],[[6,5],[[4,[7]]]],[[6,5],[[4,[7]]]],[[]]],"p":[[3,"Command"],[15,"usize"],[3,"With"],[4,"Result"],[3,"ArgMatches"],[3,"Args"],[6,"Error"],[3,"Id"],[4,"Option"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"]]},\
"zktool":{"doc":"","t":[13,3,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Add","CliDao","CliSubCommands","FromInt","MakeProof","Mul","Random","Sub","VerifyProof","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","init","init","into","into","main","pointer_metadata","pointer_metadata","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","vzip","vzip","bincode","bincode","publics","publics","value","value_a","value_a","value_a","value_b","value_b","value_b","witness"],"q":["zktool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zktool::CliSubCommands","","","","","","","","","","",""],"d":["","","","Convert int to Base","","","Create a random Base value","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Increase verbosity","","","","","","","","","","","","","",""],"i":[6,0,0,6,6,6,6,6,6,8,8,6,6,6,8,6,8,8,8,8,6,8,6,8,6,8,6,8,6,8,6,8,6,8,8,6,6,8,6,8,0,6,8,6,8,6,8,6,8,6,8,6,8,6,8,6,8,6,8,8,6,8,17,18,17,18,19,20,21,22,20,21,22,17],"f":[0,0,0,0,0,0,0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[],1],0,[[],1],[2],[2],[2],[2],[[],[[4,[3]]]],[[],[[4,[3]]]],[2],[2],[[]],[[]],[5,[[4,[6,7]]]],[5,[[4,[8,7]]]],[5,[[4,[6,7]]]],[5,[[4,[8,7]]]],[[],[[10,[9]]]],[11,12],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],13],[[],13],[[[15,[14]]],[[15,[16,14]]]],[[[15,[14]]],[[15,[16,14]]]],[[],16],[[],16],[[],16],[[],16],[[6,5],[[4,[7]]]],[[8,5],[[4,[7]]]],[[6,5],[[4,[7]]]],[[8,5],[[4,[7]]]],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"Command"],[15,"usize"],[3,"With"],[4,"Result"],[3,"ArgMatches"],[4,"CliSubCommands"],[6,"Error"],[3,"CliDao"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[13,"MakeProof"],[13,"VerifyProof"],[13,"FromInt"],[13,"Add"],[13,"Sub"],[13,"Mul"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
